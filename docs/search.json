[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rで機械学習！",
    "section": "",
    "text": "紹介\n世の中に流通している，機械学習を実践的に学べる教科書・テキストを見ると，ほぼ全てがPythonを用いている．\n私はRをメインに学んできたので，Pythonで教えられても理解に欠けてしまう可能性がある．Pythonを1から学べばいい話だが，それは面倒だ．できればRのコードで勉強したいというのが本音である．\nそんな，私と同じ考えを持っているであろう某yy研究室所属の学生のために，とある教科書を取り上げて，そこに記されているPythonのコードを全てRのコードに書き直すことを決意した．\n\n\n\n\n\n\n注意\n\n\n\nあくまで理論勉強のためのものである．実務で機械学習を実装する際はPythonを用いるべきである．\n\n\n\n\n対象者\nRに精通している人で，機械学習を実践的に学びたい，とはいえPythonを1から学ぶのは面倒だという人．\n教科書\n伊藤真(2018) 『Pythonで動かして学ぶ！あたらしい機械学習の教科書 第3版』翔泳社．\nメモ\n\n(2024/04/19): 更新中．\n(2024/04/24): 第4章: 機械学習に必要な数学の基本 完了．\n(2024/05/10): 第5章: 教師あり学習 : 回帰 一旦完了．\n\n\n\n\n\n\n\n本書の使い方\n\n# 薄い緑色がPythonコード．\n\n\n# 薄い青色がRコード．"
  },
  {
    "objectID": "index.html#対象者",
    "href": "index.html#対象者",
    "title": "Rで機械学習！",
    "section": "",
    "text": "Rに精通している人で，機械学習を実践的に学びたい，とはいえPythonを1から学ぶのは面倒だという人．"
  },
  {
    "objectID": "index.html#教科書",
    "href": "index.html#教科書",
    "title": "Rで機械学習！",
    "section": "",
    "text": "伊藤真(2018) 『Pythonで動かして学ぶ！あたらしい機械学習の教科書 第3版』翔泳社．"
  },
  {
    "objectID": "index.html#メモ",
    "href": "index.html#メモ",
    "title": "Rで機械学習！",
    "section": "",
    "text": "(2024/04/19): 更新中．"
  },
  {
    "objectID": "index.html#準備",
    "href": "index.html#準備",
    "title": "Rで機械学習！",
    "section": "準備",
    "text": "準備\nまず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "index.html#第4章",
    "href": "index.html#第4章",
    "title": "Rで機械学習！",
    "section": "第4章",
    "text": "第4章\n\n第1節\n\nリスト 4-1-(1)\n\n# Python\nimport numpy as np\n\n\n# R\nNULL\n\nNumpyのインポートに対応するRのコードはない．{tidyverse}をインストールすれば良い．\n\n\nリスト 4-1-(2)\n\n# Python\na = np.array([2, 1])\nprint(a)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nprint(a)\n\n     [,1] [,2]\n[1,]    2    1\n\n\nnp.array()に対応するRのコードにはarray()がある．array(要素, dim = c(行数, 列数))のように指定すると配列が作成される．ちなみに，array()では要素が列に沿って配置されるため，行に沿って配置したい場合はmatrix()でbyrow引数を利用しなければならない．\n\narray(1:4, dim = c(2, 2))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmatrix(1:4, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nリスト 4-1-(3)\n\n# Python\ntype(a)\n\n\n# R\nclass(a)\n\n[1] \"matrix\" \"array\" \n\n\nデータ型を確認するにはclass()を用いたら良い．\n\n\nリスト 4-1-(4)\n\n# Python\nc = np.array([[1, 2], [3, 4]])\nprint(c)\n\n\n# R\nc &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\nprint(c)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nリスト 4-1-(5)\n\n# Python\nd = np.array([[1], [2]])\nprint(d)\n\n\n# R\nd &lt;- array(c(1, 2), dim = c(2, 1))\nprint(d)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n\n\nリスト 4-1-(6)\n\n# Python\nprint(d.T)\nprint(d.T.T)\n\n\n# R\nprint(t(d))\n\n     [,1] [,2]\n[1,]    1    2\n\nprint(t(t(d)))\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n転置にはt()を用いる．\n\n\nリスト 4-1-(7)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a + b)\n\n     [,1] [,2]\n[1,]    3    4\n\n\n\n\nリスト 4-1-(8)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a - b)\n\n     [,1] [,2]\n[1,]    1   -2\n\n\n\n\nリスト 4-1-(9)\n\n# Python\n## print(2 * a)\n\n\nprint(2 * a)\n\n     [,1] [,2]\n[1,]    4    2\n\n\n\n\nリスト 4-1-(10)\n\n# Python\nb = np.array([1, 3])\nc = np.array([4, 2])\nprint(b @ c)\n\n\n# R\nb &lt;- array(c(1, 3), dim = c(1, 2))\nc &lt;- array(c(4, 2), dim = c(2, 1))\nprint(b %*% c)\n\n     [,1]\n[1,]   10\n\n\n行列の積は%*%を用いる．\n行列計算\\(\\mathbb{b} \\cdot \\mathbb{c}\\)では，行列\\(\\mathbb{b}\\)の列数と行列\\(\\mathbb{c}\\)の行数が一致する必要がある．Pythonでは，g行列の行数(または列数)を指定していなくとも計算が可能であるが，Rではそうはいかない．そのため行列b, cの行数(または列数)を計算可能な数値に指定しなければならない．\n\n\nリスト 4-1-(11)\n\n# Python\na = np.array([1, 3])\nprint(np.linalg.norm(a))\n\n\n# R\na &lt;- array(c(1, 3), dim = c(1, 2))\nprint(norm(a, '2'))\n\n[1] 3.162278\n\n\nノルムはnorm()で計算可能である．\n\n\n\n第2節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n環境のリセットはrm(list = ls())でできる．今回はすべてをリセットするためにall.names引数にTRUEを指定している．\n\n\nリスト 4-2-(1)\n\n# Python\na = np.ones(1000)       # [1 1 1 ...     1]\nb = np.arange(1, 1001)  # [1 2 3 ...  1000]\nprint(a @ b)\n\n\n# R\na &lt;- array(rep(1, times = 1000), dim = c(1, 1000))\nb &lt;- array(seq(1:1000), dim = c(1000, 1))\nprint(a %*% b)\n\n       [,1]\n[1,] 500500\n\n\n\n\n\n第3節\n\nリスト 4-3-(1)\n関数を定義 ———-\n\n# Python\ndef f(w0, w1):                       # (A) fの定義\n  return w0 ** 2 + 2 * w0 * w1 + 3   # 式4-41\ndef df_dw0(w0, w1):                  # (B) fのw0に関する偏微分\n  return 2 * w0 + 2 * w1             # 式4-44\ndef df_dw1(w0, w1):                  # (C) fのw1に関する偏微分\n  return 2 * w0                      # 式4-46\n\n\n# R\nf &lt;- function(w0, w1) {            # (A) fの定義\n  return(w0 ^ 2 + 2 * w0 * w1 + 3) # 式4-41\n}\ndf_dw0 &lt;- function(w0, w1) {       # (B) fのw0に関する偏微分\n  return(2 * w0 + 2 * w1)          # 式4-44\n}\ndf_dw1 &lt;- function(w0, w1) {       # (C) fのw1に関する偏微分\n  return(2 * w0)                   # 式4-46\n}\n\n関数を定義するにはfunction(){}を用いる．return()で値を返すことができる．\n表示データの計算 ———-\n\n# Python\nw0_min, w0_max = -2, 2\nw1_min, w1_max = -2, 2\nw0_n, w1_n = 17, 17\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nww0, ww1 = np.meshgrid(w0, w1)          # (D) グリッド座標の作成\nf_num = f(ww0, ww1)                     # (E) fの値の計算\ndf_dw0_num = df_dw0(ww0, ww1)           #     fの偏微分の計算\ndf_dw1_num = df_dw1(ww0, ww1)           #     fの偏微分の計算\n\n\n# R\nw0_min &lt;- -2; w0_max &lt;- 2\nw1_min &lt;- -2; w1_max &lt;- 2\nw0_n &lt;- 17; w1_n &lt;- 17\nw0 &lt;- seq(from = w0_min, to = w0_max, length.out = w0_n)\nw1 &lt;- seq(from = w1_min, to = w1_max, length.out = w1_n)\ngrid_w0w1 &lt;- expand.grid(w0, w1)\nww0 &lt;- grid_w0w1$Var1 |&gt;\n  array(dim = c(w0_n, w1_n))\nww1 &lt;- grid_w0w1$Var2 |&gt;\n  array(dim = c(w0_n, w1_n))\nf_num &lt;- f(ww0, ww1)\ndf_dw0_num &lt;- df_dw0(ww0, ww1)\ndf_dw1_num &lt;-  df_dw1(ww0, ww1)\n\nRで，複数のコードを1行に書くには;で区切れば良い．Pythonのnp.linspace()に対応するRのコードはseq()で，from引数, to引数で指定された値の範囲から，length.out引数で指定された個数の値をベクトルとして出力する関数である．上のコードでは，-2から2までの値の中から17個の値を出力している．\nnp.meshgrid(w0, w1)は，2次元平面でのすべての座標を表している．例えば，ww0[1, 1], ww1[1, 1]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -2)\\)を，ww0[1, 2], ww1[1, 2]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -1.75)\\)を表している．ww0とww1の対応する要素が各座標を表しているのである．\n\nww0[1:4, 1:4]\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] -2.00 -2.00 -2.00 -2.00\n[2,] -1.75 -1.75 -1.75 -1.75\n[3,] -1.50 -1.50 -1.50 -1.50\n[4,] -1.25 -1.25 -1.25 -1.25\n\nww1[1:4, 1:4]\n\n     [,1]  [,2] [,3]  [,4]\n[1,]   -2 -1.75 -1.5 -1.25\n[2,]   -2 -1.75 -1.5 -1.25\n[3,]   -2 -1.75 -1.5 -1.25\n[4,]   -2 -1.75 -1.5 -1.25\n\n\nRで同じように格子状の座標を生成するにはexpand.grid()がある．与えられたベクトルのすべての組み合わせを生成し，それらを格納したデータフレームを返してくれる．\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nexpand.grid(x, y)\n\n  Var1 Var2\n1    1    4\n2    2    4\n3    3    4\n4    1    5\n5    2    5\n6    3    5\n7    1    6\n8    2    6\n9    3    6\n\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(9, 4))\nplt.subplots_adjust(wspace=0.3)\n\n\n# R\nNULL\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 1)\ncont = plt.contour(                     # (F) fの等高線表示\n  ww0, ww1, f_num, levels=10, colors=\"black\")\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\n\n\n# R\ndf &lt;- array(NA, dim = c(w0_n * w1_n, 5)) |&gt; # 空のデータフレームを用意．\n  data.frame() |&gt;\n  rename(ww0   = 'X1',                      # 変数名を変更．\n         ww1   = 'X2',\n         f_num = 'X3',\n         dw0   = 'X4',\n         dw1   = 'X5')\nn &lt;- 1                                      #  便宜上のインデックス．\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df[n, 1] &lt;- ww0[i, j]                   # ww0を順番に代入．\n    df[n, 2] &lt;- ww1[i, j]                   # ww1を順番に代入．\n    df[n, 3] &lt;- f_num[i, j]                 # ww0, ww1に対応するfを代入．\n    df[n, 4] &lt;- df_dw0_num[i, j]            # ww0, ww1に対応するdw0を代入．\n    df[n, 5] &lt;- df_dw1_num[i, j]            # ww0, ww1に対応するdw1を代入．\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot(aes(ww0, ww1, z = f_num)) +\n  geom_contour() +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n等高線表示にはggplot2::geom_contour()を用いる．引数にはx軸, y軸とそれらに対応するz軸の値が必要である．{ggplot2}を用いてのグラフ描画には，整然(tidy)なデータフレームが必要である(整然データについては宋・矢内『私たちのR』第17章を参照されたい)．そのため，少し強引に作成しなければならない．\n\nベクトル表示\n\n\n# Python\nplt.subplot(1, 2, 2)\nplt.quiver(                      # (G) fの勾配のベクトル表示\n  ww0, ww1, df_dw0_num, df_dw1_num)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.show()\n\n\n# R\ndf |&gt;\n  ggplot() +\n  geom_segment(aes(x = ww0, xend = ww0 + dw0 / 30,\n                   y = ww1, yend = ww1 + dw1 / 30),\n               linewidth = 0.3,\n               arrow = arrow(length = unit(0.1, 'cm'))) +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nベクトル表示にはggplot2::geom_segment()を用いる．引数にx軸, y軸の始まりであるx, yと，終わりであるxend, yendを指定する．そうすると始まりと終わりを繋ぐベクトルが表示される．xend, yendには，\\((\\mathrm{w}_0, \\mathrm{w}_1)\\)からそれぞれ軸に対して偏微分した値を足した数値を指定している．\n\n\n\n第4節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-4-(1)\n\n## import numpy as np\n\n\n# $\nNULL\n\n\n\nリスト 4-4-(2)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\nリスト 4-4-(3)\n\n# Python\nB = np.array([[7, 8, 9], [10, 11, 12]])\nprint(B)\n\n\n# R\nB &lt;- matrix(7:12, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(B)\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n\n\n\n\nリスト 4-4-(4)\n\n# Python\nprint(A + B)\nprint(A - B)\n\n\n# R\nprint(A + B)\n\n     [,1] [,2] [,3]\n[1,]    8   10   12\n[2,]   14   16   18\n\nprint(A - B)\n\n     [,1] [,2] [,3]\n[1,]   -6   -6   -6\n[2,]   -6   -6   -6\n\n\n\n\nリスト 4-4-(5)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(2 * A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(2 * A)\n\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n\n\n\n\nリスト 4-4-(6)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A @ B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(3, 1))\nprint(A %*% B)\n\n     [,1]\n[1,]   32\n\n\n行列計算の都合上，\\(\\mathbb{A}\\)は\\(1 \\times 3\\)行列，\\(\\mathbb{B}\\)は\\(3 \\times 1\\)行列としている．行列の内積は%*%で計算可能である．\n\n\nリスト 4-4-(7)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A * B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A * B)\n\n     [,1] [,2] [,3]\n[1,]    4   10   18\n\n\n各要素同士の積は*で計算できる．この場合，それぞれの行列の行数と列数は一致しなければならないことに注意する．\n\n\nリスト 4-4-(8)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A / B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A / B)\n\n     [,1] [,2] [,3]\n[1,] 0.25  0.4  0.5\n\n\n\n\nリスト 4-4-(9)\n\n# Python\nA = np.array([[1, 2, 3], [-1, -2, -3]])\nB = np.array([[4, -4], [5, -5], [6, -6]])\nprint(A @ B)\n\n\n# R\nA &lt;- matrix(c(1:3, -1:-3), nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nB &lt;- array(c(4:6, -4:-6), dim = c(3, 2))\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   32  -32\n[2,]  -32   32\n\n\n\n\nリスト 4-4-(10)\n\n# Python\nprint(np.identity(3))\n\n\n# R\nprint(diag(1, nrow = 3, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n単位行列はdiag()で作成できる．\n\n\nリスト 4-4-(11)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nI = np.identity(3)\nprint(A @ I)\n\n\n# R\nA &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nI &lt;- diag(1, nrow = 3, ncol = 3)\nprint(A %*% I)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\nリスト 4-4-(12)\n\n# Python\nA = np.array([[1, 2], [3, 4]])\ninvA = np.linalg.inv(A)\nprint(invA)\n\n\n# R\nA &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\ninvA &lt;- solve(A)\nprint(invA)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\n逆行列はsolve()を用いる．\n\n\nリスト 4-4-(13)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\nprint(A.T)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n転置にはt()を用いる．\n\n\n\n第5節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-5-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = 2 ** x\ny2 = 3 ** x\ny3 = 0.5 ** x\n\n\n# R\n\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- 2 ^ x\ny2 &lt;- 3 ^ x\ny3 &lt;- 0.5 ^ x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3, label=\"$y=2^x$\")\nplt.plot(x, y2, \"cornflowerblue\", linewidth=3, label=\"$y=3^x$\")\nplt.plot(x, y3, \"gray\", linewidth=3, label=\"$y=0.5^x$\")\nplt.legend(loc=\"lower right\")\nplt.xlim(-4, 4)\nplt.ylim(-2, 6)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(x, x, x),\n       y_plt = c(y, y2, y3),\n       col   = rep(c('1', '2', '3'), each = length(x))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt, color = col)) +\n  geom_line() +\n  xlim(-4, 4) + ylim(-2, 6) +\n  coord_fixed(ratio = 8 / 8) +\n  scale_color_manual(values = c('black', 'cornflowerblue', 'gray'),\n                     name   = element_blank(),\n                     labels = c(expression(y == 2 ^ x),\n                                expression(y == 3 ^ x),\n                                expression(y == 0.5 ^ x))) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(2)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-8, 8, 100)\ny = 2 ** x\n# np.log(0) はエラーになるので 0 は含めない\nx2 = np.linspace(0.001, 8, 100)\n# 底を 2 とした log を公式 (7) で計算\ny2 = np.log(x2) / np.log(2)\n\n\n# R\n\nx &lt;- seq(from = -8, to = 8, length.out = 100)\ny &lt;- 2 ^ x\nx2 &lt;- seq(from = 0.001, to = 8, length.out = 100)\ny2 &lt;- log(x2) / log(2)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x2, y2, \"cornflowerblue\", linewidth=3)\nplt.plot(x, x, \"black\", linestyle=\"--\", linewidth=1)\nplt.xlim(-8, 8)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),   # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x2, y_plt = y2), # 対数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  geom_line(data     = tibble(x_plt = x, y_plt = x),  # y = x\n            mapping  = aes(x = x_plt, y = y_plt),\n            linetype = 'dashed') +\n  xlim(-8, 8) + ylim(-8, 8) +\n  coord_fixed(ratio = 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(3)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = (x - 1) ** 2 + 2\nlogy = np.log(y)\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- (x - 1) ^ 2 + 2\nlogy &lt;- log(y)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x, logy, \"cornflowerblue\", linewidth=3)\nplt.xticks(range(-4, 5, 1))\nplt.yticks(range(-4, 9, 1))\nplt.xlim(-4, 4)\nplt.ylim(-4, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),    # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x, y_plt = logy), # 対数化\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  xlim(-4, 4) + ylim(-4, 8) +\n  coord_fixed(ratio = 8 / 12) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(4)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\na = 2\ny = a ** x\ndy = np.log(a) * y\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\na &lt;- 2\ny &lt;- a ^ x\ndy &lt;- log(a) * y\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-1, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-4, 4) + ylim(-1, 8) +\n  coord_fixed(ratio = 8 / 9) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(5)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(0.0001, 4, 100)  # 0 以下では定義できない\ny = np.log(x)\ndy = 1 / x\n\n\n# R\nx &lt;- seq(from = 0.0001, to = 4, length.out = 100)\ny &lt;- log(x)\ndy &lt;- 1 / x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-1, 4)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-1, 4) + ylim(-8, 8) +\n  coord_fixed(ratio = 5 / 16) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\nリスト 4-5-(6)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))  # 式4-114\n\n\n# R\nx &lt;- seq(from = -10, to = 10, length.out = 100)\ny &lt;- 1 / (1 + exp(-x))\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.xlim(-10, 10)\nplt.ylim(-1, 2)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-10, 10) + ylim(-1, 2) +\n  coord_fixed(ratio = 20 / 3) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(7)\nソフトマックス関数 ———-\n\n# Python\ndef softmax(x0, x1, x2):\n  u = np.exp(x0) + np.exp(x1) + np.exp(x2)  # 式4-119\n  y0 = np.exp(x0) / u                       # 式4-120\n  y1 = np.exp(x1) / u\n  y2 = np.exp(x2) / u\n  return y0, y1, y2\n\n\n# R\nsoftmax &lt;- function(x0, x1, x2) {\n  u &lt;- exp(x0) + exp(x1) + exp(x2)\n  y0 &lt;- exp(x0) / u\n  y1 &lt;- exp(x1) / u\n  y2 &lt;- exp(x2) / u\n  return(c(y0, y1, y2))\n}\n\nテスト ———-\n\n# Python\ny = softmax(2, 1, -1)\nprint(np.round(y, 4))  # 小数点以下4桁の概数を表示\nprint(np.sum(y))       # 和を表示\n\n\n# R\ny &lt;- softmax(2, 1, -1)\nprint(round(y, 4))\n\n[1] 0.7054 0.2595 0.0351\n\nprint(sum(y))\n\n[1] 1\n\n\n\n\nリスト 4-5-(8)\n表示データの計算 ———-\n\n# Python\nx0_n, x1_n = 20, 20             # サーフェス表示の解像度\nx0 = np.linspace(-4, 4, x0_n)\nx1 = np.linspace(-4, 4, x1_n)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\ny = softmax(xx0, xx1, 1)        # ソフトマックス関数の値を計算\n\n\n# R\nx0_n &lt;- 20; x1_n &lt;- 20\nx0 &lt;- seq(from = -4, to = 4, length.out = x0_n)\nx1 &lt;- seq(from = -4, to = 4, length.out = x1_n)\ngrid_x0x1 &lt;- expand.grid(x0, x1)\nxx0 &lt;- grid_x0x1$Var1 |&gt;\n  array(dim = c(x0_n, x1_n))\nxx1 &lt;- grid_x0x1$Var2 |&gt;\n  array(dim = c(x0_n, x1_n))\ny_vec &lt;- softmax(xx0, xx1, 1)\ny &lt;- array(y_vec, dim = c(x0_n * x1_n, 3))\n\nPythonでは，yは行数x0_n, 列数x1_nの行列となるが，Rではそうはならない．各値の計算結果がベクトルとなって出力されてしまう．\n\nhead(y_vec, 5)\n\n[1] 0.006648354 0.010094061 0.015298104 0.023122447 0.034807159\n\n\nこのベクトルは，(y0[1], y0[2], y0[3], ..., y0[400], y1[1], y1[2], ...)のような並びとなっているので，\\(400 \\times 3\\)の行列に変換しなければならない．1列目に400個のy0，2列目に400個のy1，3列目に400個のy2のような行列としている．\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(8, 3))\nfor i in range(2):\n  ax = plt.subplot(1, 2, i + 1, projection=\"3d\")\n  ax.plot_surface(\n    xx0, xx1, y[i],\n    rstride=1, cstride=1, alpha=0.3,\n    color=\"blue\", edgecolor=\"black\",\n  )\n  ax.set_xlabel(\"$x_0$\", fontsize=14)\n  ax.set_ylabel(\"$x_1$\", fontsize=14)\n  ax.view_init(40, -125)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1,\n      z = y[,1] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\npersp(x = x0, y = x1,\n      z = y[,2] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\n\n3Dプロットにはpersp()関数を用いた．x, y引数にはx0, x1を，z引数には2つの値に対応した行列を指定しなければ描画されない点に注意．"
  },
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "内容",
    "section": "",
    "text": "まず，パッケージを読み込む．\n\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\n\n# Python\nimport numpy as np\n\n\n# R\nNULL\n\nNumpyのインポートに対応するRのコードはない．{tidyverse}をインストールすれば良い．\n\n\n\n\n# Python\na = np.array([2, 1])\nprint(a)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nprint(a)\n\n     [,1] [,2]\n[1,]    2    1\n\n\nnp.array()に対応するRのコードにはarray()がある．array(要素, dim = c(行数, 列数))のように指定すると配列が作成される．ちなみに，array()では要素が列に沿って配置されるため，行に沿って配置したい場合はmatrix()でbyrow引数を利用しなければならない．\n\narray(1:4, dim = c(2, 2))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmatrix(1:4, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\n\n\n# Python\ntype(a)\n\n\n# R\nclass(a)\n\n[1] \"matrix\" \"array\" \n\n\nデータ型を確認するにはclass()を用いたら良い．\n\n\n\n\n# Python\nc = np.array([[1, 2], [3, 4]])\nprint(c)\n\n\n# R\nc &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\nprint(c)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\n\n\n# Python\nd = np.array([[1], [2]])\nprint(d)\n\n\n# R\nd &lt;- array(c(1, 2), dim = c(2, 1))\nprint(d)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n\n\n\n\n# Python\nprint(d.T)\nprint(d.T.T)\n\n\n# R\nprint(t(d))\n\n     [,1] [,2]\n[1,]    1    2\n\nprint(t(t(d)))\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n転置にはt()を用いる．\n\n\n\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a + b)\n\n     [,1] [,2]\n[1,]    3    4\n\n\n\n\n\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a - b)\n\n     [,1] [,2]\n[1,]    1   -2\n\n\n\n\n\n\n# Python\n## print(2 * a)\n\n\nprint(2 * a)\n\n     [,1] [,2]\n[1,]    4    2\n\n\n\n\n\n\n# Python\nb = np.array([1, 3])\nc = np.array([4, 2])\nprint(b @ c)\n\n\n# R\nb &lt;- array(c(1, 3), dim = c(1, 2))\nc &lt;- array(c(4, 2), dim = c(2, 1))\nprint(b %*% c)\n\n     [,1]\n[1,]   10\n\n\n行列の積は%*%を用いる．\n行列計算\\(\\mathbb{b} \\cdot \\mathbb{c}\\)では，行列\\(\\mathbb{b}\\)の列数と行列\\(\\mathbb{c}\\)の行数が一致する必要がある．Pythonでは，g行列の行数(または列数)を指定していなくとも計算が可能であるが，Rではそうはいかない．そのため行列b, cの行数(または列数)を計算可能な数値に指定しなければならない．\n\n\n\n\n# Python\na = np.array([1, 3])\nprint(np.linalg.norm(a))\n\n\n# R\na &lt;- array(c(1, 3), dim = c(1, 2))\nprint(norm(a, '2'))\n\n[1] 3.162278\n\n\nノルムはnorm()で計算可能である．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n環境のリセットはrm(list = ls())でできる．今回はすべてをリセットするためにall.names引数にTRUEを指定している．\n\n\n\n\n# Python\na = np.ones(1000)       # [1 1 1 ...     1]\nb = np.arange(1, 1001)  # [1 2 3 ...  1000]\nprint(a @ b)\n\n\n# R\na &lt;- array(rep(1, times = 1000), dim = c(1, 1000))\nb &lt;- array(seq(1:1000), dim = c(1000, 1))\nprint(a %*% b)\n\n       [,1]\n[1,] 500500\n\n\n\n\n\n\n\n\n関数を定義 ———-\n\n# Python\ndef f(w0, w1):                       # (A) fの定義\n  return w0 ** 2 + 2 * w0 * w1 + 3   # 式4-41\ndef df_dw0(w0, w1):                  # (B) fのw0に関する偏微分\n  return 2 * w0 + 2 * w1             # 式4-44\ndef df_dw1(w0, w1):                  # (C) fのw1に関する偏微分\n  return 2 * w0                      # 式4-46\n\n\n# R\nf &lt;- function(w0, w1) {            # (A) fの定義\n  return(w0 ^ 2 + 2 * w0 * w1 + 3) # 式4-41\n}\ndf_dw0 &lt;- function(w0, w1) {       # (B) fのw0に関する偏微分\n  return(2 * w0 + 2 * w1)          # 式4-44\n}\ndf_dw1 &lt;- function(w0, w1) {       # (C) fのw1に関する偏微分\n  return(2 * w0)                   # 式4-46\n}\n\n関数を定義するにはfunction(){}を用いる．return()で値を返すことができる．\n表示データの計算 ———-\n\n# Python\nw0_min, w0_max = -2, 2\nw1_min, w1_max = -2, 2\nw0_n, w1_n = 17, 17\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nww0, ww1 = np.meshgrid(w0, w1)          # (D) グリッド座標の作成\nf_num = f(ww0, ww1)                     # (E) fの値の計算\ndf_dw0_num = df_dw0(ww0, ww1)           #     fの偏微分の計算\ndf_dw1_num = df_dw1(ww0, ww1)           #     fの偏微分の計算\n\n\n# R\nw0_min &lt;- -2; w0_max &lt;- 2\nw1_min &lt;- -2; w1_max &lt;- 2\nw0_n &lt;- 17; w1_n &lt;- 17\nw0 &lt;- seq(from = w0_min, to = w0_max, length.out = w0_n)\nw1 &lt;- seq(from = w1_min, to = w1_max, length.out = w1_n)\ngrid_w0w1 &lt;- expand.grid(w0, w1)\nww0 &lt;- grid_w0w1$Var1 |&gt;\n  array(dim = c(w0_n, w1_n))\nww1 &lt;- grid_w0w1$Var2 |&gt;\n  array(dim = c(w0_n, w1_n))\nf_num &lt;- f(ww0, ww1)\ndf_dw0_num &lt;- df_dw0(ww0, ww1)\ndf_dw1_num &lt;-  df_dw1(ww0, ww1)\n\nRで，複数のコードを1行に書くには;で区切れば良い．Pythonのnp.linspace()に対応するRのコードはseq()で，from引数, to引数で指定された値の範囲から，length.out引数で指定された個数の値をベクトルとして出力する関数である．上のコードでは，-2から2までの値の中から17個の値を出力している．\nnp.meshgrid(w0, w1)は，2次元平面でのすべての座標を表している．例えば，ww0[1, 1], ww1[1, 1]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -2)\\)を，ww0[1, 2], ww1[1, 2]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -1.75)\\)を表している．ww0とww1の対応する要素が各座標を表しているのである．\n\nww0[1:4, 1:4]\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] -2.00 -2.00 -2.00 -2.00\n[2,] -1.75 -1.75 -1.75 -1.75\n[3,] -1.50 -1.50 -1.50 -1.50\n[4,] -1.25 -1.25 -1.25 -1.25\n\nww1[1:4, 1:4]\n\n     [,1]  [,2] [,3]  [,4]\n[1,]   -2 -1.75 -1.5 -1.25\n[2,]   -2 -1.75 -1.5 -1.25\n[3,]   -2 -1.75 -1.5 -1.25\n[4,]   -2 -1.75 -1.5 -1.25\n\n\nRで同じように格子状の座標を生成するにはexpand.grid()がある．与えられたベクトルのすべての組み合わせを生成し，それらを格納したデータフレームを返してくれる．\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nexpand.grid(x, y)\n\n  Var1 Var2\n1    1    4\n2    2    4\n3    3    4\n4    1    5\n5    2    5\n6    3    5\n7    1    6\n8    2    6\n9    3    6\n\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(9, 4))\nplt.subplots_adjust(wspace=0.3)\n\n\n# R\nNULL\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 1)\ncont = plt.contour(                     # (F) fの等高線表示\n  ww0, ww1, f_num, levels=10, colors=\"black\")\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\n\n\n# R\ndf &lt;- array(NA, dim = c(w0_n * w1_n, 5)) |&gt; # 空のデータフレームを用意．\n  data.frame() |&gt;\n  rename(ww0   = 'X1',                      # 変数名を変更．\n         ww1   = 'X2',\n         f_num = 'X3',\n         dw0   = 'X4',\n         dw1   = 'X5')\nn &lt;- 1                                      #  便宜上のインデックス．\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df[n, 1] &lt;- ww0[i, j]                   # ww0を順番に代入．\n    df[n, 2] &lt;- ww1[i, j]                   # ww1を順番に代入．\n    df[n, 3] &lt;- f_num[i, j]                 # ww0, ww1に対応するfを代入．\n    df[n, 4] &lt;- df_dw0_num[i, j]            # ww0, ww1に対応するdw0を代入．\n    df[n, 5] &lt;- df_dw1_num[i, j]            # ww0, ww1に対応するdw1を代入．\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot(aes(ww0, ww1, z = f_num)) +\n  geom_contour() +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n等高線表示にはggplot2::geom_contour()を用いる．引数にはx軸, y軸とそれらに対応するz軸の値が必要である．{ggplot2}を用いてのグラフ描画には，整然(tidy)なデータフレームが必要である(整然データについては宋・矢内『私たちのR』第17章を参照されたい)．そのため，少し強引に作成しなければならない．\n\nベクトル表示\n\n\n# Python\nplt.subplot(1, 2, 2)\nplt.quiver(                      # (G) fの勾配のベクトル表示\n  ww0, ww1, df_dw0_num, df_dw1_num)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.show()\n\n\n# R\ndf |&gt;\n  ggplot() +\n  geom_segment(aes(x = ww0, xend = ww0 + dw0 / 30,\n                   y = ww1, yend = ww1 + dw1 / 30),\n               linewidth = 0.3,\n               arrow = arrow(length = unit(0.1, 'cm'))) +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nベクトル表示にはggplot2::geom_segment()を用いる．引数にx軸, y軸の始まりであるx, yと，終わりであるxend, yendを指定する．そうすると始まりと終わりを繋ぐベクトルが表示される．xend, yendには，\\((\\mathrm{w}_0, \\mathrm{w}_1)\\)からそれぞれ軸に対して偏微分した値を足した数値を指定している．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\n\n\n## import numpy as np\n\n\n# $\nNULL\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\n\n\n# Python\nB = np.array([[7, 8, 9], [10, 11, 12]])\nprint(B)\n\n\n# R\nB &lt;- matrix(7:12, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(B)\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n\n\n\n\n\n\n# Python\nprint(A + B)\nprint(A - B)\n\n\n# R\nprint(A + B)\n\n     [,1] [,2] [,3]\n[1,]    8   10   12\n[2,]   14   16   18\n\nprint(A - B)\n\n     [,1] [,2] [,3]\n[1,]   -6   -6   -6\n[2,]   -6   -6   -6\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(2 * A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(2 * A)\n\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n\n\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A @ B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(3, 1))\nprint(A %*% B)\n\n     [,1]\n[1,]   32\n\n\n行列計算の都合上，\\(\\mathbb{A}\\)は\\(1 \\times 3\\)行列，\\(\\mathbb{B}\\)は\\(3 \\times 1\\)行列としている．行列の内積は%*%で計算可能である．\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A * B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A * B)\n\n     [,1] [,2] [,3]\n[1,]    4   10   18\n\n\n各要素同士の積は*で計算できる．この場合，それぞれの行列の行数と列数は一致しなければならないことに注意する．\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A / B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A / B)\n\n     [,1] [,2] [,3]\n[1,] 0.25  0.4  0.5\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [-1, -2, -3]])\nB = np.array([[4, -4], [5, -5], [6, -6]])\nprint(A @ B)\n\n\n# R\nA &lt;- matrix(c(1:3, -1:-3), nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nB &lt;- array(c(4:6, -4:-6), dim = c(3, 2))\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   32  -32\n[2,]  -32   32\n\n\n\n\n\n\n# Python\nprint(np.identity(3))\n\n\n# R\nprint(diag(1, nrow = 3, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n単位行列はdiag()で作成できる．\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nI = np.identity(3)\nprint(A @ I)\n\n\n# R\nA &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nI &lt;- diag(1, nrow = 3, ncol = 3)\nprint(A %*% I)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2], [3, 4]])\ninvA = np.linalg.inv(A)\nprint(invA)\n\n\n# R\nA &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\ninvA &lt;- solve(A)\nprint(invA)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\n逆行列はsolve()を用いる．\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\nprint(A.T)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n転置にはt()を用いる．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\n\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = 2 ** x\ny2 = 3 ** x\ny3 = 0.5 ** x\n\n\n# R\n\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- 2 ^ x\ny2 &lt;- 3 ^ x\ny3 &lt;- 0.5 ^ x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3, label=\"$y=2^x$\")\nplt.plot(x, y2, \"cornflowerblue\", linewidth=3, label=\"$y=3^x$\")\nplt.plot(x, y3, \"gray\", linewidth=3, label=\"$y=0.5^x$\")\nplt.legend(loc=\"lower right\")\nplt.xlim(-4, 4)\nplt.ylim(-2, 6)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(x, x, x),\n       y_plt = c(y, y2, y3),\n       col   = rep(c('1', '2', '3'), each = length(x))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt, color = col)) +\n  geom_line() +\n  xlim(-4, 4) + ylim(-2, 6) +\n  coord_fixed(ratio = 8 / 8) +\n  scale_color_manual(values = c('black', 'cornflowerblue', 'gray'),\n                     name   = element_blank(),\n                     labels = c(expression(y == 2 ^ x),\n                                expression(y == 3 ^ x),\n                                expression(y == 0.5 ^ x))) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-8, 8, 100)\ny = 2 ** x\n# np.log(0) はエラーになるので 0 は含めない\nx2 = np.linspace(0.001, 8, 100)\n# 底を 2 とした log を公式 (7) で計算\ny2 = np.log(x2) / np.log(2)\n\n\n# R\n\nx &lt;- seq(from = -8, to = 8, length.out = 100)\ny &lt;- 2 ^ x\nx2 &lt;- seq(from = 0.001, to = 8, length.out = 100)\ny2 &lt;- log(x2) / log(2)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x2, y2, \"cornflowerblue\", linewidth=3)\nplt.plot(x, x, \"black\", linestyle=\"--\", linewidth=1)\nplt.xlim(-8, 8)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),   # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x2, y_plt = y2), # 対数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  geom_line(data     = tibble(x_plt = x, y_plt = x),  # y = x\n            mapping  = aes(x = x_plt, y = y_plt),\n            linetype = 'dashed') +\n  xlim(-8, 8) + ylim(-8, 8) +\n  coord_fixed(ratio = 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = (x - 1) ** 2 + 2\nlogy = np.log(y)\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- (x - 1) ^ 2 + 2\nlogy &lt;- log(y)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x, logy, \"cornflowerblue\", linewidth=3)\nplt.xticks(range(-4, 5, 1))\nplt.yticks(range(-4, 9, 1))\nplt.xlim(-4, 4)\nplt.ylim(-4, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),    # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x, y_plt = logy), # 対数化\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  xlim(-4, 4) + ylim(-4, 8) +\n  coord_fixed(ratio = 8 / 12) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\na = 2\ny = a ** x\ndy = np.log(a) * y\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\na &lt;- 2\ny &lt;- a ^ x\ndy &lt;- log(a) * y\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-1, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-4, 4) + ylim(-1, 8) +\n  coord_fixed(ratio = 8 / 9) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(0.0001, 4, 100)  # 0 以下では定義できない\ny = np.log(x)\ndy = 1 / x\n\n\n# R\nx &lt;- seq(from = 0.0001, to = 4, length.out = 100)\ny &lt;- log(x)\ndy &lt;- 1 / x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-1, 4)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-1, 4) + ylim(-8, 8) +\n  coord_fixed(ratio = 5 / 16) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))  # 式4-114\n\n\n# R\nx &lt;- seq(from = -10, to = 10, length.out = 100)\ny &lt;- 1 / (1 + exp(-x))\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.xlim(-10, 10)\nplt.ylim(-1, 2)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-10, 10) + ylim(-1, 2) +\n  coord_fixed(ratio = 20 / 3) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\nソフトマックス関数 ———-\n\n# Python\ndef softmax(x0, x1, x2):\n  u = np.exp(x0) + np.exp(x1) + np.exp(x2)  # 式4-119\n  y0 = np.exp(x0) / u                       # 式4-120\n  y1 = np.exp(x1) / u\n  y2 = np.exp(x2) / u\n  return y0, y1, y2\n\n\n# R\nsoftmax &lt;- function(x0, x1, x2) {\n  u &lt;- exp(x0) + exp(x1) + exp(x2)\n  y0 &lt;- exp(x0) / u\n  y1 &lt;- exp(x1) / u\n  y2 &lt;- exp(x2) / u\n  return(c(y0, y1, y2))\n}\n\nテスト ———-\n\n# Python\ny = softmax(2, 1, -1)\nprint(np.round(y, 4))  # 小数点以下4桁の概数を表示\nprint(np.sum(y))       # 和を表示\n\n\n# R\ny &lt;- softmax(2, 1, -1)\nprint(round(y, 4))\n\n[1] 0.7054 0.2595 0.0351\n\nprint(sum(y))\n\n[1] 1\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx0_n, x1_n = 20, 20             # サーフェス表示の解像度\nx0 = np.linspace(-4, 4, x0_n)\nx1 = np.linspace(-4, 4, x1_n)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\ny = softmax(xx0, xx1, 1)        # ソフトマックス関数の値を計算\n\n\n# R\nx0_n &lt;- 20; x1_n &lt;- 20\nx0 &lt;- seq(from = -4, to = 4, length.out = x0_n)\nx1 &lt;- seq(from = -4, to = 4, length.out = x1_n)\ngrid_x0x1 &lt;- expand.grid(x0, x1)\nxx0 &lt;- grid_x0x1$Var1 |&gt;\n  array(dim = c(x0_n, x1_n))\nxx1 &lt;- grid_x0x1$Var2 |&gt;\n  array(dim = c(x0_n, x1_n))\ny_vec &lt;- softmax(xx0, xx1, 1)\ny &lt;- array(y_vec, dim = c(x0_n * x1_n, 3))\n\nPythonでは，yは行数x0_n, 列数x1_nの行列となるが，Rではそうはならない．各値の計算結果がベクトルとなって出力されてしまう．\n\nhead(y_vec, 5)\n\n[1] 0.006648354 0.010094061 0.015298104 0.023122447 0.034807159\n\n\nこのベクトルは，(y0[1], y0[2], y0[3], ..., y0[400], y1[1], y1[2], ...)のような並びとなっているので，\\(400 \\times 3\\)の行列に変換しなければならない．1列目に400個のy0，2列目に400個のy1，3列目に400個のy2のような行列としている．\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(8, 3))\nfor i in range(2):\n  ax = plt.subplot(1, 2, i + 1, projection=\"3d\")\n  ax.plot_surface(\n    xx0, xx1, y[i],\n    rstride=1, cstride=1, alpha=0.3,\n    color=\"blue\", edgecolor=\"black\",\n  )\n  ax.set_xlabel(\"$x_0$\", fontsize=14)\n  ax.set_ylabel(\"$x_1$\", fontsize=14)\n  ax.view_init(40, -125)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1,\n      z = y[,1] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\npersp(x = x0, y = x1,\n      z = y[,2] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\n\n3Dプロットにはpersp()関数を用いた．x, y引数にはx0, x1を，z引数には2つの値に対応した行列を指定しなければ描画されない点に注意．"
  },
  {
    "objectID": "contents.html#準備",
    "href": "contents.html#準備",
    "title": "内容",
    "section": "",
    "text": "まず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "contents.html#第4章",
    "href": "contents.html#第4章",
    "title": "内容",
    "section": "",
    "text": "# Python\nimport numpy as np\n\n\n# R\nNULL\n\nNumpyのインポートに対応するRのコードはない．{tidyverse}をインストールすれば良い．\n\n\n\n\n# Python\na = np.array([2, 1])\nprint(a)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nprint(a)\n\n     [,1] [,2]\n[1,]    2    1\n\n\nnp.array()に対応するRのコードにはarray()がある．array(要素, dim = c(行数, 列数))のように指定すると配列が作成される．ちなみに，array()では要素が列に沿って配置されるため，行に沿って配置したい場合はmatrix()でbyrow引数を利用しなければならない．\n\narray(1:4, dim = c(2, 2))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmatrix(1:4, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\n\n\n# Python\ntype(a)\n\n\n# R\nclass(a)\n\n[1] \"matrix\" \"array\" \n\n\nデータ型を確認するにはclass()を用いたら良い．\n\n\n\n\n# Python\nc = np.array([[1, 2], [3, 4]])\nprint(c)\n\n\n# R\nc &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\nprint(c)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\n\n\n# Python\nd = np.array([[1], [2]])\nprint(d)\n\n\n# R\nd &lt;- array(c(1, 2), dim = c(2, 1))\nprint(d)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n\n\n\n\n# Python\nprint(d.T)\nprint(d.T.T)\n\n\n# R\nprint(t(d))\n\n     [,1] [,2]\n[1,]    1    2\n\nprint(t(t(d)))\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n転置にはt()を用いる．\n\n\n\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a + b)\n\n     [,1] [,2]\n[1,]    3    4\n\n\n\n\n\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a - b)\n\n     [,1] [,2]\n[1,]    1   -2\n\n\n\n\n\n\n# Python\n## print(2 * a)\n\n\nprint(2 * a)\n\n     [,1] [,2]\n[1,]    4    2\n\n\n\n\n\n\n# Python\nb = np.array([1, 3])\nc = np.array([4, 2])\nprint(b @ c)\n\n\n# R\nb &lt;- array(c(1, 3), dim = c(1, 2))\nc &lt;- array(c(4, 2), dim = c(2, 1))\nprint(b %*% c)\n\n     [,1]\n[1,]   10\n\n\n行列の積は%*%を用いる．\n行列計算\\(\\mathbb{b} \\cdot \\mathbb{c}\\)では，行列\\(\\mathbb{b}\\)の列数と行列\\(\\mathbb{c}\\)の行数が一致する必要がある．Pythonでは，g行列の行数(または列数)を指定していなくとも計算が可能であるが，Rではそうはいかない．そのため行列b, cの行数(または列数)を計算可能な数値に指定しなければならない．\n\n\n\n\n# Python\na = np.array([1, 3])\nprint(np.linalg.norm(a))\n\n\n# R\na &lt;- array(c(1, 3), dim = c(1, 2))\nprint(norm(a, '2'))\n\n[1] 3.162278\n\n\nノルムはnorm()で計算可能である．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n環境のリセットはrm(list = ls())でできる．今回はすべてをリセットするためにall.names引数にTRUEを指定している．\n\n\n\n\n# Python\na = np.ones(1000)       # [1 1 1 ...     1]\nb = np.arange(1, 1001)  # [1 2 3 ...  1000]\nprint(a @ b)\n\n\n# R\na &lt;- array(rep(1, times = 1000), dim = c(1, 1000))\nb &lt;- array(seq(1:1000), dim = c(1000, 1))\nprint(a %*% b)\n\n       [,1]\n[1,] 500500\n\n\n\n\n\n\n\n\n関数を定義 ———-\n\n# Python\ndef f(w0, w1):                       # (A) fの定義\n  return w0 ** 2 + 2 * w0 * w1 + 3   # 式4-41\ndef df_dw0(w0, w1):                  # (B) fのw0に関する偏微分\n  return 2 * w0 + 2 * w1             # 式4-44\ndef df_dw1(w0, w1):                  # (C) fのw1に関する偏微分\n  return 2 * w0                      # 式4-46\n\n\n# R\nf &lt;- function(w0, w1) {            # (A) fの定義\n  return(w0 ^ 2 + 2 * w0 * w1 + 3) # 式4-41\n}\ndf_dw0 &lt;- function(w0, w1) {       # (B) fのw0に関する偏微分\n  return(2 * w0 + 2 * w1)          # 式4-44\n}\ndf_dw1 &lt;- function(w0, w1) {       # (C) fのw1に関する偏微分\n  return(2 * w0)                   # 式4-46\n}\n\n関数を定義するにはfunction(){}を用いる．return()で値を返すことができる．\n表示データの計算 ———-\n\n# Python\nw0_min, w0_max = -2, 2\nw1_min, w1_max = -2, 2\nw0_n, w1_n = 17, 17\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nww0, ww1 = np.meshgrid(w0, w1)          # (D) グリッド座標の作成\nf_num = f(ww0, ww1)                     # (E) fの値の計算\ndf_dw0_num = df_dw0(ww0, ww1)           #     fの偏微分の計算\ndf_dw1_num = df_dw1(ww0, ww1)           #     fの偏微分の計算\n\n\n# R\nw0_min &lt;- -2; w0_max &lt;- 2\nw1_min &lt;- -2; w1_max &lt;- 2\nw0_n &lt;- 17; w1_n &lt;- 17\nw0 &lt;- seq(from = w0_min, to = w0_max, length.out = w0_n)\nw1 &lt;- seq(from = w1_min, to = w1_max, length.out = w1_n)\ngrid_w0w1 &lt;- expand.grid(w0, w1)\nww0 &lt;- grid_w0w1$Var1 |&gt;\n  array(dim = c(w0_n, w1_n))\nww1 &lt;- grid_w0w1$Var2 |&gt;\n  array(dim = c(w0_n, w1_n))\nf_num &lt;- f(ww0, ww1)\ndf_dw0_num &lt;- df_dw0(ww0, ww1)\ndf_dw1_num &lt;-  df_dw1(ww0, ww1)\n\nRで，複数のコードを1行に書くには;で区切れば良い．Pythonのnp.linspace()に対応するRのコードはseq()で，from引数, to引数で指定された値の範囲から，length.out引数で指定された個数の値をベクトルとして出力する関数である．上のコードでは，-2から2までの値の中から17個の値を出力している．\nnp.meshgrid(w0, w1)は，2次元平面でのすべての座標を表している．例えば，ww0[1, 1], ww1[1, 1]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -2)\\)を，ww0[1, 2], ww1[1, 2]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -1.75)\\)を表している．ww0とww1の対応する要素が各座標を表しているのである．\n\nww0[1:4, 1:4]\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] -2.00 -2.00 -2.00 -2.00\n[2,] -1.75 -1.75 -1.75 -1.75\n[3,] -1.50 -1.50 -1.50 -1.50\n[4,] -1.25 -1.25 -1.25 -1.25\n\nww1[1:4, 1:4]\n\n     [,1]  [,2] [,3]  [,4]\n[1,]   -2 -1.75 -1.5 -1.25\n[2,]   -2 -1.75 -1.5 -1.25\n[3,]   -2 -1.75 -1.5 -1.25\n[4,]   -2 -1.75 -1.5 -1.25\n\n\nRで同じように格子状の座標を生成するにはexpand.grid()がある．与えられたベクトルのすべての組み合わせを生成し，それらを格納したデータフレームを返してくれる．\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nexpand.grid(x, y)\n\n  Var1 Var2\n1    1    4\n2    2    4\n3    3    4\n4    1    5\n5    2    5\n6    3    5\n7    1    6\n8    2    6\n9    3    6\n\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(9, 4))\nplt.subplots_adjust(wspace=0.3)\n\n\n# R\nNULL\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 1)\ncont = plt.contour(                     # (F) fの等高線表示\n  ww0, ww1, f_num, levels=10, colors=\"black\")\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\n\n\n# R\ndf &lt;- array(NA, dim = c(w0_n * w1_n, 5)) |&gt; # 空のデータフレームを用意．\n  data.frame() |&gt;\n  rename(ww0   = 'X1',                      # 変数名を変更．\n         ww1   = 'X2',\n         f_num = 'X3',\n         dw0   = 'X4',\n         dw1   = 'X5')\nn &lt;- 1                                      #  便宜上のインデックス．\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df[n, 1] &lt;- ww0[i, j]                   # ww0を順番に代入．\n    df[n, 2] &lt;- ww1[i, j]                   # ww1を順番に代入．\n    df[n, 3] &lt;- f_num[i, j]                 # ww0, ww1に対応するfを代入．\n    df[n, 4] &lt;- df_dw0_num[i, j]            # ww0, ww1に対応するdw0を代入．\n    df[n, 5] &lt;- df_dw1_num[i, j]            # ww0, ww1に対応するdw1を代入．\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot(aes(ww0, ww1, z = f_num)) +\n  geom_contour() +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n等高線表示にはggplot2::geom_contour()を用いる．引数にはx軸, y軸とそれらに対応するz軸の値が必要である．{ggplot2}を用いてのグラフ描画には，整然(tidy)なデータフレームが必要である(整然データについては宋・矢内『私たちのR』第17章を参照されたい)．そのため，少し強引に作成しなければならない．\n\nベクトル表示\n\n\n# Python\nplt.subplot(1, 2, 2)\nplt.quiver(                      # (G) fの勾配のベクトル表示\n  ww0, ww1, df_dw0_num, df_dw1_num)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.show()\n\n\n# R\ndf |&gt;\n  ggplot() +\n  geom_segment(aes(x = ww0, xend = ww0 + dw0 / 30,\n                   y = ww1, yend = ww1 + dw1 / 30),\n               linewidth = 0.3,\n               arrow = arrow(length = unit(0.1, 'cm'))) +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nベクトル表示にはggplot2::geom_segment()を用いる．引数にx軸, y軸の始まりであるx, yと，終わりであるxend, yendを指定する．そうすると始まりと終わりを繋ぐベクトルが表示される．xend, yendには，\\((\\mathrm{w}_0, \\mathrm{w}_1)\\)からそれぞれ軸に対して偏微分した値を足した数値を指定している．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\n\n\n## import numpy as np\n\n\n# $\nNULL\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\n\n\n# Python\nB = np.array([[7, 8, 9], [10, 11, 12]])\nprint(B)\n\n\n# R\nB &lt;- matrix(7:12, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(B)\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n\n\n\n\n\n\n# Python\nprint(A + B)\nprint(A - B)\n\n\n# R\nprint(A + B)\n\n     [,1] [,2] [,3]\n[1,]    8   10   12\n[2,]   14   16   18\n\nprint(A - B)\n\n     [,1] [,2] [,3]\n[1,]   -6   -6   -6\n[2,]   -6   -6   -6\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(2 * A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(2 * A)\n\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n\n\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A @ B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(3, 1))\nprint(A %*% B)\n\n     [,1]\n[1,]   32\n\n\n行列計算の都合上，\\(\\mathbb{A}\\)は\\(1 \\times 3\\)行列，\\(\\mathbb{B}\\)は\\(3 \\times 1\\)行列としている．行列の内積は%*%で計算可能である．\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A * B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A * B)\n\n     [,1] [,2] [,3]\n[1,]    4   10   18\n\n\n各要素同士の積は*で計算できる．この場合，それぞれの行列の行数と列数は一致しなければならないことに注意する．\n\n\n\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A / B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A / B)\n\n     [,1] [,2] [,3]\n[1,] 0.25  0.4  0.5\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [-1, -2, -3]])\nB = np.array([[4, -4], [5, -5], [6, -6]])\nprint(A @ B)\n\n\n# R\nA &lt;- matrix(c(1:3, -1:-3), nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nB &lt;- array(c(4:6, -4:-6), dim = c(3, 2))\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   32  -32\n[2,]  -32   32\n\n\n\n\n\n\n# Python\nprint(np.identity(3))\n\n\n# R\nprint(diag(1, nrow = 3, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n単位行列はdiag()で作成できる．\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nI = np.identity(3)\nprint(A @ I)\n\n\n# R\nA &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nI &lt;- diag(1, nrow = 3, ncol = 3)\nprint(A %*% I)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\n\n\n# Python\nA = np.array([[1, 2], [3, 4]])\ninvA = np.linalg.inv(A)\nprint(invA)\n\n\n# R\nA &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\ninvA &lt;- solve(A)\nprint(invA)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\n逆行列はsolve()を用いる．\n\n\n\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\nprint(A.T)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n転置にはt()を用いる．\n\n\n\n\n\n\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\n\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = 2 ** x\ny2 = 3 ** x\ny3 = 0.5 ** x\n\n\n# R\n\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- 2 ^ x\ny2 &lt;- 3 ^ x\ny3 &lt;- 0.5 ^ x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3, label=\"$y=2^x$\")\nplt.plot(x, y2, \"cornflowerblue\", linewidth=3, label=\"$y=3^x$\")\nplt.plot(x, y3, \"gray\", linewidth=3, label=\"$y=0.5^x$\")\nplt.legend(loc=\"lower right\")\nplt.xlim(-4, 4)\nplt.ylim(-2, 6)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(x, x, x),\n       y_plt = c(y, y2, y3),\n       col   = rep(c('1', '2', '3'), each = length(x))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt, color = col)) +\n  geom_line() +\n  xlim(-4, 4) + ylim(-2, 6) +\n  coord_fixed(ratio = 8 / 8) +\n  scale_color_manual(values = c('black', 'cornflowerblue', 'gray'),\n                     name   = element_blank(),\n                     labels = c(expression(y == 2 ^ x),\n                                expression(y == 3 ^ x),\n                                expression(y == 0.5 ^ x))) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-8, 8, 100)\ny = 2 ** x\n# np.log(0) はエラーになるので 0 は含めない\nx2 = np.linspace(0.001, 8, 100)\n# 底を 2 とした log を公式 (7) で計算\ny2 = np.log(x2) / np.log(2)\n\n\n# R\n\nx &lt;- seq(from = -8, to = 8, length.out = 100)\ny &lt;- 2 ^ x\nx2 &lt;- seq(from = 0.001, to = 8, length.out = 100)\ny2 &lt;- log(x2) / log(2)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x2, y2, \"cornflowerblue\", linewidth=3)\nplt.plot(x, x, \"black\", linestyle=\"--\", linewidth=1)\nplt.xlim(-8, 8)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),   # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x2, y_plt = y2), # 対数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  geom_line(data     = tibble(x_plt = x, y_plt = x),  # y = x\n            mapping  = aes(x = x_plt, y = y_plt),\n            linetype = 'dashed') +\n  xlim(-8, 8) + ylim(-8, 8) +\n  coord_fixed(ratio = 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = (x - 1) ** 2 + 2\nlogy = np.log(y)\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- (x - 1) ^ 2 + 2\nlogy &lt;- log(y)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x, logy, \"cornflowerblue\", linewidth=3)\nplt.xticks(range(-4, 5, 1))\nplt.yticks(range(-4, 9, 1))\nplt.xlim(-4, 4)\nplt.ylim(-4, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),    # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x, y_plt = logy), # 対数化\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  xlim(-4, 4) + ylim(-4, 8) +\n  coord_fixed(ratio = 8 / 12) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\na = 2\ny = a ** x\ndy = np.log(a) * y\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\na &lt;- 2\ny &lt;- a ^ x\ndy &lt;- log(a) * y\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-1, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-4, 4) + ylim(-1, 8) +\n  coord_fixed(ratio = 8 / 9) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(0.0001, 4, 100)  # 0 以下では定義できない\ny = np.log(x)\ndy = 1 / x\n\n\n# R\nx &lt;- seq(from = 0.0001, to = 4, length.out = 100)\ny &lt;- log(x)\ndy &lt;- 1 / x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-1, 4)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-1, 4) + ylim(-8, 8) +\n  coord_fixed(ratio = 5 / 16) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))  # 式4-114\n\n\n# R\nx &lt;- seq(from = -10, to = 10, length.out = 100)\ny &lt;- 1 / (1 + exp(-x))\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.xlim(-10, 10)\nplt.ylim(-1, 2)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-10, 10) + ylim(-1, 2) +\n  coord_fixed(ratio = 20 / 3) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\nソフトマックス関数 ———-\n\n# Python\ndef softmax(x0, x1, x2):\n  u = np.exp(x0) + np.exp(x1) + np.exp(x2)  # 式4-119\n  y0 = np.exp(x0) / u                       # 式4-120\n  y1 = np.exp(x1) / u\n  y2 = np.exp(x2) / u\n  return y0, y1, y2\n\n\n# R\nsoftmax &lt;- function(x0, x1, x2) {\n  u &lt;- exp(x0) + exp(x1) + exp(x2)\n  y0 &lt;- exp(x0) / u\n  y1 &lt;- exp(x1) / u\n  y2 &lt;- exp(x2) / u\n  return(c(y0, y1, y2))\n}\n\nテスト ———-\n\n# Python\ny = softmax(2, 1, -1)\nprint(np.round(y, 4))  # 小数点以下4桁の概数を表示\nprint(np.sum(y))       # 和を表示\n\n\n# R\ny &lt;- softmax(2, 1, -1)\nprint(round(y, 4))\n\n[1] 0.7054 0.2595 0.0351\n\nprint(sum(y))\n\n[1] 1\n\n\n\n\n\n表示データの計算 ———-\n\n# Python\nx0_n, x1_n = 20, 20             # サーフェス表示の解像度\nx0 = np.linspace(-4, 4, x0_n)\nx1 = np.linspace(-4, 4, x1_n)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\ny = softmax(xx0, xx1, 1)        # ソフトマックス関数の値を計算\n\n\n# R\nx0_n &lt;- 20; x1_n &lt;- 20\nx0 &lt;- seq(from = -4, to = 4, length.out = x0_n)\nx1 &lt;- seq(from = -4, to = 4, length.out = x1_n)\ngrid_x0x1 &lt;- expand.grid(x0, x1)\nxx0 &lt;- grid_x0x1$Var1 |&gt;\n  array(dim = c(x0_n, x1_n))\nxx1 &lt;- grid_x0x1$Var2 |&gt;\n  array(dim = c(x0_n, x1_n))\ny_vec &lt;- softmax(xx0, xx1, 1)\ny &lt;- array(y_vec, dim = c(x0_n * x1_n, 3))\n\nPythonでは，yは行数x0_n, 列数x1_nの行列となるが，Rではそうはならない．各値の計算結果がベクトルとなって出力されてしまう．\n\nhead(y_vec, 5)\n\n[1] 0.006648354 0.010094061 0.015298104 0.023122447 0.034807159\n\n\nこのベクトルは，(y0[1], y0[2], y0[3], ..., y0[400], y1[1], y1[2], ...)のような並びとなっているので，\\(400 \\times 3\\)の行列に変換しなければならない．1列目に400個のy0，2列目に400個のy1，3列目に400個のy2のような行列としている．\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(8, 3))\nfor i in range(2):\n  ax = plt.subplot(1, 2, i + 1, projection=\"3d\")\n  ax.plot_surface(\n    xx0, xx1, y[i],\n    rstride=1, cstride=1, alpha=0.3,\n    color=\"blue\", edgecolor=\"black\",\n  )\n  ax.set_xlabel(\"$x_0$\", fontsize=14)\n  ax.set_ylabel(\"$x_1$\", fontsize=14)\n  ax.view_init(40, -125)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1,\n      z = y[,1] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\npersp(x = x0, y = x1,\n      z = y[,2] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\n\n3Dプロットにはpersp()関数を用いた．x, y引数にはx0, x1を，z引数には2つの値に対応した行列を指定しなければ描画されない点に注意．"
  },
  {
    "objectID": "chapter4.html",
    "href": "chapter4.html",
    "title": "第4章: 機械学習のための数学",
    "section": "",
    "text": "まず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "chapter4.html#準備",
    "href": "chapter4.html#準備",
    "title": "1  機械学習に必要な数学の基本",
    "section": "準備",
    "text": "準備\nまず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "chapter4.html#第4章",
    "href": "chapter4.html#第4章",
    "title": "第4章",
    "section": "第4章",
    "text": "第4章\n\n第1節\n\nリスト 4-1-(1)\n\n# Python\nimport numpy as np\n\n\n# R\nNULL\n\nNumpyのインポートに対応するRのコードはない．{tidyverse}をインストールすれば良い．\n\n\nリスト 4-1-(2)\n\n# Python\na = np.array([2, 1])\nprint(a)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nprint(a)\n\n     [,1] [,2]\n[1,]    2    1\n\n\nnp.array()に対応するRのコードにはarray()がある．array(要素, dim = c(行数, 列数))のように指定すると配列が作成される．ちなみに，array()では要素が列に沿って配置されるため，行に沿って配置したい場合はmatrix()でbyrow引数を利用しなければならない．\n\narray(1:4, dim = c(2, 2))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmatrix(1:4, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nリスト 4-1-(3)\n\n# Python\ntype(a)\n\n\n# R\nclass(a)\n\n[1] \"matrix\" \"array\" \n\n\nデータ型を確認するにはclass()を用いたら良い．\n\n\nリスト 4-1-(4)\n\n# Python\nc = np.array([[1, 2], [3, 4]])\nprint(c)\n\n\n# R\nc &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\nprint(c)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nリスト 4-1-(5)\n\n# Python\nd = np.array([[1], [2]])\nprint(d)\n\n\n# R\nd &lt;- array(c(1, 2), dim = c(2, 1))\nprint(d)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n\n\nリスト 4-1-(6)\n\n# Python\nprint(d.T)\nprint(d.T.T)\n\n\n# R\nprint(t(d))\n\n     [,1] [,2]\n[1,]    1    2\n\nprint(t(t(d)))\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n転置にはt()を用いる．\n\n\nリスト 4-1-(7)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a + b)\n\n     [,1] [,2]\n[1,]    3    4\n\n\n\n\nリスト 4-1-(8)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a - b)\n\n     [,1] [,2]\n[1,]    1   -2\n\n\n\n\nリスト 4-1-(9)\n\n# Python\n## print(2 * a)\n\n\nprint(2 * a)\n\n     [,1] [,2]\n[1,]    4    2\n\n\n\n\nリスト 4-1-(10)\n\n# Python\nb = np.array([1, 3])\nc = np.array([4, 2])\nprint(b @ c)\n\n\n# R\nb &lt;- array(c(1, 3), dim = c(1, 2))\nc &lt;- array(c(4, 2), dim = c(2, 1))\nprint(b %*% c)\n\n     [,1]\n[1,]   10\n\n\n行列の積は%*%を用いる．\n行列計算\\(\\mathbb{b} \\cdot \\mathbb{c}\\)では，行列\\(\\mathbb{b}\\)の列数と行列\\(\\mathbb{c}\\)の行数が一致する必要がある．Pythonでは，g行列の行数(または列数)を指定していなくとも計算が可能であるが，Rではそうはいかない．そのため行列b, cの行数(または列数)を計算可能な数値に指定しなければならない．\n\n\nリスト 4-1-(11)\n\n# Python\na = np.array([1, 3])\nprint(np.linalg.norm(a))\n\n\n# R\na &lt;- array(c(1, 3), dim = c(1, 2))\nprint(norm(a, '2'))\n\n[1] 3.162278\n\n\nノルムはnorm()で計算可能である．\n\n\n\n第2節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n環境のリセットはrm(list = ls())でできる．今回はすべてをリセットするためにall.names引数にTRUEを指定している．\n\n\nリスト 4-2-(1)\n\n# Python\na = np.ones(1000)       # [1 1 1 ...     1]\nb = np.arange(1, 1001)  # [1 2 3 ...  1000]\nprint(a @ b)\n\n\n# R\na &lt;- array(rep(1, times = 1000), dim = c(1, 1000))\nb &lt;- array(seq(1:1000), dim = c(1000, 1))\nprint(a %*% b)\n\n       [,1]\n[1,] 500500\n\n\n\n\n\n第3節\n\nリスト 4-3-(1)\n関数を定義 ———-\n\n# Python\ndef f(w0, w1):                       # (A) fの定義\n  return w0 ** 2 + 2 * w0 * w1 + 3   # 式4-41\ndef df_dw0(w0, w1):                  # (B) fのw0に関する偏微分\n  return 2 * w0 + 2 * w1             # 式4-44\ndef df_dw1(w0, w1):                  # (C) fのw1に関する偏微分\n  return 2 * w0                      # 式4-46\n\n\n# R\nf &lt;- function(w0, w1) {            # (A) fの定義\n  return(w0 ^ 2 + 2 * w0 * w1 + 3) # 式4-41\n}\ndf_dw0 &lt;- function(w0, w1) {       # (B) fのw0に関する偏微分\n  return(2 * w0 + 2 * w1)          # 式4-44\n}\ndf_dw1 &lt;- function(w0, w1) {       # (C) fのw1に関する偏微分\n  return(2 * w0)                   # 式4-46\n}\n\n関数を定義するにはfunction(){}を用いる．return()で値を返すことができる．\n表示データの計算 ———-\n\n# Python\nw0_min, w0_max = -2, 2\nw1_min, w1_max = -2, 2\nw0_n, w1_n = 17, 17\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nww0, ww1 = np.meshgrid(w0, w1)          # (D) グリッド座標の作成\nf_num = f(ww0, ww1)                     # (E) fの値の計算\ndf_dw0_num = df_dw0(ww0, ww1)           #     fの偏微分の計算\ndf_dw1_num = df_dw1(ww0, ww1)           #     fの偏微分の計算\n\n\n# R\nw0_min &lt;- -2; w0_max &lt;- 2\nw1_min &lt;- -2; w1_max &lt;- 2\nw0_n &lt;- 17; w1_n &lt;- 17\nw0 &lt;- seq(from = w0_min, to = w0_max, length.out = w0_n)\nw1 &lt;- seq(from = w1_min, to = w1_max, length.out = w1_n)\ngrid_w0w1 &lt;- expand.grid(w0, w1)\nww0 &lt;- grid_w0w1$Var1 |&gt;\n  array(dim = c(w0_n, w1_n))\nww1 &lt;- grid_w0w1$Var2 |&gt;\n  array(dim = c(w0_n, w1_n))\nf_num &lt;- f(ww0, ww1)\ndf_dw0_num &lt;- df_dw0(ww0, ww1)\ndf_dw1_num &lt;-  df_dw1(ww0, ww1)\n\nRで，複数のコードを1行に書くには;で区切れば良い．Pythonのnp.linspace()に対応するRのコードはseq()で，from引数, to引数で指定された値の範囲から，length.out引数で指定された個数の値をベクトルとして出力する関数である．上のコードでは，-2から2までの値の中から17個の値を出力している．\nnp.meshgrid(w0, w1)は，2次元平面でのすべての座標を表している．例えば，ww0[1, 1], ww1[1, 1]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -2)\\)を，ww0[1, 2], ww1[1, 2]は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -1.75)\\)を表している．ww0とww1の対応する要素が各座標を表しているのである．\n\nww0[1:4, 1:4]\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] -2.00 -2.00 -2.00 -2.00\n[2,] -1.75 -1.75 -1.75 -1.75\n[3,] -1.50 -1.50 -1.50 -1.50\n[4,] -1.25 -1.25 -1.25 -1.25\n\nww1[1:4, 1:4]\n\n     [,1]  [,2] [,3]  [,4]\n[1,]   -2 -1.75 -1.5 -1.25\n[2,]   -2 -1.75 -1.5 -1.25\n[3,]   -2 -1.75 -1.5 -1.25\n[4,]   -2 -1.75 -1.5 -1.25\n\n\nRで同じように格子状の座標を生成するにはexpand.grid()がある．与えられたベクトルのすべての組み合わせを生成し，それらを格納したデータフレームを返してくれる．\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nexpand.grid(x, y)\n\n  Var1 Var2\n1    1    4\n2    2    4\n3    3    4\n4    1    5\n5    2    5\n6    3    5\n7    1    6\n8    2    6\n9    3    6\n\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(9, 4))\nplt.subplots_adjust(wspace=0.3)\n\n\n# R\nNULL\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 1)\ncont = plt.contour(                     # (F) fの等高線表示\n  ww0, ww1, f_num, levels=10, colors=\"black\")\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\n\n\n# R\ndf &lt;- array(NA, dim = c(w0_n * w1_n, 5)) |&gt; # 空のデータフレームを用意．\n  data.frame() |&gt;\n  rename(ww0   = 'X1',                      # 変数名を変更．\n         ww1   = 'X2',\n         f_num = 'X3',\n         dw0   = 'X4',\n         dw1   = 'X5')\nn &lt;- 1                                      #  便宜上のインデックス．\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df[n, 1] &lt;- ww0[i, j]                   # ww0を順番に代入．\n    df[n, 2] &lt;- ww1[i, j]                   # ww1を順番に代入．\n    df[n, 3] &lt;- f_num[i, j]                 # ww0, ww1に対応するfを代入．\n    df[n, 4] &lt;- df_dw0_num[i, j]            # ww0, ww1に対応するdw0を代入．\n    df[n, 5] &lt;- df_dw1_num[i, j]            # ww0, ww1に対応するdw1を代入．\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot(aes(ww0, ww1, z = f_num)) +\n  geom_contour() +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n等高線表示にはggplot2::geom_contour()を用いる．引数にはx軸, y軸とそれらに対応するz軸の値が必要である．{ggplot2}を用いてのグラフ描画には，整然(tidy)なデータフレームが必要である(整然データについては宋・矢内『私たちのR』第17章を参照されたい)．そのため，少し強引に作成しなければならない．\n\nベクトル表示\n\n\n# Python\nplt.subplot(1, 2, 2)\nplt.quiver(                      # (G) fの勾配のベクトル表示\n  ww0, ww1, df_dw0_num, df_dw1_num)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.show()\n\n\n# R\ndf |&gt;\n  ggplot() +\n  geom_segment(aes(x = ww0, xend = ww0 + dw0 / 30,\n                   y = ww1, yend = ww1 + dw1 / 30),\n               linewidth = 0.3,\n               arrow = arrow(length = unit(0.1, 'cm'))) +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nベクトル表示にはggplot2::geom_segment()を用いる．引数にx軸, y軸の始まりであるx, yと，終わりであるxend, yendを指定する．そうすると始まりと終わりを繋ぐベクトルが表示される．xend, yendには，\\((\\mathrm{w}_0, \\mathrm{w}_1)\\)からそれぞれ軸に対して偏微分した値を足した数値を指定している．\n\n\n\n第4節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-4-(1)\n\n## import numpy as np\n\n\n# $\nNULL\n\n\n\nリスト 4-4-(2)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\nリスト 4-4-(3)\n\n# Python\nB = np.array([[7, 8, 9], [10, 11, 12]])\nprint(B)\n\n\n# R\nB &lt;- matrix(7:12, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(B)\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n\n\n\n\nリスト 4-4-(4)\n\n# Python\nprint(A + B)\nprint(A - B)\n\n\n# R\nprint(A + B)\n\n     [,1] [,2] [,3]\n[1,]    8   10   12\n[2,]   14   16   18\n\nprint(A - B)\n\n     [,1] [,2] [,3]\n[1,]   -6   -6   -6\n[2,]   -6   -6   -6\n\n\n\n\nリスト 4-4-(5)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(2 * A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(2 * A)\n\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n\n\n\n\nリスト 4-4-(6)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A @ B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(3, 1))\nprint(A %*% B)\n\n     [,1]\n[1,]   32\n\n\n行列計算の都合上，\\(\\mathbb{A}\\)は\\(1 \\times 3\\)行列，\\(\\mathbb{B}\\)は\\(3 \\times 1\\)行列としている．行列の内積は%*%で計算可能である．\n\n\nリスト 4-4-(7)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A * B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A * B)\n\n     [,1] [,2] [,3]\n[1,]    4   10   18\n\n\n各要素同士の積は*で計算できる．この場合，それぞれの行列の行数と列数は一致しなければならないことに注意する．\n\n\nリスト 4-4-(8)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A / B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A / B)\n\n     [,1] [,2] [,3]\n[1,] 0.25  0.4  0.5\n\n\n\n\nリスト 4-4-(9)\n\n# Python\nA = np.array([[1, 2, 3], [-1, -2, -3]])\nB = np.array([[4, -4], [5, -5], [6, -6]])\nprint(A @ B)\n\n\n# R\nA &lt;- matrix(c(1:3, -1:-3), nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nB &lt;- array(c(4:6, -4:-6), dim = c(3, 2))\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   32  -32\n[2,]  -32   32\n\n\n\n\nリスト 4-4-(10)\n\n# Python\nprint(np.identity(3))\n\n\n# R\nprint(diag(1, nrow = 3, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n単位行列はdiag()で作成できる．\n\n\nリスト 4-4-(11)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nI = np.identity(3)\nprint(A @ I)\n\n\n# R\nA &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nI &lt;- diag(1, nrow = 3, ncol = 3)\nprint(A %*% I)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\nリスト 4-4-(12)\n\n# Python\nA = np.array([[1, 2], [3, 4]])\ninvA = np.linalg.inv(A)\nprint(invA)\n\n\n# R\nA &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\ninvA &lt;- solve(A)\nprint(invA)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\n逆行列はsolve()を用いる．\n\n\nリスト 4-4-(13)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\nprint(A.T)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n転置にはt()を用いる．\n\n\n\n第5節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-5-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = 2 ** x\ny2 = 3 ** x\ny3 = 0.5 ** x\n\n\n# R\n\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- 2 ^ x\ny2 &lt;- 3 ^ x\ny3 &lt;- 0.5 ^ x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3, label=\"$y=2^x$\")\nplt.plot(x, y2, \"cornflowerblue\", linewidth=3, label=\"$y=3^x$\")\nplt.plot(x, y3, \"gray\", linewidth=3, label=\"$y=0.5^x$\")\nplt.legend(loc=\"lower right\")\nplt.xlim(-4, 4)\nplt.ylim(-2, 6)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(x, x, x),\n       y_plt = c(y, y2, y3),\n       col   = rep(c('1', '2', '3'), each = length(x))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt, color = col)) +\n  geom_line() +\n  xlim(-4, 4) + ylim(-2, 6) +\n  coord_fixed(ratio = 8 / 8) +\n  scale_color_manual(values = c('black', 'cornflowerblue', 'gray'),\n                     name   = element_blank(),\n                     labels = c(expression(y == 2 ^ x),\n                                expression(y == 3 ^ x),\n                                expression(y == 0.5 ^ x))) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(2)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-8, 8, 100)\ny = 2 ** x\n# np.log(0) はエラーになるので 0 は含めない\nx2 = np.linspace(0.001, 8, 100)\n# 底を 2 とした log を公式 (7) で計算\ny2 = np.log(x2) / np.log(2)\n\n\n# R\n\nx &lt;- seq(from = -8, to = 8, length.out = 100)\ny &lt;- 2 ^ x\nx2 &lt;- seq(from = 0.001, to = 8, length.out = 100)\ny2 &lt;- log(x2) / log(2)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x2, y2, \"cornflowerblue\", linewidth=3)\nplt.plot(x, x, \"black\", linestyle=\"--\", linewidth=1)\nplt.xlim(-8, 8)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),   # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x2, y_plt = y2), # 対数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  geom_line(data     = tibble(x_plt = x, y_plt = x),  # y = x\n            mapping  = aes(x = x_plt, y = y_plt),\n            linetype = 'dashed') +\n  xlim(-8, 8) + ylim(-8, 8) +\n  coord_fixed(ratio = 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(3)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = (x - 1) ** 2 + 2\nlogy = np.log(y)\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- (x - 1) ^ 2 + 2\nlogy &lt;- log(y)\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x, logy, \"cornflowerblue\", linewidth=3)\nplt.xticks(range(-4, 5, 1))\nplt.yticks(range(-4, 9, 1))\nplt.xlim(-4, 4)\nplt.ylim(-4, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),    # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x, y_plt = logy), # 対数化\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  xlim(-4, 4) + ylim(-4, 8) +\n  coord_fixed(ratio = 8 / 12) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(4)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\na = 2\ny = a ** x\ndy = np.log(a) * y\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\na &lt;- 2\ny &lt;- a ^ x\ndy &lt;- log(a) * y\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-1, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-4, 4) + ylim(-1, 8) +\n  coord_fixed(ratio = 8 / 9) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(5)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(0.0001, 4, 100)  # 0 以下では定義できない\ny = np.log(x)\ndy = 1 / x\n\n\n# R\nx &lt;- seq(from = 0.0001, to = 4, length.out = 100)\ny &lt;- log(x)\ndy &lt;- 1 / x\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-1, 4)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-1, 4) + ylim(-8, 8) +\n  coord_fixed(ratio = 5 / 16) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\nリスト 4-5-(6)\n表示データの計算 ———-\n\n# Python\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))  # 式4-114\n\n\n# R\nx &lt;- seq(from = -10, to = 10, length.out = 100)\ny &lt;- 1 / (1 + exp(-x))\n\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.xlim(-10, 10)\nplt.ylim(-1, 2)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-10, 10) + ylim(-1, 2) +\n  coord_fixed(ratio = 20 / 3) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(7)\nソフトマックス関数 ———-\n\n# Python\ndef softmax(x0, x1, x2):\n  u = np.exp(x0) + np.exp(x1) + np.exp(x2)  # 式4-119\n  y0 = np.exp(x0) / u                       # 式4-120\n  y1 = np.exp(x1) / u\n  y2 = np.exp(x2) / u\n  return y0, y1, y2\n\n\n# R\nsoftmax &lt;- function(x0, x1, x2) {\n  u &lt;- exp(x0) + exp(x1) + exp(x2)\n  y0 &lt;- exp(x0) / u\n  y1 &lt;- exp(x1) / u\n  y2 &lt;- exp(x2) / u\n  return(c(y0, y1, y2))\n}\n\nテスト ———-\n\n# Python\ny = softmax(2, 1, -1)\nprint(np.round(y, 4))  # 小数点以下4桁の概数を表示\nprint(np.sum(y))       # 和を表示\n\n\n# R\ny &lt;- softmax(2, 1, -1)\nprint(round(y, 4))\n\n[1] 0.7054 0.2595 0.0351\n\nprint(sum(y))\n\n[1] 1\n\n\n\n\nリスト 4-5-(8)\n表示データの計算 ———-\n\n# Python\nx0_n, x1_n = 20, 20             # サーフェス表示の解像度\nx0 = np.linspace(-4, 4, x0_n)\nx1 = np.linspace(-4, 4, x1_n)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\ny = softmax(xx0, xx1, 1)        # ソフトマックス関数の値を計算\n\n\n# R\nx0_n &lt;- 20; x1_n &lt;- 20\nx0 &lt;- seq(from = -4, to = 4, length.out = x0_n)\nx1 &lt;- seq(from = -4, to = 4, length.out = x1_n)\ngrid_x0x1 &lt;- expand.grid(x0, x1)\nxx0 &lt;- grid_x0x1$Var1 |&gt;\n  array(dim = c(x0_n, x1_n))\nxx1 &lt;- grid_x0x1$Var2 |&gt;\n  array(dim = c(x0_n, x1_n))\ny_vec &lt;- softmax(xx0, xx1, 1)\ny &lt;- array(y_vec, dim = c(x0_n * x1_n, 3))\n\nPythonでは，yは行数x0_n, 列数x1_nの行列となるが，Rではそうはならない．各値の計算結果がベクトルとなって出力されてしまう．\n\nhead(y_vec, 5)\n\n[1] 0.006648354 0.010094061 0.015298104 0.023122447 0.034807159\n\n\nこのベクトルは，(y0[1], y0[2], y0[3], ..., y0[400], y1[1], y1[2], ...)のような並びとなっているので，\\(400 \\times 3\\)の行列に変換しなければならない．1列目に400個のy0，2列目に400個のy1，3列目に400個のy2のような行列としている．\nグラフ描画 ———-\n\n# Python\nplt.figure(figsize=(8, 3))\nfor i in range(2):\n  ax = plt.subplot(1, 2, i + 1, projection=\"3d\")\n  ax.plot_surface(\n    xx0, xx1, y[i],\n    rstride=1, cstride=1, alpha=0.3,\n    color=\"blue\", edgecolor=\"black\",\n  )\n  ax.set_xlabel(\"$x_0$\", fontsize=14)\n  ax.set_ylabel(\"$x_1$\", fontsize=14)\n  ax.view_init(40, -125)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1,\n      z = y[,1] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\npersp(x = x0, y = x1,\n      z = y[,2] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '',\n      theta = -40, phi = 30)\n\n\n\n\n3Dプロットにはpersp()関数を用いた．x, y引数にはx0, x1を，z引数には2つの値に対応した行列を指定しなければ描画されない点に注意．\n\n\nリスト 4-5-(9)\nガウス関数 ———-\n\n# Python\ndef gauss(mu, sigma, a):\n  # 式4-135\n  y = a * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))\n  return y\n\n\n# R\ngauss &lt;- function(mu, sigma, a, x) {\n  y &lt;- a * exp(-((x - mu) ^ 2) / (2 * sigma ^ 2))\n}\n\nコードの関係上，x引数を追加している．\nグラフ描画 ———-\n\n# Python\nx = np.linspace(-4, 4, 100)\nplt.figure(figsize=(4, 4))\nplt.plot(x, gauss(0, 1, 1), \"black\", linewidth=3)\nplt.plot(x, gauss(2, 2, 0.5), \"gray\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-0.5, 1.5)\nplt.grid()\nplt.show()\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\nggplot() +\n  geom_line(data    = tibble(a = x, b = gauss(0, 1, 1, x)),   # 平均0，標準偏差1，高さ1\n            mapping = aes(x = a, y = b),\n            color   = 'black') +\n  geom_line(data    = tibble(c = x, d = gauss(2, 2, 0.5, x)), # 平均2，標準偏差2，高さ0.5\n            mapping = aes(x = c, y = d),\n            color   = 'gray') +\n  xlim(-4, 4) + ylim(-0.5, 1.5) +\n  coord_fixed(ratio = 8 / 2) +\n  labs(x = element_blank(), y = element_blank())"
  },
  {
    "objectID": "chapter5.html",
    "href": "chapter5.html",
    "title": "2  教師あり学習 : 回帰",
    "section": "",
    "text": "リスト 5-4-(2)"
  },
  {
    "objectID": "chapter5.html#準備",
    "href": "chapter5.html#準備",
    "title": "2  教師あり学習 : 回帰",
    "section": "準備",
    "text": "準備\nまず，パッケージを読み込む．また，dataというディレクトリを作成しておく．\n\nlibrary(tidyverse)\ndir.create('data')"
  },
  {
    "objectID": "chapter4.html#内容",
    "href": "chapter4.html#内容",
    "title": "1  機械学習に必要な数学の基本",
    "section": "内容",
    "text": "内容\n\n第1節\n\nリスト 4-1-(1)\n\n# Python\nimport numpy as np\n\n\n# R\nNULL\n\nNumpyのインポートに対応するRのコードはない．{tidyverse}をインストールすれば良い．\n\n\nリスト 4-1-(2)\n\n# Python\na = np.array([2, 1])\nprint(a)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nprint(a)\n\n     [,1] [,2]\n[1,]    2    1\n\n\nnp.array()に対応するRのコードにはarray()がある．array(要素, dim = c(行数, 列数))のように指定すると配列が作成される．\n\n\n\n\n\n\nちなみに\n\n\n\narray()では要素が列に沿って配置されるため，行に沿って配置したい場合はmatrix()でbyrow引数を利用しなければならない．\n\narray(1:4, dim = c(2, 2))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nmatrix(1:4, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\n\n\nリスト 4-1-(3)\n\n# Python\ntype(a)\n\n\n# R\nclass(a)\n\n[1] \"matrix\" \"array\" \n\n\nデータ型を確認するにはclass()を用いたら良い．\n\n\nリスト 4-1-(4)\n\n# Python\nc = np.array([[1, 2], [3, 4]])\nprint(c)\n\n\n# R\nc &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\nprint(c)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\n\n\nリスト 4-1-(5)\n\n# Python\nd = np.array([[1], [2]])\nprint(d)\n\n\n# R\nd &lt;- array(c(1, 2), dim = c(2, 1))\nprint(d)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n\n\nリスト 4-1-(6)\n\n# Python\nprint(d.T)\nprint(d.T.T)\n\n\n# R\nprint(t(d))\n\n     [,1] [,2]\n[1,]    1    2\n\nprint(t(t(d)))\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\n転置にはt()を用いる．\n\n\nリスト 4-1-(7)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a + b)\n\n     [,1] [,2]\n[1,]    3    4\n\n\n\n\nリスト 4-1-(8)\n\n# Python\na = np.array([2, 1])\nb = np.array([1, 3])\nprint(a + b)\n\n\n# R\na &lt;- array(c(2, 1), dim = c(1, 2))\nb &lt;- array(c(1, 3), dim = c(1, 2))\nprint(a - b)\n\n     [,1] [,2]\n[1,]    1   -2\n\n\n\n\nリスト 4-1-(9)\n\n# Python\nprint(2 * a)\n\n\nprint(2 * a)\n\n     [,1] [,2]\n[1,]    4    2\n\n\n\n\nリスト 4-1-(10)\n\n# Python\nb = np.array([1, 3])\nc = np.array([4, 2])\nprint(b @ c)\n\n\n# R\nb &lt;- array(c(1, 3), dim = c(1, 2))\nc &lt;- array(c(4, 2), dim = c(2, 1))\nprint(b %*% c)\n\n     [,1]\n[1,]   10\n\n\n行列の積を計算するには%*%を用いる．\n行列計算\\(\\mathbb{b} \\cdot \\mathbb{c}\\)では，行列\\(\\mathbb{b}\\)の列数と行列\\(\\mathbb{c}\\)の行数が一致する必要がある．Pythonでは，行列の行数(または列数)を指定していなくとも計算が可能であるが，Rではそうはいかない．そのため行列b, cの行数(または列数)を計算可能な数値に指定しなければならない．\n\n\nリスト 4-1-(11)\n\n# Python\na = np.array([1, 3])\nprint(np.linalg.norm(a))\n\n\n# R\na &lt;- array(c(1, 3), dim = c(1, 2))\nprint(norm(a, '2'))\n\n[1] 3.162278\n\n\nノルムはnorm()で計算可能である．\n\n\n\n第2節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n環境のリセットはrm(list = ls())でできる．今回はすべてをリセットするためにall.names引数にTRUEを指定している．\n\n\nリスト 4-2-(1)\n\n# Python\na = np.ones(1000)       # [1 1 1 ...     1]\nb = np.arange(1, 1001)  # [1 2 3 ...  1000]\nprint(a @ b)\n\n\n# R\na &lt;- array(rep(1, times = 1000), dim = c(1, 1000))\nb &lt;- array(1:1000, dim = c(1000, 1))\nprint(a %*% b)\n\n       [,1]\n[1,] 500500\n\n\nrep()関数は，特定の値を繰り返し出力したい時に便利である．rep(1, times = 1000)は1を1000個生成し，それをベクトルとして出力するコードである．\n\n\n\n第3節\n\nリスト 4-3-(1)\n関数を定義 ———\n\n# Python\ndef f(w0, w1):                       # (A) fの定義\n  return w0 ** 2 + 2 * w0 * w1 + 3   # 式4-41\ndef df_dw0(w0, w1):                  # (B) fのw0に関する偏微分\n  return 2 * w0 + 2 * w1             # 式4-44\ndef df_dw1(w0, w1):                  # (C) fのw1に関する偏微分\n  return 2 * w0                      # 式4-46\n\n\n# R\nf &lt;- function(w0, w1) {            # (A) fの定義\n  return(w0 ^ 2 + 2 * w0 * w1 + 3) # 式4-41\n}\ndf_dw0 &lt;- function(w0, w1) {       # (B) fのw0に関する偏微分\n  return(2 * w0 + 2 * w1)          # 式4-44\n}\ndf_dw1 &lt;- function(w0, w1) {       # (C) fのw1に関する偏微分\n  return(2 * w0)                   # 式4-46\n}\n\n関数を定義するにはfunction(){}を用いる．return()で値を返すことができる．\n表示データの計算 ———\n\n# Python\nw0_min, w0_max = -2, 2\nw1_min, w1_max = -2, 2\nw0_n, w1_n = 17, 17\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nww0, ww1 = np.meshgrid(w0, w1)          # (D) グリッド座標の作成\nf_num = f(ww0, ww1)                     # (E) fの値の計算\ndf_dw0_num = df_dw0(ww0, ww1)           #     fの偏微分の計算\ndf_dw1_num = df_dw1(ww0, ww1)           #     fの偏微分の計算\n\n\n# R\nw0_min &lt;- -2; w0_max &lt;- 2\nw1_min &lt;- -2; w1_max &lt;- 2\nw0_n &lt;- 17; w1_n &lt;- 17\nw0 &lt;- seq(from = w0_min, to = w0_max, length.out = w0_n)\nw1 &lt;- seq(from = w1_min, to = w1_max, length.out = w1_n)\ngrid_w0w1 &lt;- expand_grid(w0, w1)                  # (D) グリッド座標の作成\nf_num &lt;- f(grid_w0w1$w0, grid_w0w1$w1)            # (E) fの値の計算\ndf_dw0_num &lt;- df_dw0(grid_w0w1$w0, grid_w0w1$w1)  #     fの偏微分の計算\ndf_dw1_num &lt;-  df_dw1(grid_w0w1$w0, grid_w0w1$w1) #     fの偏微分の計算\n\nRで複数のコードを1行に書くには;で区切れば良い．\nPythonのnp.linspace()に対応するRのコードはseq()で，from引数, to引数で指定された値の範囲から，length.out引数で指定された個数の値をベクトルとして出力する関数である．上のコードでは，-2から2までの値の中から17個の値を出力している．\nnp.meshgrid(w0, w1)は，2次元平面でのすべての座標を出力するコードである．例えば，\\((\\) ww0[1, 1] \\(,\\) ww1[1, 1] \\()\\)は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-2, -2)\\)を，\\((\\) ww0[1, 2] \\(,\\) ww1[1, 2] \\()\\) は\\((\\mathrm{w}_0, \\mathrm{w}_1) = (-1.75, -2)\\)を表している．ww0とww1の対応する要素が各座標を表しているのである．\n\nww0[1:4, 1:4]\n\n     [,1]  [,2] [,3]  [,4]\n[1,]   -2 -1.75 -1.5 -1.25\n[2,]   -2 -1.75 -1.5 -1.25\n[3,]   -2 -1.75 -1.5 -1.25\n[4,]   -2 -1.75 -1.5 -1.25\n\nww1[1:4, 1:4]\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] -2.00 -2.00 -2.00 -2.00\n[2,] -1.75 -1.75 -1.75 -1.75\n[3,] -1.50 -1.50 -1.50 -1.50\n[4,] -1.25 -1.25 -1.25 -1.25\n\n\nRで同じように格子状の座標を生成するにはexpand_grid()がある．与えられたベクトルのすべての組み合わせを生成し，それらを格納したデータフレームを返してくれる．\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(4, 5, 6)\nexpand_grid(x, y)\n\n# A tibble: 9 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     4\n2     1     5\n3     1     6\n4     2     4\n5     2     5\n6     2     6\n7     3     4\n8     3     5\n9     3     6\n\n\nPythonでは，座標をww0, ww1オブジェクトに\\(17 \\times 17\\)配列として格納しているが，Rではexpand_grid()で作成したデータフレームをそのまま用いている．なぜなら，後にグラフ描画に用いる{ggplot2}には配列は適していないからである．\nグラフ描画 ———\n\n等高線表示\n\n\n# Python\nplt.figure(figsize=(9, 4))\nplt.subplots_adjust(wspace=0.3)\nplt.subplot(1, 2, 1)\ncont = plt.contour(                     # (F) fの等高線表示\n  ww0, ww1, f_num, levels=10, colors=\"black\")\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\n\n\n# R\ndf &lt;- cbind(grid_w0w1, f_num, df_dw0_num, df_dw1_num)\ndf |&gt;\n  ggplot(aes(w0, w1, z = f_num)) +\n  geom_contour() +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nグラフの描画には{ggplot2}を用いる．{ggplot2}でグラフを描画するときは，整然(tidy)なデータが必要であるため，それを作成するところから始めなければならない(整然データについては宋・矢内『私たちのR』第17章を参照されたい)．\n空のデータフレームを作成して，それに値を順に入れるという方法で整然データを用意している．等高線表示にはggplot2::geom_contour()を用いる．引数にはx軸, y軸とそれらに対応するz軸の値が必要である．\n\nベクトル表示\n\n\n# Python\nplt.subplot(1, 2, 2)\nplt.quiver(                      # (G) fの勾配のベクトル表示\n  ww0, ww1, df_dw0_num, df_dw1_num)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.xticks(range(w0_min, w0_max + 1, 1))\nplt.yticks(range(w1_min, w1_max + 1, 1))\nplt.xlim(w0_min - 0.5, w0_max + 0.5)\nplt.ylim(w1_min - 0.5, w1_max + 0.5)\nplt.show()\n\n\n# R\ndf |&gt;\n  ggplot() +\n  geom_segment(aes(x = w0, xend = w0 + df_dw0_num / 30,\n                   y = w1, yend = w1 + df_dw1_num / 30),\n               linewidth = 0.3,\n               arrow = arrow(length = unit(0.1, 'cm'))) +\n  coord_fixed(ratio = 1) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\nベクトル表示にはggplot2::geom_segment()を用いる．引数にx軸, y軸の始まりであるx, yと，終わりであるxend, yendを指定する．そうすると始まりと終わりを繋ぐベクトルが表示される．xend, yendには，\\((\\mathrm{w}_0, \\mathrm{w}_1)\\)からそれぞれの軸に対して偏微分した値を足した数値を指定している．\n\n\n\n第4節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-4-(1)\n\n## import numpy as np\n\n\n# R\nNULL\n\n\n\nリスト 4-4-(2)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\nリスト 4-4-(3)\n\n# Python\nB = np.array([[7, 8, 9], [10, 11, 12]])\nprint(B)\n\n\n# R\nB &lt;- matrix(7:12, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(B)\n\n     [,1] [,2] [,3]\n[1,]    7    8    9\n[2,]   10   11   12\n\n\n\n\nリスト 4-4-(4)\n\n# Python\nprint(A + B)\nprint(A - B)\n\n\n# R\nprint(A + B)\n\n     [,1] [,2] [,3]\n[1,]    8   10   12\n[2,]   14   16   18\n\nprint(A - B)\n\n     [,1] [,2] [,3]\n[1,]   -6   -6   -6\n[2,]   -6   -6   -6\n\n\n\n\nリスト 4-4-(5)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(2 * A)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(2 * A)\n\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n\n\n\n\nリスト 4-4-(6)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A @ B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(3, 1))\nprint(A %*% B)\n\n     [,1]\n[1,]   32\n\n\n行列計算の都合上，\\(\\mathbb{A}\\)は\\(1 \\times 3\\)行列，\\(\\mathbb{B}\\)は\\(3 \\times 1\\)行列としている．行列の内積は%*%で計算可能である．\n\n\nリスト 4-4-(7)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A * B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A * B)\n\n     [,1] [,2] [,3]\n[1,]    4   10   18\n\n\n各要素同士の積は*で計算できる．この場合，それぞれの行列の行数と列数は一致しなければならないことに注意する．\n\n\nリスト 4-4-(8)\n\n# Python\nA = np.array([1, 2, 3])\nB = np.array([4, 5, 6])\nprint(A / B)\n\n\n# R\nA &lt;- array(1:3, dim = c(1, 3))\nB &lt;- array(4:6, dim = c(1, 3))\nprint(A / B)\n\n     [,1] [,2] [,3]\n[1,] 0.25  0.4  0.5\n\n\n\n\nリスト 4-4-(9)\n\n# Python\nA = np.array([[1, 2, 3], [-1, -2, -3]])\nB = np.array([[4, -4], [5, -5], [6, -6]])\nprint(A @ B)\n\n\n# R\nA &lt;- matrix(c(1:3, -1:-3), nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nB &lt;- array(c(4:6, -4:-6), dim = c(3, 2))\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   32  -32\n[2,]  -32   32\n\n\n\n\nリスト 4-4-(10)\n\n# Python\nprint(np.identity(3))\n\n\n# R\nprint(diag(nrow = 3, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n単位行列はdiag()で作成できる．\n\n\nリスト 4-4-(11)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nI = np.identity(3)\nprint(A @ I)\n\n\n# R\nA &lt;- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nI &lt;- diag(1, nrow = 3, ncol = 3)\nprint(A %*% I)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\nリスト 4-4-(12)\n\n# Python\nA = np.array([[1, 2], [3, 4]])\ninvA = np.linalg.inv(A)\nprint(invA)\n\n\n# R\nA &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) |&gt;\n  as.array()\ninvA &lt;- solve(A)\nprint(invA)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\n逆行列はsolve()を用いる．\n\n\nリスト 4-4-(13)\n\n# Python\nA = np.array([[1, 2, 3], [4, 5, 6]])\nprint(A)\nprint(A.T)\n\n\n# R\nA &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) |&gt;\n  as.array()\nprint(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n転置にはt()を用いる．\n\n\n\n第5節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 4-5-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\n表示データの計算 ———\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = 2 ** x\ny2 = 3 ** x\ny3 = 0.5 ** x\n\n\n# R\n\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- 2 ^ x\ny2 &lt;- 3 ^ x\ny3 &lt;- 0.5 ^ x\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3, label=\"$y=2^x$\")\nplt.plot(x, y2, \"cornflowerblue\", linewidth=3, label=\"$y=3^x$\")\nplt.plot(x, y3, \"gray\", linewidth=3, label=\"$y=0.5^x$\")\nplt.legend(loc=\"lower right\")\nplt.xlim(-4, 4)\nplt.ylim(-2, 6)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(x, x, x),\n       y_plt = c(y, y2, y3),\n       col   = rep(c('1', '2', '3'), each = length(x))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt, color = col)) +\n  geom_line() +\n  xlim(-4, 4) + ylim(-2, 6) +\n  coord_fixed(ratio = 8 / 8) +\n  scale_color_manual(values = c('black', 'cornflowerblue', 'gray'),\n                     name   = element_blank(),\n                     labels = c(expression(y == 2 ^ x),\n                                expression(y == 3 ^ x),\n                                expression(y == 0.5 ^ x))) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(2)\n表示データの計算 ———\n\n# Python\nx = np.linspace(-8, 8, 100)\ny = 2 ** x\n# np.log(0) はエラーになるので 0 は含めない\nx2 = np.linspace(0.001, 8, 100)\n# 底を 2 とした log を公式 (7) で計算\ny2 = np.log(x2) / np.log(2)\n\n\n# R\nx &lt;- seq(from = -8, to = 8, length.out = 100)\ny &lt;- 2 ^ x\nx2 &lt;- seq(from = 0.001, to = 8, length.out = 100)\ny2 &lt;- log(x2) / log(2)\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(5, 5))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x2, y2, \"cornflowerblue\", linewidth=3)\nplt.plot(x, x, \"black\", linestyle=\"--\", linewidth=1)\nplt.xlim(-8, 8)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),   # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x2, y_plt = y2), # 対数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  geom_line(data     = tibble(x_plt = x, y_plt = x),  # y = x\n            mapping  = aes(x = x_plt, y = y_plt),\n            linetype = 'dashed') +\n  xlim(-8, 8) + ylim(-8, 8) +\n  coord_fixed(ratio = 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(3)\n表示データの計算 ———\n\n# Python\nx = np.linspace(-4, 4, 100)\ny = (x - 1) ** 2 + 2\nlogy = np.log(y)\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\ny &lt;- (x - 1) ^ 2 + 2\nlogy &lt;- log(y)\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.plot(x, logy, \"cornflowerblue\", linewidth=3)\nplt.xticks(range(-4, 5, 1))\nplt.yticks(range(-4, 9, 1))\nplt.xlim(-4, 4)\nplt.ylim(-4, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),    # 指数関数\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'black') +\n  geom_line(data    = tibble(x_plt = x, y_plt = logy), # 対数化\n            mapping = aes(x = x_plt, y = y_plt),\n            color   = 'cornflowerblue') +\n  xlim(-4, 4) + ylim(-4, 8) +\n  coord_fixed(ratio = 8 / 12) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(4)\n表示データの計算 ———\n\n# Python\nx = np.linspace(-4, 4, 100)\na = 2\ny = a ** x\ndy = np.log(a) * y\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\na &lt;- 2\ny &lt;- a ^ x\ndy &lt;- log(a) * y\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-1, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-4, 4) + ylim(-1, 8) +\n  coord_fixed(ratio = 8 / 9) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(5)\n表示データの計算 ———\n\n# Python\nx = np.linspace(0.0001, 4, 100)  # 0 以下では定義できない\ny = np.log(x)\ndy = 1 / x\n\n\n# R\nx &lt;- seq(from = 0.0001, to = 4, length.out = 100)\ny &lt;- log(x)\ndy &lt;- 1 / x\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"gray\", linestyle=\"--\", linewidth=3)\nplt.plot(x, dy, \"black\", linewidth=3)\nplt.xlim(-1, 4)\nplt.ylim(-8, 8)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data     = tibble(x_plt = x, y_plt = y), # y\n            mapping  = aes(x = x_plt, y = y_plt),\n            color    = 'gray',\n            linetype = 'dashed') +\n  geom_line(data    = tibble(x_plt = x, y_plt = dy), # y'\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-1, 4) + ylim(-8, 8) +\n  coord_fixed(ratio = 5 / 16) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(6)\n表示データの計算 ———\n\n# Python\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))  # 式4-114\n\n\n# R\nx &lt;- seq(from = -10, to = 10, length.out = 100)\ny &lt;- 1 / (1 + exp(-x)) # 式4-114\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(x, y, \"black\", linewidth=3)\nplt.xlim(-10, 10)\nplt.ylim(-1, 2)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_line(data    = tibble(x_plt = x, y_plt = y),\n            mapping = aes(x = x_plt, y = y_plt)) +\n  xlim(-10, 10) + ylim(-1, 2) +\n  coord_fixed(ratio = 20 / 3) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 4-5-(7)\nソフトマックス関数 ———\n\n# Python\ndef softmax(x0, x1, x2):\n  u = np.exp(x0) + np.exp(x1) + np.exp(x2)  # 式4-119\n  y0 = np.exp(x0) / u                       # 式4-120\n  y1 = np.exp(x1) / u\n  y2 = np.exp(x2) / u\n  return y0, y1, y2\n\n\n# R\nsoftmax &lt;- function(x0, x1, x2) {\n  u &lt;- exp(x0) + exp(x1) + exp(x2) # 式4-119\n  y0 &lt;- exp(x0) / u                # 式4-120\n  y1 &lt;- exp(x1) / u\n  y2 &lt;- exp(x2) / u\n  return(c(y0, y1, y2))\n}\n\nテスト ———\n\n# Python\ny = softmax(2, 1, -1)\nprint(np.round(y, 4))  # 小数点以下4桁の概数を表示\nprint(np.sum(y))       # 和を表示\n\n\n# R\ny &lt;- softmax(2, 1, -1)\nprint(round(y, 4))\n\n[1] 0.7054 0.2595 0.0351\n\nprint(sum(y))\n\n[1] 1\n\n\n\n\nリスト 4-5-(8)\n表示データの計算 ———\n\n# Python\nx0_n, x1_n = 20, 20             # サーフェス表示の解像度\nx0 = np.linspace(-4, 4, x0_n)\nx1 = np.linspace(-4, 4, x1_n)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\ny = softmax(xx0, xx1, 1)        # ソフトマックス関数の値を計算\n\n\n# R\nx0_n &lt;- 20; x1_n &lt;- 20\nx0 &lt;- seq(from = -4, to = 4, length.out = x0_n)\nx1 &lt;- seq(from = -4, to = 4, length.out = x1_n)\ngrid_x0x1 &lt;- expand_grid(x0, x1)\ny_vec &lt;- softmax(grid_x0x1$x0, grid_x0x1$x1, 1)\ny &lt;- array(y_vec, dim = c(x0_n * x1_n, 3))\n\nPythonでは，yは行数x0_n, 列数x1_nの行列となるが，Rではそうはならない．各値の計算結果がベクトルとなって出力されてしまう．\n\nhead(y_vec, 5)\n\n[1] 0.006648354 0.006625293 0.006590463 0.006538096 0.006459892\n\n\nこのベクトルは，(y0[1], y0[2], y0[3], ..., y0[400], y1[1], y1[2], ...)のような並びとなっているので，\\(400 \\times 3\\)の行列に変換しなければならない．1列目に400個のy0，2列目に400個のy1，3列目に400個のy2が並ぶ行列としている．\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(8, 3))\nfor i in range(2):\n  ax = plt.subplot(1, 2, i + 1, projection=\"3d\")\n  ax.plot_surface(\n    xx0, xx1, y[i],\n    rstride=1, cstride=1, alpha=0.3,\n    color=\"blue\", edgecolor=\"black\",\n  )\n  ax.set_xlabel(\"$x_0$\", fontsize=14)\n  ax.set_ylabel(\"$x_1$\", fontsize=14)\n  ax.view_init(40, -125)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1,\n      z = y[,1] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '', theta = -40, phi = 30)\n\n\n\npersp(x = x0, y = x1,\n      z = y[,2] |&gt;\n        matrix(nrow = x0_n, ncol = x1_n, byrow = TRUE),\n      zlab = '', theta = -40, phi = 30)\n\n\n\n\n3Dプロットにはgraphics::persp()関数を用いた．x, y引数にはx0, x1を，z引数には2つの値に対応した行列を指定しなければ描画されない点に注意．\n\n\nリスト 4-5-(9)\nガウス関数 ———\n\n# Python\ndef gauss(mu, sigma, a):\n  # 式4-135\n  y = a * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))\n  return y\n\n\n# R\ngauss &lt;- function(mu, sigma, a, x) {\n  # 式4-135\n  y &lt;- a * exp(-((x - mu) ^ 2) / (2 * sigma ^ 2))\n}\n\nコードの関係上，x引数を追加している．\nグラフ描画 ———\n\n# Python\nx = np.linspace(-4, 4, 100)\nplt.figure(figsize=(4, 4))\nplt.plot(x, gauss(0, 1, 1), \"black\", linewidth=3)\nplt.plot(x, gauss(2, 2, 0.5), \"gray\", linewidth=3)\nplt.xlim(-4, 4)\nplt.ylim(-0.5, 1.5)\nplt.grid()\nplt.show()\n\n\n# R\nx &lt;- seq(from = -4, to = 4, length.out = 100)\nggplot() +\n  geom_line(data    = tibble(a = x, b = gauss(0, 1, 1, x)),   # 平均0，標準偏差1，高さ1\n            mapping = aes(x = a, y = b),\n            color   = 'black') +\n  geom_line(data    = tibble(c = x, d = gauss(2, 2, 0.5, x)), # 平均2，標準偏差2，高さ0.5\n            mapping = aes(x = c, y = d),\n            color   = 'gray') +\n  xlim(-4, 4) + ylim(-0.5, 1.5) +\n  coord_fixed(ratio = 8 / 2) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\n\n第6節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = ls(all.names = TRUE)) \n\n\n\nリスト 4-6-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nガウス関数 ———\n\n# Python\ndef gauss(x0, x1, mu, sigma):\n  x = np.array([x0, x1])\n  # 式4-142\n  a = 1 / (2 * np.pi) * 1 / (np.linalg.det(sigma) ** (1 / 2))\n  # 式4-138\n  inv_sigma = np.linalg.inv(sigma)\n  y = a * np.exp(\n    (-1 / 2) * (x - mu).T @ inv_sigma @ (x - mu))\n  return y\n\n\n# R\ngauss &lt;- function(x0, x1, mu, sigma) {\n  x &lt;- array(c(x0, x1), dim = c(2, 1))\n  # 式4-142\n  a &lt;- 1 / (2 * pi) * 1 / (det(sigma) ^ (1 / 2))\n  # 式4-138\n  inv_sigma &lt;- solve(sigma)\n  y &lt;- a * exp((-1 / 2) * t(x - mu) %*% inv_sigma %*% (x - mu))\n  return(y)\n}\n\n\n\nリスト 4-6-(2)\n\n# Python\nx0, x1 = 2, 1\nmu = np.array([1, 2])               # 平均ベクトル\nsigma = np.array([[1, 0], [0, 1]])  # 共分散行列\ny = gauss(x0, x1, mu, sigma)\nprint(\"y =\", np.round(y, 6))\n\n\n# R\nx0 &lt;- 2; x1 &lt;- 1\nmu &lt;- array(c(1, 2), dim = c(2, 1))\nsigma = array(c(1, 0, 0, 1), dim = c(2, 2))\ny &lt;- gauss(x0, x1, mu, sigma)\ncat('y =', round(y, 6))\n\ny = 0.05855\n\n\n\n\nリスト 4-6-(3)\nパラメータ ———\n\n# Python\nmu = np.array([1, 0.5])             # (A) 平均ベクトル\nsigma = np.array([[2, 1], [1, 1]])  # (B) 共分散行列\nx0_min, x0_max = -3, 3              # x0の計算範囲\nx1_min, x1_max = -3, 3              # x1の計算範囲\n\n\n# R\nmu &lt;- array(c(1, 0.5), dim = c(2, 1))\nsigma &lt;- array(c(2, 1, 1, 1), dim = c(2, 2))\nx0_min &lt;- -3; x0_max &lt;- 3\nx1_min &lt;- -3; x1_max &lt;- 3\n\nデータ生成 ———\n\n# Python\nx0_n, x1_n = 40, 40  # グラフ表示の解像度\nx0 = np.linspace(x0_min, x0_max, x0_n)\nx1 = np.linspace(x1_min, x1_max, x1_n)\nf = np.zeros((x1_n, x0_n))\nfor i0 in range(x0_n):\n  for i1 in range(x1_n):\n    f[i1, i0] = gauss(x0[i0], x1[i1], mu, sigma)\nxx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\n\n\n# R\nx0_n &lt;- 40; x1_n &lt;- 40\nx0 &lt;- seq(from = x0_min, to = x0_max, length.out = x0_n)\nx1 &lt;- seq(from = x1_min, to = x1_max, length.out = x1_n)\nf &lt;- array(0, dim = c(x1_n, x0_n))\nfor (i0 in 1:x0_n) {\n  for (i1 in 1:x1_n) {\n    f[i0, i1] &lt;- gauss(x0[i0], x1[i1], mu, sigma)\n  }\n}\ngrid_x0x1 &lt;- expand_grid(x0, x1)\n\nグラフ描画 ———\n\n等高線表示\n\n\n# Python\nplt.figure(figsize=(7, 3))\nplt.subplot(1, 2, 1)\ncont = plt.contour(xx0, xx1, f, levels=15, colors=\"black\")\nplt.xlabel(\"$x_0$\", fontsize=14)\nplt.ylabel(\"$x_1$\", fontsize=14)\nplt.xlim(x0_min, x0_max)\nplt.ylim(x1_min, x1_max)\nplt.grid()\n\n\n# R\ndf &lt;- grid_x0x1 |&gt;\n  mutate(f = rep(NA, times = n()))\nn &lt;- 1\nfor (i in 1:x0_n) {\n  for (j in 1:x1_n) {\n    df$f[n] &lt;- f[i, j]\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot(aes(x0, x1, z = f)) +\n  geom_contour() +\n  xlim(-2, 3) + ylim(-2, 3) +\n  coord_fixed(ratio = 5 / 5) +\n  labs(x = expression(x[0]), y = expression(x[1])) +\n  theme_minimal()\n\n\n\n\n\nサーフェス表示\n\n\n# Python\nax = plt.subplot(1, 2, 2, projection=\"3d\")\nax.plot_surface(\n  xx0, xx1, f,\n  rstride=2, cstride=2, alpha=0.3, color=\"blue\", edgecolor=\"black\",\n)\nax.set_zticks([0.05, 0.10])\nax.set_xlabel(\"$x_0$\", fontsize=14)\nax.set_ylabel(\"$x_1$\", fontsize=14)\nax.view_init(40, -100)\nplt.show()\n\n\n# R\npersp(x = x0, y = x1, z = f, zlab = '',\n      theta = -25, phi = 35)"
  },
  {
    "objectID": "chapter6.html",
    "href": "chapter6.html",
    "title": "3  教師あり学習 : 分類",
    "section": "",
    "text": "minimize &lt;- function(w_init, x, t, alpha = 0.001, tau = 10000, eps = 0.1) {"
  },
  {
    "objectID": "chapter6.html#準備",
    "href": "chapter6.html#準備",
    "title": "3  教師あり学習 : 分類",
    "section": "準備",
    "text": "準備\nまず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "chapter6.html#内容",
    "href": "chapter6.html#内容",
    "title": "3  教師あり学習 : 分類",
    "section": "内容",
    "text": "内容\n\n第1節\n\nリスト 6-1-(1)\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nNULL\n\nデータ生成 ———\n\n# Python\nnp.random.seed(seed=0)             # 乱数を固定\nX_min, X_max = 0, 2.5              # x の上限と下限（表示用）\nN = 30                             # データ数\ncol = [\"cornflowerblue\", \"gray\"]   # クラス0と1の表示色\nX = np.zeros(N)                    # 空のXを準備\nT = np.zeros(N, dtype=np.uint8)    # 空のTを準備\nprm_s = [0.4, 0.8]                 # クラス0と1の分布の開始地点\nprm_w = [0.8, 1.6]                 # クラス0と1の分布の幅\nprm_pi = 0.5                       # クラス0の全体に対する比率\nfor n in range(N):\n    r = np.random.rand()\n    T[n] = 0 * (r &lt; prm_pi) + 1 * (r &gt;= prm_pi)          # (A)\n    X[n] = prm_s[T[n]] + np.random.rand() * prm_w[T[n]]  # (B)\n# データ表示\nprint(\"X =\", np.round(X, 2))\nprint(\"T =\", T)\n\n\n# R\nset.seed(0)\nX_min &lt;- 0; X_max &lt;- 2.5\nN &lt;- 30\ncol &lt;- c('cornflowerblue', 'gray')\nX &lt;- rep(0, times = N)\nt &lt;- rep(0, times = N)\nprm_s &lt;- c(0.4, 0.8)\nprm_w = c(0.8, 1.6)\nprm_pi &lt;- 0.5\nfor (n in 1:N) {\n  r &lt;- runif(1)\n  t[n] &lt;- 0 * (r &lt; prm_pi) + 1 * (r &gt;= prm_pi)\n  X[n] &lt;- prm_s[t[n] + 1] + runif(1) * prm_w[t[n] + 1]\n}\n\n\n\nX = 1.22 0.86 1.12 2.31 1.81 0.56 0.95 1.02 0.97 1.41 2.3 0.92 0.61 0.41 1.1 0.79 1.59 1.06 2.07 0.98 1.06 2.05 1.65 0.84 0.99 1.56 1.5 0.46 0.65 1.86\n\n\nT = 1 0 1 1 1 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 1 1 0 1 1 0 0 1\n\n\n\n\nリスト 6-1-(2)\nデータ分布表示 ———\n\n# Python\ndef show_data1d(x, t):\n    for k in range(2):  # (A) k=0、1 のループ\n        plt.plot(       # (B) 分布を表示\n            x[t == k], t[t == k], col[k],\n            alpha=0.5, linestyle=\"none\", marker=\"o\",\n        )\n    plt.xticks(np.arange(0, 3, 0.5))\n    plt.yticks([0, 1])\n    plt.xlim(X_min, X_max)\n    plt.ylim(-0.5, 1.5)\n\n\n# R\nshow_data1d &lt;- function(x, t) {\n  df &lt;- tibble(x = x, t = t)\n  p &lt;- df |&gt;\n    ggplot() +\n    geom_point(aes(x = x, y = as.factor(t),\n                   color = as.factor(t)))\n  return(p)\n}\n\nメイン ———\n\n# Python\nfig = plt.figure(ﬁgsize=(3, 3))\nshow_data1d(X, T)\nplt.grid()\nplt.show()\n\n\n# R\nshow_data1d(X, t) +\n  labs(x = element_blank(), y = element_blank()) +\n  xlim(X_min, X_max) +\n  coord_fixed(ratio = abs(X_min - X_max) / 2) +\n  labs(x = '質量xg', y = 'ラベルt') +\n  theme(legend.position = 'none')\n\n\n\n\n\n\nリスト 6-1-(3)\nロジスティック回帰モデル ———\n\n# Python\ndef logistic(x, w):\n    y = 1 / (1 + np.exp(-(w[0] * x + w[1])))  # 式6-10\n    return y\n\n\n# R\nlogistic &lt;- function(x, w) {\n  y &lt;- 1 / (1 + exp(-(w[1] * x + w[2])))\n  return(y)\n}\n\n\n\nリスト 6-1-(4)\nロジスティック回帰モデルの表示 ———\n\n# Python\ndef show_logistic(w):\n    x = np.linspace(X_min, X_max, 100)\n    y = logistic(x, w)\n    plt.plot(x, y, \"gray\", linewidth=4)\n    # 決定境界\n    i = np.min(np.where(y &gt; 0.5))     # (A)\n    boundary = (x[i - 1] + x[i]) / 2  # (B)\n    plt.plot([boundary, boundary], [-0.5, 1.5], \"black\", linestyle=\"--\")\n    return boundary\n\n\n# R\nshow_logistic &lt;- function(w) {\n  x &lt;- seq(X_min, X_max, length.out = 100)\n  y &lt;- logistic(x, w)\n  df &lt;- tibble(x = x, y = y) |&gt;\n    mutate(id = 1:n())\n  p &lt;- df |&gt;\n    ggplot() +\n    geom_line(aes(x = x, y = y),\n              color = 'gray')\n  i &lt;- df |&gt;\n    filter(y &gt; 0.5) |&gt;\n    filter(y == min(y))\n  boundary &lt;- (x[i$id - 1] + x[i$id]) / 2\n  p &lt;- p +\n    geom_vline(xintercept = boundary, linetype = 'dashed')\n  return(list(p = p, boundry = boundary))\n}\n\nテスト ———\n\n# Python\nw = np.array([8, -10])\nb = show_logistic(w)\nprint(f'decision boundary = {b}')\nplt.grid()\nplt.show()\n\n\n# R\nw &lt;- c(8, -10)\nb &lt;- show_logistic(w)\ncat('dicision boundary =', b$boundry)\nplot(b$p)\n\n\n\ndicision boundary = 1.25\n\n\n\n\n\n\n\nリスト 6-1-(5)\n平均交差エントロピー誤差 ———\n\n# Python\ndef cee_logistic(w, x, t):\n    y = logistic(x, w)\n    # 式6-16の計算\n    cee = 0\n    for n in range(len(y)):\n        cee = cee - (t[n] * np.log(y[n]) + (1 - t[n]) * np.log(1 - y[n]))\n    cee = cee / N\n    return cee\n\n\n# R\ncee_logistic &lt;- function(w, x, t) {\n  y &lt;- logistic(x, w)\n  cee &lt;- 0\n  for (n in 1:length(y)) {\n    cee &lt;- cee - (t[n] * log(y[n]) + (1 - t[n]) * log(1 - y[n]))\n  }\n  cee &lt;- cee / N\n  return(cee)\n}\n\nテスト ———\n\n# Python\nw = np.array([1, 1])\ncee = cee_logistic(w, X, T)\nprint(f\"CEE = {cee:.6f}\")\n\n\n# R\nw &lt;- c(1, 1)\ncee &lt;- cee_logistic(w, X, t)\ncat('CEE =', round(cee, 6))\n\nCEE = 1.093926\n\n\n\n\nリスト 6-1-(6)\n平均交差エントロピー誤差の計算 ———\n\n# Python\nw0_n, w1_n = 80, 80  # 等高線表示の解像度\nw0_min, w0_max = 0, 15\nw1_min, w1_max = -15, 0\nw0 = np.linspace(w0_min, w0_max, w0_n)\nw1 = np.linspace(w1_min, w1_max, w1_n)\nC = np.zeros((w1_n, w0_n))\nfor i0 in range(w0_n):\n    for i1 in range(w1_n):\n        w = np.array([w0[i0], w1[i1]])\n        C[i1, i0] = cee_logistic(w, X, T)  # CEEを計算\nww0, ww1 = np.meshgrid(w0, w1)  # 描画用座標の作成\n\n\n# R\nw0_n &lt;- 80; w1_n &lt;- 80\nw0_min &lt;- 0; w0_max &lt;- 15\nw1_min &lt;- -15; w1_max &lt;- 0\nw0 &lt;- seq(w0_min, w0_max, length.out = w0_n)\nw1 &lt;- seq(w1_min, w1_max, length.out = w1_n)\nC &lt;- array(0, dim = c(w1_n, w0_n))\nfor (i0 in 1:w0_n) {\n  for (i1 in 1:w1_n) {\n    w &lt;- c(w0[i0], w1[i1])\n    C[i0, i1] &lt;- cee_logistic(w, X, t)\n  }\n}\ngrid_w0w1 &lt;- expand_grid(w0, w1)\n\nグラフ描画 ———\n\n# Python\nplt.ﬁgure(ﬁgsize=(12, 5))\nplt.subplots_adjust(wspace=0.5)\n\n\n# R\nNULL\n\n\nサーフェス表示\n\n\n# Python\nax = plt.subplot(1, 2, 1, projection=\"3d\")\nax.plot_surface(\n    ww0, ww1, C,\n    color=\"blue\", edgecolor=\"black\", rstride=10, cstride=10, alpha=0.3,\n)\nax.set_xlabel(\"$w_0$\", fontsize=14)\nax.set_ylabel(\"$w_1$\", fontsize=14)\nax.set_xlim(0, 15)\nax.set_ylim(-15, 0)\nax.set_zlim(0, 8)\nax.view_init(30, -95)\n\n\n# R\npersp(w0, w1, C, theta = -200, phi = 30, lwd = 0.3)\n\n\n\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 2)\ncont = plt.contour(\n    ww0, ww1, C,\n    colors=\"black\", levels=[0.26, 0.4, 0.8, 1.6, 3.2, 6.4],\n)\ncont.clabel(fmt=\"%.2f\", fontsize=8)\nplt.xlabel(\"$w_0$\", fontsize=14)\nplt.ylabel(\"$w_1$\", fontsize=14)\nplt.grid()\nplt.show()\n\n\n# R\ndf &lt;- grid_w0w1 |&gt;\n  mutate(C = rep(NA, times = n()))\nn &lt;- 1\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df$C[n] &lt;- C[i, j]\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot() +\n  geom_contour(aes(w0, w1, z = C)) +\n  labs(x = element_blank(), y = element_blank()) +\n  xlim(w0_min, w0_max) + ylim(w1_min, w1_max) +\n  coord_fixed(ratio = (w0_max - w0_min) / (w1_max - w1_min))\n\n\n\n\n\n\nリスト 6-1-(7)\n平均交差エントロピー誤差の微分 ———\n\n# Python\ndef dcee_logistic(w, x, t):\n    y = logistic(x, w)\n    # 式6-32、式6-33の計算\n    dcee = np.zeros(2)\n    for n in range(len(y)):\n        dcee[0] = dcee[0] + (y[n] - t[n]) * x[n]\n        dcee[1] = dcee[1] + (y[n] - t[n])\n    dcee = dcee / N\n    return dcee\n\n\n# R\ndcee_logistic &lt;- function(w, x, t) {\n  y &lt;- logistic(x, w)\n  dcee &lt;- rep(0, times = 2)\n  for (n in 1:length(y)) {\n    dcee[1] &lt;- dcee[1] + (y[n] - t[n]) * x[n]\n    dcee[2] &lt;- dcee[2] + (y[n] - t[n])\n  }\n  dcee &lt;- dcee / N\n  return(dcee)\n}\n\nテスト ———\n\n# Python\nw = np.array([1, 1])\ndcee = dcee_logistic(w, X, T)\nprint(\"dCEE =\", np.round(dcee, 6))\n\n\n# R\nw &lt;- c(1, 1)\ndcee &lt;- dcee_logistic(w, X, t)\ncat('dCEE =', round(dcee, 6))\n\n\n\ndCEE = 0.338119 0.426262\n\n\n\n\nリスト 6-1-(8)\n\n# Python\nfrom scipy.optimize import minimize\n\n\n# R\nNULL\n\nロジスティック回帰モデルのパラメータ最適化\n\n# Python\ndef fit_logistic(w_init, x, t):\n    res = minimize(  # (A)\n        cee_logistic, w_init, args=(x, t),\n        jac=dcee_logistic, method=\"CG\",\n    )\n    return res.x\n\n\n# R\nfit_logistic &lt;- function(w_init) {\n  res &lt;- optim(w_init,\n               fn = function(w) {\n                 y &lt;- logistic(X, w)\n                 cee &lt;- 0\n                 for (n in 1:length(y)) {\n                   cee &lt;- cee - (t[n] * log(y[n]) + (1 - t[n]) * log(1 - y[n]))\n                 }\n                 cee &lt;- cee / N\n                 return(cee)\n               },\n               method = 'CG')\n  return(res$par)\n}\n\nメイン ———\n\n# Python\nw_init = np.array([1.0, -1.0])  # wの初期値\nw = fit_logistic(w_init, X, T)  # wを計算\ncee = cee_logistic(w, X, T)     # CEEを計算\n\n\n# R\nw_init &lt;- c(1, -1)\nw &lt;- fit_logistic(w_init)\ncee &lt;- cee_logistic(w_init, X, t)\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(3, 3))\nboundary = show_logistic(w)\nshow_data1d(X, T)\nplt.grid()\nplt.show()\n\n\n# R\nboundary &lt;- show_logistic(w)\nboundary$p +\n  geom_point(data    = tibble(x = X, t = t),\n             mapping = aes(x = x, y = t,\n                           color = as.factor(t))) +\n  xlim(X_min, X_max) +\n  coord_fixed(ratio = abs(X_max - X_min) / 1) +\n  labs(x = '質量xg', y = 'ラベルt') +\n  scale_y_continuous(breaks = c(0, 1),\n                     labels = c(0, 1)) +\n  theme(legend.position = 'none')\n\n\n\n\n結果表示 ———\n\n# Python\nprint(f\"w0 = {w[0]:.2f}, w1 = {w[1]:.2f}\")\nprint(f\"CEE = {cee:.2f}\")\nprint(f\"Boundary = {boundary:.2f} g\")\n\n\n# R\ncat('w0 =', w[1] |&gt; round(2), 'w1 =', w[2] |&gt; round(2))\ncat('CEE =', cee |&gt; round(2))\ncat('Boundary =', boundary$boundry |&gt; round(2), 'g')\n\n\n\nw0 = 4.48 w1 = -5.33\n\n\nCEE = 0.53\n\n\nBoundary = 1.2 g\n\n\n\n\n\n第2節\n\nリセット\n\nrm(list = ls(all.names = TRUE))\n\n\n\nリスト 6-2-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nデータ生成 ———\n\n# Python\nnp.random.seed(seed=1)  # 乱数を固定\nN = 100                 # データの数\nK = 3                   # 分布の数\nT3 = np.zeros((N, 3), dtype=int)\nT2 = np.zeros((N, 2), dtype=int)\nX = np.zeros((N, 2))    # 今までのX0とX1を統合してXで表す\nX0_min, X0_max = -3, 3  # X0 の範囲、表示用\nX1_min, X1_max = -3, 3  # X1 の範囲、表示用\nprm_mu = np.array([[-0.5, -0.5], [0.5, 1.0], [1, -0.5]])  # 分布の中心\nprm_sig = np.array([[0.7, 0.7], [0.8, 0.3], [0.3, 0.8]])  # 分布の分散\nprm_pi = np.array([0.4, 0.8, 1])  # (A) 各分布への割合を決めるパラメータ\n# 3クラス用のラベル\"T3\"を作成\nfor n in range(N):         # 各データのループ\n    r = np.random.rand()\n    for k in range(K):     # (B) 各クラスのループ\n        if r &lt; prm_pi[k]:  # クラスを決める\n            T3[n, k] = 1\n            break          # クラスが決まったらkのループから抜ける\n    for k in range(2):     # (C) 決まったT3に対して2次元のXを作成\n        X[n, k] = \\\n            np.random.randn() * prm_sig[T3[n, :] == 1, k] \\\n            + prm_mu[T3[n, :] == 1, k]\n# 2クラス用のラベル\"T2\"を作成\nT2[:, 0] = T3[:, 0]\n# T3のクラス1と2をまとめてT2のクラス1とする\nT2[:, 1] = T3[:, 1] | T3[:, 2]\n\n\n# R\nset.seed(1)\nN &lt;- 100\nK &lt;- 3\nT3 &lt;- array(0, dim = c(N, 3))\nT2 &lt;- array(0, dim = c(N, 2))\nX &lt;- array(0, dim = c(N, 2))\nX0_min &lt;- -3; X0_max &lt;- 3\nX1_min &lt;- -3; X1_max &lt;- 3\nprm_mu &lt;- array(c(-0.5, 0.5, 1, -0.5, 1.0, -0.5), dim = c(3, 2))\nprm_sig &lt;- array(c(0.7, 0.8, 0.3, 0.7, 0.3, 0.8), dim = c(3, 2))\nprm_pi &lt;- array(c(0.4, 0.8, 1), dim = c(3, 1))\nfor (n in 1:N) {\n  r &lt;- runif(1)\n  for (k in 1:K) {\n    if (r &lt; prm_pi[k]) {\n      T3[n, k] &lt;- 1\n      break\n    }\n  }\n  for (k in c(1, 2)) {\n    X[n, k] &lt;- rnorm(1) * prm_sig[T3[n,] == 1, k] + prm_mu[T3[n,] == 1, k]\n  }\n}\nT2[, 1] &lt;- T3[, 1]\nT2[, 2] &lt;- T3[, 2] | T3[, 3]\n\n\n\nリスト 6-2-(2)\n\n# Python\nprint(X[:5, :])\n\n\n# R\nprint(X[1:5,])\n\n           [,1]       [,2]\n[1,] -0.7283634  0.4308595\n[2,]  1.4785842 -0.2363938\n[3,] -1.1499969 -0.7063043\n[4,]  0.9606251  0.9083835\n[5,]  0.7602972 -1.4181256\n\n\n\n\nリスト 6-2-(3)\n\n# Python\nprint(T2[:5, :])\n\n\n# R\nprint(T2[1:5,])\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n[3,]    1    0\n[4,]    0    1\n[5,]    0    1\n\n\n\n\nリスト 6-2-(4)\n\n# Python\nprint(T3[:5, :])\n\n\n# R\nprint(T3[1:5,])\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    0    1\n[3,]    1    0    0\n[4,]    0    1    0\n[5,]    0    0    1\n\n\n\n\nリスト 6-2-(5)\nデータ表示 ———\n\n# Python\ndef show_data2d(x, t):\n    K = t.shape[1]  # tの列数からクラス数を取得\n    col = [\"gray\", \"white\", \"black\"]\n    for k in range(K):\n        plt.plot(\n            x[t[:, k] == 1, 0], x[t[:, k] == 1, 1], col[k],\n            marker=\"o\", linestyle=\"None\",\n            markeredgecolor=\"black\", alpha=0.8,\n        )\n        plt.xlim(X0_min, X0_max)\n        plt.ylim(X1_min, X1_max)\n\n\n# R\n\nshow_data2d &lt;- function(x, t) {\n  K &lt;- ncol(t)\n  col &lt;- c('gray', 'white', 'black')\n  df &lt;- as.data.frame(x) |&gt;\n    rename(X0 = 'V1',\n           X1 = 'V2') |&gt;\n    mutate(C = rep(NA, times = n()))\n  for (i in 1:nrow(t)) {\n    c &lt;- 1\n    for (j in 1:K) {\n      if (t[i, j] == 1) {\n        df$C[i] &lt;- c\n        break\n      }\n      c &lt;- c + 1\n    }\n  }\n  p &lt;- df |&gt;\n    ggplot() +\n    geom_point(aes(x = X0, y = X1,\n                   fill = as.factor(C)),\n               shape = 21, color = 'black',\n               size = 3) +\n    xlim(X0_min, X0_max) + ylim(X1_min, X1_max) +\n    coord_fixed(ratio = 1) +\n    scale_fill_manual(name = 'クラス',\n                      values = col,\n                      labels = c('1', '2', '3'))\n  return(p)\n}\n\nメイン ———\n\n# Python\nplt.figure(figsize=(7.5, 3))\nplt.subplots_adjust(wspace=0.5)\n# 2クラス用データ表示\nplt.subplot(1, 2, 1)\nshow_data2d(X, T2)\nplt.grid()\n# 3クラス用データ表示\nplt.subplot(1, 2, 2)\nshow_data2d(X, T3)\nplt.xlim(X0_min, X0_max)\nplt.ylim(X1_min, X1_max)\nplt.grid()\nplt.show()\n\n\n# R\nshow_data2d(X, T2)\nshow_data2d(X, T3)"
  },
  {
    "objectID": "chapter7.html",
    "href": "chapter7.html",
    "title": "第7章: ディープラーニング",
    "section": "",
    "text": "まず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "chapter7.html#準備",
    "href": "chapter7.html#準備",
    "title": "4  ニューラルネットワーク・ディープラーニング",
    "section": "準備",
    "text": "準備\nまず，パッケージを読み込む．\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "chapter7.html#内容",
    "href": "chapter7.html#内容",
    "title": "4  ニューラルネットワーク・ディープラーニング",
    "section": "内容",
    "text": "内容"
  },
  {
    "objectID": "chapter5.html#内容",
    "href": "chapter5.html#内容",
    "title": "2  教師あり学習 : 回帰",
    "section": "内容",
    "text": "内容\n\n第1節\n\nリスト 5-1-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nNumpy, Matplotlibに対応するパッケージとして，{tidyverse}を用いる．グラフ描画には{ggplot2}を用いるが，これは{tidyverse}を読み込めば，連動して読み込まれる．\nデータ生成 ———\n\n# Python\nnp.random.seed(seed=1)          # 乱数を固定する\nX_min, X_max = 4, 30            # X の下限と上限（表示用）\nN = 16                          # データの個数\nX = 5 + 25 * np.random.rand(N)  # X の生成\nprm = [170, 108, 0.2]           # データ生成のパラメータ\nT = prm[0] - prm[1] * np.exp(-prm[2] * X) \\\n    + 4 * np.random.randn(N)    # (A) 目標データの生成\nnp.savez(                       # (B) データの保存\n    \"ch5_data.npz\",\n    X=X, T=T, X_min=X_min, X_max=X_max, N=N,\n)\n\n\n# R\nset.seed(1)                                            # 乱数を固定する\nX_min &lt;- 4; X_max &lt;- 30                                # X の下限と上限\nN &lt;- 16                                                # データの個数\nX &lt;- 5 + 25 * runif(N)                                 # X の生成\nprm &lt;- c(170, 108, 0.2)                                # データ生成のパラメタ\nt &lt;- prm[1] - prm[2] * exp(-prm[3] * X) + 4 * rnorm(N) # (A) 目標データの生成\nsave(                                                  # (B) データの保存\n  list = c('X', 't', 'X_min', 'X_max', 'N'),\n  file = 'data/ch5_data.Rdata'\n)\n\nnp.random.seed()では乱数の種を指定している．Rにおけるset.seed()と同じである．\nnp.random.rand()は\\([0, 1]\\)の一様分布から乱数を発生させる関数である．Rではrunif()を用いると同じ操作が可能だ．\n\n\n\n\n\n\n「予約語」と「インデックスの違い」\n\n\n\n予約語\nRにおいて，TはTRUEの予約語であるため，目標データを格納するオブジェクトはtとしている．\nインデックスの違い\nPythonでは，インデックスは0から始まる．例えば，\\(x = [1, 2]\\)というベクトルがあり，このベクトルから1つ目の要素を取り出したい場合はx[0]としなければならない．Rではx[1]であるため，注意されたい．\n\n\n\n\nリスト 5-1-(2)\n\n# Python\nprint(X)\n\n\n# R\nprint(X)\n\n [1] 11.637717 14.303097 19.321334 27.705195 10.042048 27.459742 28.616882\n [8] 21.519945 20.727851  6.544657 10.149364  9.413919 22.175571 14.602593\n[15] 24.246035 17.442481\n\n\n\n\nリスト 5-1-(3)\n\n# Python\nprint(np.round(X, 2))\n\n\n# R\nprint(round(X, 2))\n\n [1] 11.64 14.30 19.32 27.71 10.04 27.46 28.62 21.52 20.73  6.54 10.15  9.41\n[13] 22.18 14.60 24.25 17.44\n\n\n\n\nリスト 5-1-(4)\n\n# Python\nprint(np.round(T, 2))\n\n\n# R\nprint(round(t, 2))\n\n [1] 161.77 162.60 173.78 171.14 153.02 160.70 174.15 168.36 168.23 144.60\n[11] 159.10 155.94 172.40 167.31 169.45 158.74\n\n\n\n\nリスト 5-1-(5)\nデータ表示 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nplt.plot(\n    X,                        # 入力データ\n    T,                        # 目標データ\n    \"cornflowerblue\",         # マーカーを水色にする\n    marker=\"o\",               # マーカーの形をoにする\n    linestyle=\"None\",         # マーカーを線で結ばない\n    markeredgecolor=\"black\",  # マーカーの輪郭を黒にする\n)\nplt.xlim(X_min, X_max)        # x軸の範囲を指定\nplt.grid()                    # グリッドを表示する\nplt.show()\n\n\n# R\nggplot() +\n  geom_point(data    = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color = 'cornflowerblue') +\n  xlim(5, 30) + ylim(140, 180) +\n  coord_fixed(ratio = 25 / 40) +\n  labs(x = '年齢x', y = '身長t') +\n  theme_minimal(base_family = myf)\n\n\n\n\n\n\nリスト 5-1-(6)\n平均二乗誤差(MSE)関数 ———\n\n# Python\ndef mse_line(x, t, w):\n    y = w[0] * x + w[1]          # 式5-4、yを求める\n    mse = np.mean((y - t) ** 2)  # 式5-3、平均二乗誤差\n    return mse\n\n\n# R\nmse_line &lt;- function(x, t, w) {\n  y &lt;- w[1] * x + w[2]     # 式5-4 yを求める\n  mse &lt;- mean((y - t) ^ 2) # 式5-3 平均二乗誤差\n  return(mse)\n}\n\n各w0、w1で平均二乗誤差(MSE)を計算 ———\n\n# Python\nw0_n, w1_n = 100, 100                   # グラフ表示の解像度\nw0_min, w0_max = -25, 25                # w0の計算範囲\nw1_min, w1_max = 120, 170               # w1の計算範囲\nw0 = np.linspace(w0_min, w0_max, w0_n)  # w0を準備\nw1 = np.linspace(w1_min, w1_max, w1_n)  # w1を準備\nJ = np.zeros((w1_n, w0_n))              # MSEを入れる配列Jを準備\n# グリッド状の点(w0, w1)に対してJを計算\nfor i0 in range(w0_n):\n    for i1 in range(w1_n):\n      w = np.array([w0[i0], w1[i1]])\n      J[i1, i0] = mse_line(X, T, w)\nww0, ww1 = np.meshgrid(w0, w1)          # グリッド座標の作成\n\n\n# R\nw0_n &lt;- 100; w1_n &lt;- 100\nw0_min &lt;- -25; w0_max &lt;- 25\nw1_min &lt;- 120; w1_max &lt;- 170\nw0 &lt;- seq(w0_min, w0_max, length.out = w0_n)\nw1 &lt;- seq(w1_min, w1_max, length.out = w1_n)\nJ &lt;- array(0, dim = c(w1_n, w0_n))\nfor (i0 in 1:w0_n) {\n  for (i1 in 1:w1_n) {\n    w &lt;- array(c(w0[i0], w1[i1]), dim = c(1, 2))\n    J[i0, i1] &lt;- mse_line(X, t, w)\n  }\n}\ngrid_w0w1 &lt;- expand_grid(w0, w1)\n\nグラフ描画 ———\n\nサーフェス表示\n\n\n# Python\nplt.figure(figsize=(9.5, 4))\nplt.subplots_adjust(wspace=0.5)\nax = plt.subplot(1, 2, 1, projection=\"3d\")\nax.plot_surface(\n    ww0, ww1, J,\n    rstride=10, cstride=10, alpha=0.3, color=\"blue\", edgecolor=\"black\",\n)\nax.set_xticks([-20, 0, 20])     # x軸の目盛り指定\nax.set_yticks([120, 140, 160])  # y軸の目盛り指定\nax.view_init(20, -60)           # グラフの向きの指定\n\n\n# R\npersp(w0, w1, J, theta = 40, phi = 20, lwd = 0.3,\n      xlab = expression(w[0]), ylab = expression(w[1]), zlab = '')\n\n\n\n\n\n等高線表示\n\n\n# Python\nplt.subplot(1, 2, 2)\ncont = plt.contour(\n    ww0, ww1, J, colors=\"black\",\n    levels=[100, 1000, 10000, 100000],  # 描く等高線の値を指定\n)\ncont.clabel(fmt=\"%d\", fontsize=8)\nplt.grid()\nplt.show()\n\n\n# R\ndf &lt;- grid_w0w1 |&gt;\n  mutate(J = rep(NA, times = n()))\nn &lt;- 1\nfor (i in 1:w0_n) {\n  for (j in 1:w1_n) {\n    df$J[n] &lt;- J[i, j]\n    n &lt;- n + 1\n  }\n}\ndf |&gt;\n  ggplot() +\n  geom_contour(aes(x = w0, y = w1, z = J),\n               color = 'black') +\n  xlim(-25, 25) + ylim(120, 170) +\n  coord_fixed(ratio = 50 / 50) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 5-1-(7)\n平均二乗誤差(MSE)の勾配 ———\n\n# Python\ndef dmse_line(x, t, w):\n    y = w[0] * x + w[1]\n    d_w0 = 2 * np.mean((y - t) * x)  # 式5-9\n    d_w1 = 2 * np.mean(y - t)        # 式5-10\n    return d_w0, d_w1\n\n\n# R\ndmse_line &lt;- function(x, t, w) {\n  y &lt;- w[1] * x + w[2]\n  d_w0 &lt;- 2 * mean((y - t) * x) # 式5-9\n  d_w1 &lt;- 2 * mean(y - t)       # 式5-10\n  return(c(d_w0, d_w1))\n}\n\n\n\nリスト 5-1-(8)\n\n# Python\nw = np.array([10, 165])\nd_w = dmse_line(X, T, w)\nprint(np.round(d_w, 2))\n\n\n# R\nw &lt;- array(c(10, 165), dim = c(1, 2))\nd_w &lt;- dmse_line(X, t, w)\nprint(round(d_w, 2))\n\n[1] 7305.29  359.73\n\n\n\n\nリスト 5-1-(9)\n勾配法 ———\n\n# Python\ndef fit_line_num(x, t, w_init):\n  # パラメータ\n  alpha = 0.001     # 学習率\n  tau_max = 100000  # 繰り返しの最大数\n  eps = 0.1         # 繰り返し計算を終了するための閾値\n  # 勾配法\n  w = np.zeros((tau_max + 1, 2))  # 変化するwの履歴を入れる配列\n  w[0, :] = w_init                # wの初期値をセット\n  for tau in range(tau_max):\n    dmse = dmse_line(x, t, w[tau, :])\n    w[tau + 1, 0] = w[tau, 0] - alpha * dmse[0]  # 式5-6\n    w[tau + 1, 1] = w[tau, 1] - alpha * dmse[1]  # 式5-7\n    if max(np.absolute(dmse)) &lt; eps:  # 終了判定\n       break  # tau のループから抜ける\n  w_final = w[tau + 1, :]   # 最終的に得られたw\n  w_hist = w[: tau + 2, :]  # wの履歴で更新した分を抜き出す\n  return w_final, dmse, w_hist\n\n\n# R\nfit_line_num &lt;- function(x, t, w_init) {\n  # パラメタ\n  alpha &lt;- 0.001    # 学習率\n  tau_max &lt;- 100000 # 繰り返しの最大数\n  eps &lt;- 0.1        # 繰り返し計算を終了するための閾値\n  # 勾配法\n  w &lt;- array(0, dim = c(tau_max + 1, 2)) # 変化するwの履歴を入れる配列\n  w[1,] &lt;- w_init                        # wの初期値をセット\n  for (tau in 1:tau_max) {\n    dmse &lt;- dmse_line(x, t, w[tau,])\n    w[tau + 1, 1] &lt;- w[tau, 1] - alpha * dmse[1] # 式5-6\n    w[tau + 1, 2] &lt;- w[tau, 2] - alpha * dmse[2] # 式5-7\n    if (max(abs(dmse)) &lt; eps) break              # 終了判定, tauのループから抜ける\n  }\n  w_final &lt;- w[tau + 1,]    # 最終的に得られたw\n  w_hist &lt;- w[1:(tau + 2),] # wの履歴で更新した分を抜き出す\n  res &lt;- list(w_final = w_final, dmse = dmse, w_hist = w_hist)\n  return(res)\n}\n\nメイン ———\n\n# Python\n# 勾配法でwを計算\nw_init = np.array([10.0, 165.0])               # wの初期値\nw, dmse, w_history = fit_line_num(X, T, w_init)  # wを計算\nmse = mse_line(X, T, w)                        # MSEを計算\n# 結果表示\nprint(f\"繰り返し回数 {w_history.shape[0]-1}\")\nprint(f\"w0 = {w[0]:.6f}, w1 = {w[1]:.6f}\")\nprint(f\"dMSE = [{dmse[0]:.6f}, {dmse[1]:.6f}]\")\nprint(f\"MSE = {mse:.6f}\")\nprint(f\"SD = {np.sqrt(mse):.6f} cm\")\n\n\n# R\n# 勾配法でwを計算\nw_init &lt;- array(c(10, 165), dim = c(1, 2))                  # wの初期値\nres &lt;- fit_line_num(X, t, w_init)                           # wを計算\nw &lt;- res$w_final; dmse &lt;- res$dmse; w_history &lt;- res$w_hist\nmse &lt;- mse_line(X, t, w)                                    # MSEを計算\ncat('繰り返し数', nrow(w_history))\ncat('w0 =', round(w[1],6), 'w1 =', round(w[2], 6))\ncat('dMSE =', '[', dmse[1], ',', dmse[2], ']')\ncat('MSE =', round(mse, 6))\ncat('SD =', sqrt(mse) |&gt; round(6), 'cm')\n\n\n\n繰り返し数 14410\n\n\nw0 = 0.867801 w1 = 148.3728\n\n\ndMSE = [ -0.004864737 , 0.09999624 ]\n\n\nMSE = 26.47251\n\n\nSD = 5.145144 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(ﬁgsize=(4, 4))\n# 等高線表示\ncont = plt.contour(\n  ww0, ww1, J,     # リスト5-1-(6)で作成済\n  colors=\"black\", levels=[100, 1000, 10000, 100000],\n)\ncont.clabel(fmt=\"%1.0f\", fontsize=8)\n# 等高線の上に、過去のすべてのwをプロット\nplt.plot(  \n  w_history[:, 0], w_history[:, 1], \"gray\",\n  marker=\".\",                        # マーカーの形\n  markersize=10,                     # マーカーの大きさ\n  markeredgecolor=\"cornflowerblue\",  # マーカーの輪郭の色\n)\nplt.grid()\nplt.show()\n\n\n# R\nggplot() +\n  geom_contour(data    = df,\n               mapping = aes(w0, w1, z = J),\n               color = 'black') +\n  geom_point(data = tibble(x_plt = w_history[,1], y_plt = w_history[,2]),\n             mapping = aes(x = x_plt, y = y_plt),\n             color = 'cornflowerblue') +\n  xlim(-25, 25) + ylim(120, 170) +\n  coord_fixed(ratio = 50 / 50) +\n  labs(x = expression(w[0]), y = expression(w[1])) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 5-1-(10)\n線の表示 ———\n\n# Python\ndef show_line(w):\n  x = np.linspace(X_min, X_max, 100)\n  y = w[0] * x + w[1]\n  plt.plot(x, y, \"gray\", linewidth=4)\n\n\n# R\nshow_line &lt;- function(w) {\n  x = seq(X_min, X_max, length.out = 100)\n  y &lt;- w[1] * x + w[2]\n  p &lt;- ggplot() +\n    geom_line(data    = tibble(x_plt = x, y_plt = y),\n              mapping = aes(x = x_plt, y = y_plt),\n              color   = 'gray') +\n    theme_minimal()\n  return(p)\n}\n\nメイン ———\n\n# Python\n# グラフ描画\nplt.figure(figsize=(4, 4))\nshow_line(w)  # w はリスト5-1-(9)で計算済\nplt.plot(\n  X, T, \"cornflowerblue\",\n  marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n)\nplt.xlim(X_min, X_max)\nplt.grid()\nplt.show()\n\n\n# R\nshow_line(w) +\n  geom_point(data    = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color   = 'cornflowerblue') +\n  xlim(5, 30) + ylim(140, 180) +\n  coord_fixed(ratio = 25 / 40) +\n  labs(x = '年齢x', y = '身長t') +\n  theme_minimal(base_family = myf)\n\n\n\n\n\n\nリスト 5-1-(11)\n解析解 ———\n\n# Python\ndef fit_line(x, t):\n  mx = np.mean(x)        # &lt;x&gt;\n  mt = np.mean(t)        # &lt;t&gt;\n  mtx = np.mean(t * x)   # &lt;tx&gt;\n  mxx = np.mean(x * x)   # &lt;x^2&gt;\n  w0 = (mtx - mt * mx) / (mxx - mx ** 2)  # 式5-20\n  w1 = mt - w0 * mx                       # 式5-21\n  w = np.array([w0, w1])\n  return w\n\n\n# R\nfit_line &lt;- function(x, t) {\n  mx &lt;- mean(x)      # &lt;x&gt;\n  mt &lt;- mean(t)      # &lt;t&gt;\n  mtx &lt;- mean(t * x) # &lt;tx&gt;\n  mxx &lt;- mean(x * x) # &lt;x^2&gt;\n  w0 &lt;- (mtx - mt * mx) / (mxx - mx ^ 2) # 式5-20\n  w1 &lt;- mt - w0 * mx                     # 式5-21\n  w &lt;- array(c(w0, w1), dim = c(1, 2))\n  return(w)\n}\n\nメイン ———\n\n# Python\nw = fit_line(X, T)       # 解析解でwを計算\nmse = mse_line(X, T, w)  # MSEを計算\n# 結果表示\nprint(f\"w0 = {w[0]:.2f}, w1 = {w[1]:.2f}\")\nprint(f\"MSE = {mse:.2f}\")\nprint(f\"SD = {np.sqrt(mse):.2f} cm\")\n\n\n# R\nw &lt;- fit_line(X, t)      # 解析解でwを計算\nmse &lt;- mse_line(X, t, w) # MSEを計算\n# 結果表示\ncat('w0 =', round(w[1], 2), 'w1 =', round(w[2], 2))\ncat('MSE =', round(mse, 2))\ncat('SD =', sqrt(mse) |&gt; round(2), 'cm')\n\n\n\nw0 = 0.89 w1 = 147.99\n\n\nMSE = 26.45\n\n\nSD = 5.14 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nshow_line(w)\nplt.plot(\n  X, T, \"cornflowerblue\",\n  marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n)\nplt.xlim(X_min, X_max)\nplt.grid()\nplt.show()\n\n\n# R\nshow_line(w) +\n  geom_point(data    = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color   = 'cornflowerblue') +\n  xlim(5, 30) + ylim(140, 180) +\n  coord_fixed(ratio = 25 / 40) +\n  labs(x = '年齢x', y = '身長t') +\n  theme_minimal(base_family = myf)\n\n\n\n\n\n\n\n第2節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = setdiff(ls(), 'myf'))\n\n\n\n\n\n\n\n注意\n\n\n\nフォントを指定しているmyfオブジェクトは消さない．\n\n\n\n\nリスト 5-2-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nデータのロード ———\n\n# Python\ndata = np.load(\"ch5_data.npz\")\nX0 = data[\"X\"]  # これまでのXをX0とする\nN = data[\"N\"]\nT = data[\"T\"]\n\n\n# R\nload('data/ch5_data.Rdata')\nX0 &lt;- X\n\n2次元データ生成 ———\n\n# Python\nnp.random.seed(seed=1)  # 乱数を固定\nX1 = 23 * (T / 100) ** 2 + 2 * np.random.randn(N)  # X1を生成\nX0_min, X0_max = 5, 30   # X0の下限と上限（表示用）\nX1_min, X1_max = 40, 75  # X1の下限と上限（表示用）\n\n\n# R\nset.seed(1)                             # 乱数を固定\nX1 &lt;- 23 * (t / 100) ^ 2 + 2 * rnorm(N) # X1を生成\nX0_min &lt;- 5; X0_max &lt;- 30               # X0の下限と上限\nX1_min &lt;- 40; X1_max &lt;- 75              # X1の下限と上限\n\n\n\nリスト 5-2-(2)\n\n# Python\nprint(np.round(X0, 2))\nprint(np.round(X1, 2))\nprint(np.round(T, 2))\n\n\n# R\nprint(round(X0, 2))\nprint(round(X1, 2))\nprint(round(t, 2))\n\n\n\n [1] 11.64 14.30 19.32 27.71 10.04 27.46 28.62 21.52 20.73  6.54 10.15  9.41\n[13] 22.18 14.60 24.25 17.44\n\n\n [1] 58.94 61.17 67.79 70.55 54.51 57.75 70.73 66.67 66.24 47.48 61.24 56.71\n[13] 67.11 59.95 68.29 57.87\n\n\n [1] 161.77 162.60 173.78 171.14 153.02 160.70 174.15 168.36 168.23 144.60\n[11] 159.10 155.94 172.40 167.31 169.45 158.74\n\n\n\n\nリスト 5-2-(3)\n2次元データの表示 ———\n\n# Python\ndef show_data2d(ax, x0, x1, t):  # axは3dグラフ描画のため\n  for i in range(len(x0)):\n    ax.plot(  # データ点の下の直線の描画\n      [x0[i], x0[i]],       # 直線の両端のx座標\n      [x1[i], x1[i]],       # 直線の両端のy座標\n      [120, t[i]],          # 直線の両端のz座標\n      color=\"gray\",\n    )\n  ax.plot(      # データ点の描画\n    x0,                       # x座標\n    x1,                       # y座標\n    t,                        # z座標\n    \"cornflowerblue\",         # 色\n    marker=\"o\",               # マーカーの形状\n    linestyle=\"None\",         # 点をつなげる線は描かない\n    markeredgecolor=\"black\",  # マーカーの輪郭の色\n    markersize=6,             # マーカーのサイズ\n    markeredgewidth=0.5,      # マーカーの輪郭線の太さ\n  )\n  ax.view_init(elev=35, azim=-75)  # グラフの向きの指定\n\n\n# R\nNULL\n\nこのリストにおけるRの操作は必要ない．\nメイン ———\n\n# Python\nplt.figure(figsize=(6, 5))\nax = plt.subplot(projection=\"3d\")\nshow_data2d(ax, X0, X1, T)\nplt.show()\n\n\n# R\nscatterplot3d::scatterplot3d(x = X0, y = X1, z = t, type = 'h')\n\n\n\n\nグラフ描画には{scatterplot3d}パッケージを用いた．\n\n\nリスト 5-2-(4)\n面の表示 ———\n\n# Python\ndef show_plane(ax, w):\n    # 表示データの計算\n    x0_n, x1_n = 5, 5\n    x0 = np.linspace(X0_min, X0_max, x0_n)\n    x1 = np.linspace(X1_min, X1_max, x1_n)\n    xx0, xx1 = np.meshgrid(x0, x1)  # グリッド座標の作成\n    y = w[0] * xx0 + w[1] * xx1 + w[2]  # (A) 式5-28\n    # サーフェス表示\n    ax.plot_surface(\n        xx0, xx1, y,\n        rstride=1, cstride=1, alpha=0.3, color=\"blue\", edgecolor=\"black\",\n    )\n\n\n# R\nshow_plane &lt;- function(w) {\n  x0_n &lt;- 5; x1_n &lt;- 5\n  x0 &lt;- seq(X0_min, X0_max, length.out = x0_n)\n  x1 &lt;- seq(X1_min, X1_max, length.out = x1_n)\n  y &lt;- array(0, dim = c(x0_n, x1_n))\n  for (i in 1:x0_n) {\n    for (j in 1:x1_n) {\n      y[i, j] &lt;- w[1] * x0[i] + w[2] * x1[j] + w[3]\n    }\n  }\n  persp(x0, x1, y, theta = 25, phi = 30,\n        xlab = '', ylab = '', zlab = '')\n}\n\n面の平均二乗誤差(MSE)関数 ———\n\n# Python\ndef mse_plane(x0, x1, t, w):\n  y = w[0] * x0 + w[1] * x1 + w[2]  # (A) 式5-28\n  mse = np.mean((y - t) ** 2)\n  return mse\n\n\n# R\nmse_plane &lt;- function(x0, x1, t, w) {\n  y &lt;- w[1] * x0 + w[2] * x1 + w[3]\n  mse &lt;- mean((y - t) ^ 2)\n  return(mse)\n}\n\nメイン ———\n\n# Python\nw = np.array([1.5, 1, 90])\nmse = mse_plane(X0, X1, T, w)  # MSEを計算\n# 結果表示\nprint(f\"SD = {np.sqrt(mse):.2f} cm\")\n\n\n# R\nw &lt;- array(c(1.5, 1, 90), dim = c(1, 3))\nmse &lt;- mse_plane(X0, X1, t, w)\ncat('SD =', sqrt(mse) |&gt; round(2), 'cm')\n\nSD = 17.76 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(6, 5))\nax = plt.subplot(projection=\"3d\")\nshow_plane(ax, w)\nshow_data2d(ax, X0, X1, T)\nplt.show()\n\n\n# R\nshow_plane(w)\n\n\n\n\n\n\nリスト 5-2-(5)\n解析解 ———\n\n# Python\ndef fit_plane(x0, x1, t):  \n    c_tx0 = np.mean(t * x0) - np.mean(t) * np.mean(x0)     # cov(t, x0)\n    c_tx1 = np.mean(t * x1) - np.mean(t) * np.mean(x1)     # cov(t, x1)\n    c_x0x1 = np.mean(x0 * x1) - np.mean(x0) * np.mean(x1)  # cov(x0, x1)\n    v_x0 = np.var(x0)                                      # var(x0)\n    v_x1 = np.var(x1)                                      # var(x1)\n    # 式5-34\n    w0 = (c_tx1 * c_x0x1 - v_x1 * c_tx0) / (c_x0x1 ** 2 - v_x0 * v_x1)\n    # 式5-35\n    w1 = (c_tx0 * c_x0x1 - v_x0 * c_tx1) / (c_x0x1 ** 2 - v_x0 * v_x1)\n    # 式5-36\n    w2 = -w0 * np.mean(x0) - w1 * np.mean(x1) + np.mean(t)\n    w = np.array([w0, w1, w2])\n    return w\n\n\n# R\nfit_plane &lt;- function(x0, x1, t) {\n  c_tx0 &lt;- mean(t * x0) - mean(t) * mean(x0)    # cov(t, x0)\n  c_tx1 &lt;- mean(t * x1) - mean(t) * mean(x1)    # cov(t, x1)\n  c_x0x1 &lt;- mean(x0 * x1) - mean(x0) * mean(x1) # cov(x0, x1)\n  v_x0 &lt;- var(x0)                               # var(x0)\n  v_x1 &lt;- var(x1)                               # var(x1)\n  # 式5-34\n  w0 &lt;- (c_tx1 * c_x0x1 - v_x1 * c_tx0) / (c_x0x1 ^ 2 - v_x0 * v_x1)\n  # 式5-35\n  w1 &lt;- (c_tx0 * c_x0x1 - v_x0 * c_tx1) / (c_x0x1 ^ 2 - v_x0 * v_x1)\n  # 式5-36\n  w2 &lt;- -w0 * mean(x0) - w1 * mean(x1) + mean(t)\n  w &lt;- array(c(w0, w1, w2), dim = c(1, 3))\n  return(w)\n}\n\nメイン ———\n\n# Python\nw = fit_plane(X0, X1, T)       # wを計算\nmse = mse_plane(X0, X1, T, w)  # MSEを計算\n# 結果表示\nprint(f\"w0 = {w[0]:.2f}, w1 = {w[1]:.2f}, w2 = {w[2]:.2f}\")\nprint(f\"SD = {np.sqrt(mse):.2f} cm\")\n\n\n# R\nw &lt;- fit_plane(X0, X1, t)\nmse &lt;- mse_plane(X0, X1, t, w)\ncat('w0 =', round(w[1], 2), 'w1 =', round(w[2], 2), 'w2 =', round(w[3], 2))\ncat('SD =', sqrt(mse) |&gt; round(2), 'cm')\n\n\n\nw0 = 0.17 w1 = 1 w2 = 98.61\n\n\nSD = 2.47 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(6, 5))\nax = plt.subplot(projection=\"3d\")\nshow_plane(ax, w)\nshow_data2d(ax, X0, X1, T)\nplt.show()\n\n\n# R\nshow_plane(w)\n\n\n\n\n\n\n\n第3節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = setdiff(ls(), 'myf'))\n\n\n\n\n\n\n\n注意\n\n\n\nフォントを指定しているmyfオブジェクトは消さない．\n\n\n\n\nリスト 5-3-(1)\n\n# Python\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nデータのロード ———\n\n# Python\ndata = np.load(\"ch5_data.npz\")\nX = data[\"X\"]\nX_min = 0\nX_max = data[\"X_max\"]\nN = data[\"N\"]\nT = data[\"T\"]\n\n\n# R\nload('data/ch5_data.Rdata')\nX_min &lt;- 0\n\n\n\nリスト 5-3-(2)\nガウス関数 ———\n\n# Python\ndef gauss(x, mu, s):\n    y = np.exp(-((x - mu) ** 2) / (2 * s ** 2))  # 式5-64\n    return y\n\n\n# R\ngauss &lt;- function(x, mu, s) {\n  y &lt;- exp(-((x - mu) ^ 2) / (2 * s ^ 2)) # 式5-64\n  return(y)\n}\n\n\n\nリスト 5-3-(3)\nメイン ———\n\n# Python\nM = 4                                # ガウス関数の数\nmu = np.linspace(5, 30, M)           # 平均パラメータ\ns = mu[1] - mu[0]                    # (A) 標準偏差パラメータ\nxb = np.linspace(X_min, X_max, 100)\ny = np.zeros((M, 100))  # M個のガウス関数の値を入れるyを準備\nfor j in range(M):\n    y[j, :] = gauss(xb, mu[j], s)    # ガウス関数\n\n\n# R\nM &lt;- 4                           # ガウス関数の数\nmu &lt;- seq(5, 30, length.out = M) # 平均パラメタ\ns &lt;- mu[2] - mu[1]               # (A) 標準偏差パラメタ\nxb &lt;- seq(X_min, X_max, length.out = 100)\ny &lt;- array(0, dim = c(100, M)) |&gt;\n  data.frame() |&gt;\n  rename(mu1 = 'X1', mu2 = 'X2', mu3 = 'X3', mu4 = 'X4')\nfor (j in 1:M) {\n  y[, j] &lt;- gauss(xb, mu[j], s)  # ガウス関数\n}\n\n{ggplot2}で描画する際のデータには，tidyであることが望ましいため，便宜上yの行数と列数を入れ替えている．\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nfor j in range(M):\n    plt.plot(xb, y[j, :], \"gray\", linewidth=3)\n    plt.xlim(X_min, X_max)\n    plt.ylim(0, 1.2)\n    plt.grid()\n    plt.show()\n\n\n# R\ny |&gt;\n  pivot_longer(cols = 1:ncol(y),\n               names_to = 'mu',\n               values_to = 'gauss') |&gt;\n  mutate(x_plt = rep(xb, each = 4)) |&gt;\n  ggplot() +\n  geom_line(aes(x = x_plt, y = gauss,\n                color = mu)) +\n  xlim(0, 30) + ylim(0, 1) +\n  coord_fixed(ratio = 30 / 1) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal() +\n  theme(legend.position = 'none')\n\n\n\n\npivot_longer()は，wideな(tidyではない)データをlongな(tidyである)データに変換する関数である．cols引数で変換する列を選択し，names_to, values_to引数で変換後の列名を指定している(詳しい解説は宋・矢内『私たちのR』第17章を参照されたい)．\n\n\nリスト 5-3-(4)\n線形基底関数モデル ———\n\n# Python\ndef gauss_func(w, x):\n    m = len(w) - 1        # ガウス関数の数\n    mu = np.linspace(5, 30, m)\n    s = mu[1] - mu[0]\n    # xと同じサイズで要素が0のndarray型を作成\n    y = np.zeros_like(x)\n    # ここでは式5-66ではなく式5-65で実装\n    for j in range(m):\n        y = y + w[j] * gauss(x, mu[j], s)\n    y = y + w[m]  # phiを掛けないパラメータを最後に加える\n    return y\n\n\n# R\ngauss_func &lt;- function(w, x) {\n  m &lt;- length(w) - 1                      # ガウス関数の数 \n  mu &lt;- seq(5, 30, length.out = m)\n  s = mu[2] - mu[1]\n  # xと同じサイズで要素が0のarray型を作成\n  y &lt;- array(0, dim = c(1, length(x)))\n  # ここでは式5-66ではなく式5-65で実装\n  for (j in 1:m) {\n    y &lt;- y + w[j] * gauss(x, mu[j], s)\n  }\n  y &lt;- y + w[m + 1]                       # phiをかけないパラメタを最後に加える\n  return(y)\n}\n\n\n\nリスト 5-3-(5)\n線形基底関数モデルの平均二乗誤差(MSE) ———\n\n# Python\ndef mse_gauss_func(x, t, w):\n    y = gauss_func(w, x)\n    mse = np.mean((y - t) ** 2)\n    return mse\n\n\n# R\nmse_gauss_func &lt;- function(x, t, w) {\n  y &lt;- gauss_func(w, x)\n  mse &lt;- mean((y - t) ^ 2)\n  return(mse)\n}\n\n\n\nリスト 5-3-(6)\n線形基底関数モデルの厳密解 ———\n\n# R\ndef fit_gauss_func(x, t, m):\n    mu = np.linspace(5, 30, m)\n    s = mu[1] - mu[0]\n    n = x.shape[0]\n    # 式5-69 の計画行列phiを作成\n    phi = np.ones((n, m + 1))  # (A) 要素が1のn x (m+1)行列\n    for j in range(m):         # (B) 0～m-1列に値を割り振る\n        phi[:, j] = gauss(x, mu[j], s)\n    # 式5-68 で厳密解のwを計算\n    w = np.linalg.inv(phi.T @ phi) @ phi.T @ t\n    return w\n\n\n# R\nfit_gauss_func &lt;- function(x, t, m) {\n  mu &lt;- seq(5, 30, length.out = m)\n  s &lt;- mu[2] - mu[1]\n  n &lt;- length(x)\n  # 式5-69 の計画行列phiを作成\n  phi &lt;- array(1, dim = c(n, m + 1)) # (A) 要素が1のn x (m + 1)行列\n  for (j in 1:m) {                   # (B) 0 ~ (m - 1)列に値を割り振る\n    phi[, j] &lt;- gauss(x, mu[j], s)\n  }\n  # 式5-68 で厳密解のwを計算\n  w &lt;- solve(t(phi) %*% phi) %*% t(phi) %*% t\n  return(w)\n}\n\n\n\nリスト 5-3-(7)\nガウス基底関数表示 ———\n\n# Python\ndef show_gauss_func(w):\n    x = np.linspace(X_min, X_max, 100)\n    y = gauss_func(w, x)\n    plt.plot(x, y, \"gray\", linewidth=4)\n\n\n# R\nshow_gauss_func &lt;- function(w) {\n  x &lt;- seq(X_min, X_max, length.out = 100)\n  y &lt;- gauss_func(w, x)\n  p &lt;- tibble(x_plt = x, y_plt = y |&gt; as.vector()) |&gt;\n    ggplot() +\n    geom_line(aes(x = x_plt, y = y_plt),\n              color = 'gray') +\n    theme_minimal(base_family = myf)\n  return(p)\n}\n\nメイン ———\n\n# Python\nM = 4                          # ガウス関数の数\nw = fit_gauss_func(X, T, M)    # wを計算\nmse = mse_gauss_func(X, T, w)  # MSEを計算\n# 結果表示\nprint(\"w = \", np.round(w, 2))\nprint(f\"SD = {np.sqrt(mse):.2f} cm\")\n\n\n# R\nM &lt;- 4                         # ガウス関数の数\nw &lt;- fit_gauss_func(X, t, M)   # wを計算\nmse &lt;- mse_gauss_func(X, t, w) # MSEを計算\n# 結果表示\ncat('w =', round(w, 2))\ncat('SD =', sqrt(mse) |&gt; round(2), 'cm')\n\n\n\nw = 3.81 42.59 2.41 49.8 109.95\n\n\nSD = 4.02 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nshow_gauss_func(w)\nplt.plot(\n    X, T, \"cornflowerblue\", \n    marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n)\nplt.xlim(X_min, X_max)\nplt.grid()\nplt.show()\n\n\n# R\nshow_gauss_func(w) +\n  geom_point(data    = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color   = 'cornflowerblue') +\n  xlim(0, 30) + ylim(120, 180) +\n  coord_fixed(ratio = 30 / 60) +\n  labs(x = '年齢x', y = '身長t')\n\n\n\n\n\n\nリスト 5-3-(8)\n\n# Python\nM = [2, 4, 7, 9]                    # 調べるMの値\nplt.figure(figsize=(10, 2.5))\nplt.subplots_adjust(wspace=0.3)\nfor i in range(len(M)):\n    plt.subplot(1, len(M), i + 1)\n    w = fit_gauss_func(X, T, M[i])  # wを計算\n    mse = mse_gauss_func(X, T, w)   # MSEを計算\n    # グラフ描画\n    show_gauss_func(w)  # 線形基底関数\n    plt.plot(           # データ点\n        X, T, \"cornflowerblue\",\n        marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n    )\n    plt.title(f\"M={M[i]:d}, SD={np.sqrt(mse):.2f}\")\n    plt.xlim(X_min, X_max)\n    plt.ylim(120, 180)\n    plt.grid()\nplt.show()\n\n\n# R\nM &lt;- c(2, 4, 7, 9)                # 調べるMの値\nfor (i in 1:length(M)) {\n  w &lt;- fit_gauss_func(X, t, M[i]) # wを計算\n  mse &lt;- mse_gauss_func(X, t, w)  # MSEを計算\n  p &lt;- show_gauss_func(w) +\n    geom_point(data    = tibble(x_plt = X, y_plt = t),\n               mapping = aes(x = x_plt, y = y_plt),\n               color   = 'cornflowerblue') +\n    xlim(0, 30) + ylim(120, 180) +\n    coord_fixed(ratio = 30 / 60) +\n    labs(x = element_blank(), y = element_blank(),\n         title = paste('SD =', sqrt(mse) |&gt; round(2)\n                       |&gt; as.character(), 'cm'))\n  plot(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nリスト 5-3-(9)\nメイン ———\n\n# Python\nM = range(2, 10)\nsd = np.zeros(len(M))\nfor i in range(len(M)):\n    w = fit_gauss_func(X, T, M[i])            # wを計算\n    sd[i] = np.sqrt(mse_gauss_func(X, T, w))  # SDを計算\n\n\n# R\nM &lt;- 2:9\nsd &lt;- rep(0, length(M))\nfor (i in 1:length(M)) {\n  w &lt;- fit_gauss_func(X, t, M[i])        # wを計算\n  sd[i] &lt;- sqrt(mse_gauss_func(X, t, w)) # SDを計算\n}\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(5, 4))\nplt.plot(M, sd, \"cornflowerblue\", marker=\"o\", markeredgecolor=\"black\")\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = M, y_plt = sd) |&gt;\n  ggplot() +\n  geom_line(aes(x = x_plt, y = y_plt),\n            color = 'cornflowerblue') +\n  geom_point(aes(x = x_plt, y = y_plt),\n             fill = 'cornflowerblue',\n             color = 'black',\n             shape = 21) +\n  xlim(2, 9) + ylim(3.00, 4.5) +\n  coord_fixed(ratio = 7 / (4.5 - 3.00)) +\n  scale_x_continuous(breaks = c(2:9),\n                     labels = c(2:9)) +\n  labs(x = 'M', y = 'SD') +\n  theme_minimal()\n\n\n\n\n\n\nリスト 5-3-(10)\n訓練データとテストデータに分割———\n\n# Python\nsplit = int(N / 4)  # 分割するインデックス\nX_test = X[:split]\nT_test = T[:split]\nX_train = X[split:]\nT_train = T[split:]\n\n\n# R\nsplit &lt;- N / 4\nX_test &lt;- X[1:split]\nT_test &lt;- t[1:split]\nX_train &lt;- X[(split+1):length(X)]\nT_train &lt;- t[(split+1):length(t)]\n\nメイン ———\n\n# Python\nM = [2, 4, 7, 9]  # 調べるMの値\nplt.figure(figsize=(10, 2.5))\nplt.subplots_adjust(wspace=0.3)\nfor i in range(len(M)):\n    w = fit_gauss_func(X_train, T_train, M[i])       # wを計算\n    sd = np.sqrt(mse_gauss_func(X_test, T_test, w))  # SDを計算\n    # グラフ描画\n    plt.subplot(1, len(M), i + 1)\n    show_gauss_func(w)  # 線形基底関数\n    plt.plot(           # 訓練データ\n        X_train, T_train, \"white\",\n        marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\", \n        label=\"training\",\n    )\n    plt.plot(           # テストデータ\n        X_test, T_test, \"cornflowerblue\",\n        marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n        label=\"test\",\n    )\n    plt.title(f\"M={M[i]:d}, SD={sd:.2f}\")\n    plt.legend(loc=\"lower right\", fontsize=10, numpoints=1)\n    plt.xlim(X_min, X_max)\n    plt.ylim(120, 180)\n    plt.grid()\nplt.show()\n\n\n# R\nM &lt;- c(2, 4, 7, 9)\nfor (i in 1:length(M)) {\n  w &lt;- fit_gauss_func(X_train, T_train, M[i])\n  sd &lt;- sqrt(mse_gauss_func(X_test, T_test, w))\n  p &lt;- show_gauss_func(w) +\n    geom_point(data    = tibble(x_plt = X_train, y_plt = T_train),\n               mapping = aes(x = x_plt, y = y_plt),\n               fill    = 'white',\n               color   = 'black',\n               shape   = 21) +\n    geom_point(data    = tibble(x_plt = X_test, y_plt = T_test),\n               mapping = aes(x = x_plt, y = y_plt),\n               fill    = 'cornflowerblue',\n               color   = 'black',\n               shape   = 21) +\n    xlim(0, 30) + ylim(120, 180) +\n    coord_fixed(ratio = 30 / 60) +\n    labs(x = element_blank(), y = element_blank())\n  plot(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nリスト 5-3-(11)\nメイン ———\n\n# Python \nM = range(2, 10)  # 調べるMの値、2から9\nsd_train = np.zeros(len(M))\nsd_test = np.zeros(len(M))\nfor i in range(len(M)):\n    # wを計算\n    w = fit_gauss_func(X_train, T_train, M[i])\n    # 訓練データのSDを計算\n    sd_train[i] = np.sqrt(mse_gauss_func(X_train, T_train, w))\n    # テストデータのSDを計算\n    sd_test[i] = np.sqrt(mse_gauss_func(X_test, T_test, w))\n\n\n# R\nM &lt;- 2:9\nsd_train &lt;- rep(0, length(M))\nsd_test &lt;- rep(0, length(M))\nfor (i in 1:length(M)) {\n  w &lt;- fit_gauss_func(X_train, T_train, M[i])\n  sd_train[i] &lt;- sqrt(mse_gauss_func(X_train, T_train, w))\n  sd_test[i] &lt;- sqrt(mse_gauss_func(X_test, T_test, w))\n}\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(5, 4))\nplt.plot(  # 訓練データのSD\n    M, sd_train, \"black\",\n    marker=\"o\", linestyle=\"-\", \n    markerfacecolor=\"white\", markeredgecolor=\"black\",\n    label=\"training\",\n)\nplt.plot(  # テストデータのSD\n    M, sd_test, \"cornflowerblue\",\n    marker=\"o\", linestyle=\"-\",\n    markeredgecolor=\"black\",\n    label=\"test\",\n)\nplt.legend(loc=\"upper left\", fontsize=10)\nplt.ylim(0, 12)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(M, M),\n       y_plt = c(sd_train, sd_test),\n       train_test = rep(c('training', 'test'), each = length(M))) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt)) +\n  geom_line(aes(color = train_test)) +\n  geom_point(aes(fill = train_test),\n             color = 'black', shape = 21) +\n  xlim(2, 9) + ylim(1, 10) +\n  coord_fixed(ratio = 7 / 9) +\n  scale_color_discrete(name = element_blank()) +\n  scale_fill_discrete(name = element_blank()) +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 5-3-(12)\nK 分割交差検証 ———\n\n# Python\ndef kfold_gauss_func(x, t, m, k):\n    n = x.shape[0]\n    mse_train = np.zeros(k)\n    mse_test = np.zeros(k)\n    for i in range(0, k):\n        # 訓練データとテストデータに分割\n        # (A) テストデータのインデックス\n        i_test = np.fmod(range(n), k)\n        x_test = x[i_test == i]   # テストデータ x\n        t_test = t[i_test == i]   # テストデータ t\n        x_train = x[i_test != i]  # 訓練データ x\n        t_train = t[i_test != i]  # 訓練データ t\n        # wを訓練データで決める\n        w = fit_gauss_func(x_train, t_train, m)\n        # 訓練データのMSEを計算\n        mse_train[i] = mse_gauss_func(x_train, t_train, w)\n        # テストデータのMSEを計算\n        mse_test[i] = mse_gauss_func(x_test, t_test, w)\n    return mse_train, mse_test\n\n\n# R\nkfold_gauss_func &lt;- function(x, t, m, k) {\n  n &lt;- length(x)\n  mse_train &lt;- rep(0, times = k)\n  mse_test &lt;- rep(0, times = k)\n  for (i in 1:k) {\n    i_test &lt;- 1:n %% k\n    x_test &lt;- x[i_test == (i - 1)] # Rのインデックスの都合上(i - 1)\n    t_test &lt;- t[i_test == (i - 1)] \n    x_train &lt;- x[i_test != (i - 1)]\n    t_train &lt;- t[i_test != (i - 1)]\n    w &lt;- fit_gauss_func(x_train, t_train, m)\n    mse_train[i] &lt;- mse_gauss_func(x_train, t_train, w)\n    mse_test[i] &lt;- mse_gauss_func(x_test, t_test, w)\n  }\n  res &lt;- list(mse_train = mse_train, mse_test = mse_test)\n  return(res)\n}\n\nRのインデックスの都合上，i - 1としている．\n\n\nリスト 5-3-(13)\n\n# Python\nnp.fmod(range(10), 5)\n\n\n# R\n(0:9 %% 5)\n\n [1] 0 1 2 3 4 0 1 2 3 4\n\n\nRでmodの計算をするには，%%を用いるとよい．\n\n\nリスト 5-3-(14)\n\n# Python\nM = 4\nK = 4\nkfold_gauss_func(X, T, M, K)\n\n\n# R\nM &lt;- 4\nK &lt;- 4\nkfold_gauss_func(X, t, M, K)\n\n$mse_train\n[1] 12.17729 19.10162 10.81234 12.22931\n\n$mse_test\n[1] 43.197351  9.237864 71.959691 49.144541\n\n\n\n\nリスト 5-3-(15)\nメイン ———\n\n# Python\nM = range(2, 8)\nK = 16\nCv_Gauss_train = np.zeros((K, len(M)))\nCv_Gauss_test = np.zeros((K, len(M)))\nfor i in range(0, len(M)):\n    Cv_Gauss_train[:, i], Cv_Gauss_test[:, i] \\\n        = kfold_gauss_func(X, T, M[i], K)  # k分割交差検定\n# 訓練データの各分割におけるMSEの平均、の平方根\nsd_Gauss_train = np.sqrt(np.mean(Cv_Gauss_train, axis=0))\n# テストデータの各分割におけるMSEの平均、の平方根\nsd_Gauss_test = np.sqrt(np.mean(Cv_Gauss_test, axis=0))\nnp.save(\"ch5_Gauss_test.npy\", sd_Gauss_test)  # 結果の保存\n\n\n# R\nM &lt;- 2:7\nK &lt;- 16\nCv_Gauss_train &lt;- array(0, dim = c(K, length(M)))\nCv_Gauss_test &lt;- array(0, dim = c(K, length(M)))\nfor (i in 1:length(M)) {\n  res &lt;- kfold_gauss_func(X, t, M[i], K)\n  Cv_Gauss_train[, i] &lt;- res$mse_train\n  Cv_Gauss_test[, i] &lt;- res$mse_test\n}\nsd_Gauss_train &lt;- apply(Cv_Gauss_train, 2, mean) |&gt;\n  sqrt()\nsd_Gauss_test &lt;- apply(Cv_Gauss_test, 2, mean) |&gt;\n  sqrt()\nsave(list = 'sd_Gauss_test', file = 'data/ch5_Gauss_test.Rdata')\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(5, 4))\n# 訓練データに対するMSEのグラフ\nplt.plot(\n    M, sd_Gauss_train, \"black\",\n    marker=\"o\", linestyle=\"-\", \n    markerfacecolor=\"white\", markeredgecolor=\"black\",\n    label=\"training\",\n)\n# テストデータに対するMSEのグラフ\nplt.plot(\n    M, sd_Gauss_test, \"cornflowerblue\",\n    marker=\"o\", linestyle=\"-\",\n    markeredgecolor=\"black\",\n    label=\"test\",\n)\nplt.legend(loc=\"upper left\", fontsize=10)\nplt.ylim(0, 20)\nplt.grid()\nplt.show()\n\n\n# R\ntibble(x_plt = c(M, M),\n       y_plt = c(sd_Gauss_test, sd_Gauss_train),\n       col   = rep(c('test', 'train'), each = length(M))) |&gt;\n  ggplot() +\n  geom_line(aes(x = x_plt, y = y_plt,\n                color = col)) +\n  geom_point(aes(x = x_plt, y = y_plt,\n                 fill = col),\n             color = 'black', shape = 21) +\n  xlim(2, 7) + ylim(3, 9) +\n  coord_fixed(ratio = 5 / 6) +\n  labs(x = element_blank(), y = element_blank()) +\n  scale_color_discrete(name = element_blank(),\n                       label = c('test', 'training')) +\n  scale_fill_discrete(name = element_blank(),\n                      label = c('test', 'training')) +\n  theme_minimal()\n\n\n\n\n\n\nリスト 5-3-(16)\nメイン ———\n\n# Python\nM = 3  # 最適なM=3に設定\nw = fit_gauss_func(X, T, M)  # 全データでwを計算\nsd = np.sqrt(mse_gauss_func(X, T, w))  # SDを計算\n# 結果表示\nprint(f\"SD = {sd:.2f} cm\")\n\n\n# R\nM &lt;- 2 # 最適なM=2に設定\nw &lt;- fit_gauss_func(X, t, M)\nsd &lt;- sqrt(mse_gauss_func(X, t, w))\ncat('SD =', round(sd, 2))\n\nSD = 4.11\n\n\nリスト 5-3-(15)より，今回の最適なMは2であることがわかるのでM = 2としている．\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nshow_gauss_func(w)\nplt.plot(\n    X, T, \"cornflowerblue\",\n    marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n)\nplt.xlim(X_min, X_max)\nplt.grid()\nplt.show()\n\n\nshow_gauss_func(w) +\n  geom_point(data    = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color   = 'cornflowerblue') +\n  xlim(0, 30) + ylim(130, 180) +\n  coord_fixed(ratio = 30 / 50) +\n  labs(x = '年齢x', y = '身長t') +\n  theme_minimal(base_family = myf)\n\n\n\n\n\n\n\n第4節\n\nリセット\n\n# Python\n%reset\n\n\n# R\nrm(list = setdiff(ls(), 'myf'))\n\n\n\n\n\n\n\n注意\n\n\n\nフォントを指定しているmyfオブジェクトは消さない．\n\n\n\n\nリスト 5-4-(1)\n\n# Python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# R\nNULL\n\nデータのロード ———\n\n# Python\ndata = np.load(\"ch5_data.npz\")\nX = data[\"X\"]\nX_min = 0\nX_max = data[\"X_max\"]\nN = data[\"N\"]\nT = data[\"T\"]\n\n\n# R\nload('data/ch5_data.Rdata')\nX_min &lt;- 0\n\nモデル A ———\n\n# Python\ndef model_A(x, w):\n    y = w[0] - w[1] * np.exp(-w[2] * x)  # 式5-71\n    return y\n\n\n# R\nmodel_A &lt;- function(x, w) {\n  y &lt;- w[1] - w[2] * exp(-w[3] * x)\n  return(y)\n}\n\nモデル A 表示 ———\n\n# Python\ndef show_model_A(w):\n    x = np.linspace(X_min, X_max, 100)\n    y = model_A(x, w)\n    plt.plot(x, y, \"gray\", linewidth=4)\n\n\n# R\nshow_model_A &lt;- function(w) {\n  x &lt;- seq(X_min, X_max, length.out = 100)\n  y &lt;- model_A(x, w)\n  p &lt;- tibble(x_plt = x, y_plt = y) |&gt;\n    ggplot() +\n    geom_line(aes(x = x_plt, y = y_plt)) +\n    theme_minimal(base_family = myf)\n  return(p)\n}\n\nモデル A の平均二乗誤差(MSE) ———\n\n# Python\ndef mse_model_A(w, x, t):\n    y = model_A(x, w)\n    mse = np.mean((y - t) ** 2)  # 式5-72\n    return mse\n\n\n# R\nmse_model_A &lt;- function(w, x, t) {\n  y &lt;- model_A(x, w)\n  mse &lt;- mean((y - t) ^ 2)\n  return(mse)\n}\n\n\n\nリスト 5-4-(2)\n\n# Python\nfrom scipy.optimize import minimize\n\n\n# R\nNULL\n\nRの最適化関数にはoptimize()とoptim()がある．最適化したいパラメタが1つの場合は前者を，2つ以上の場合は後者を用いる．今回は，w[1], w[2], w[3]の3つのパラメタを求めたいため，optim()関数を用いる．\nモデル A のパラメータ最適化\n\n# Python\ndef fit_model_A(w_init, x, t):\n    res = minimize(mse_model_A, w_init, args=(x, t), method=\"powell\")\n    return res.x\n\n\n# R\nfit_model_A &lt;- function(w_init) {\n  res &lt;- optim(w_init,\n               fn = function(w) {\n                 y &lt;- model_A(X, w)\n                 mse &lt;- mean((y - t) ^ 2)\n                 return(mse)\n               }, method = 'CG')\n  return(res$par)\n}\n\noptim()関数は，第一引数に求めたいパラメタの初期値を指定し，fn引数に関数を指定する．fn引数に指定する関数は引数を1つにしなければならない．引数を3つ持っているmse_model_A()関数は指定できないため，optim()関数内で改めて関数を定義している．\nまた，パウェルアルゴリズムは実装されていないため，共役勾配法を用いて最適化を行なっている．\n\n\nリスト 5-4-(3)\nメイン ———\n\n# Python\nw_init = np.array([100.0, 0.0, 0.0])  # wの初期値\nw = fit_model_A(w_init, X, T)         # wを計算\nsd = np.sqrt(mse_model_A(w, X, T))    # SDを計算\n果表示\nprint(f\"w0 = {w[0]:.2f}, w1 = {w[1]:.2f}, w2 = {w[2]:.2f}\")\nprint(f\"SD = {sd:.2f} cm\")\n\n\n# R\nw_init &lt;- array(c(100, 0, 0), dim = c(1, 3))\nw &lt;- fit_model_A(w_init)\nsd &lt;- sqrt(mse_model_A(w, x = X, t = t))\ncat('w0 =', round(w[1], 2), 'w1 =', round(w[2], 2), 'w2 =', round(w[3], 2))\ncat('SD =', round(sd, 2), 'cm')\n\n\n\nw0 = 126.25 w1 = -26.25 w2 = -0.02\n\n\nSD = 5.42 cm\n\n\nグラフ描画 ———\n\n# Python\nplt.figure(figsize=(4, 4))\nshow_model_A(w)\nplt.plot(\n  X, T, \"cornflowerblue\",\n  marker=\"o\", linestyle=\"None\", markeredgecolor=\"black\",\n)\nplt.xlim(X_min, X_max)\nplt.grid()\nplt.show()\n\n\n# R\nshow_model_A(w) +\n  geom_point(data = tibble(x_plt = X, y_plt = t),\n             mapping = aes(x = x_plt, y = y_plt),\n             color = 'cornflowerblue') +\n  xlim(0, 30) + ylim(140, 180) +\n  coord_fixed(ratio = 30 / 40) +\n  labs(x = '年齢x', y = '身長t')\n\n\n\n\n教科書とは曲線の形がやや異なるが，データにはフィットしていそうである．\n\n\nリスト 5-4-(4)\n交差検証 モデル A ———\n\n# Python\ndef kfold_model_A(x, t, k):\n    n = len(x)\n    mse_train = np.zeros(k)\n    mse_test = np.zeros(k)\n    for i in range(0, k):\n        # 訓練データとテストデータに分割\n        i_test = np.fmod(range(n), k)\n        x_test = x[i_test == i]\n        t_test = t[i_test == i]\n        x_train = x[i_test != i]\n        t_train = t[i_test != i]\n        # 精度を上げるため\n        # リスト5-4-(3)で得た値を初期値に設定\n        w_init = np.array([169.04, 113.66, 0.22])\n        w = fit_model_A(w_init, x_train, t_train)\n        mse_train[i] = mse_model_A(w, x_train, t_train)\n        mse_test[i] = mse_model_A(w, x_test, t_test)\n    return mse_train, mse_test\n\n\n# R\nkfold_model_A &lt;- function(x, t, k) {\n  n &lt;- length(x)\n  mse_train &lt;- rep(0, times = k)\n  mse_test &lt;- rep(0, times = k)\n  for (i in 1:k) {\n    i_test &lt;- (1:n %% k) + 1\n    x_test &lt;- x[i_test == i]\n    t_test &lt;- t[i_test == i]\n    x_train &lt;- x[i_test != i]\n    t_train &lt;- t[i_test != i]\n    w_init &lt;- array(c(126.25, -26.25, -0.02), dim = c(3, 1))\n    w &lt;- optim(w_init,\n               fn = function(w) {\n                 y &lt;- model_A(x_train, t_train)\n                 mse &lt;- mean((y - t_train) ^ 2)\n                 return(mse)\n               },\n               method = 'CG')\n    mse_train[i] &lt;- mse_model_A(w$par, x = x_train, t = t_train)\n    mse_test[i] &lt;- mse_model_A(w$par, x = x_test, t = t_test)\n  }\n  return(list(mse_train = mse_train, mse_test = mse_test))\n}\n\nメイン ———\n\n# Python\n# model A の交差検定\nK = 16\nCv_A_train, Cv_A_test = kfold_model_A(X, T, K)\nsd_A_test = np.sqrt(np.mean(Cv_A_test))\n# 線形基底関数モデルの交差検定の結果のロード\nsd_Gauss_test = np.load(\"ch5_Gauss_test.npy\")\n# 結果のまとめ\nSDs = np.append(sd_Gauss_test[0:5], sd_A_test)\n# 結果表示\nprint(f\"Gauss(M=3) SD = {sd_Gauss_test[1]:.2f} cm\")\nprint(f\"Model A SD = {sd_A_test:.2f} cm\")\n\n\n# R\nK &lt;- 16\nCv_A_res &lt;- kfold_model_A(X, t, K)\nCv_A_train &lt;- Cv_A_res$mse_train; Cv_A_test &lt;- Cv_A_res$mse_test\nsd_A_test &lt;- sqrt(mean(Cv_A_test))\nload('data/ch5_Gauss_test.Rdata')\nSDs &lt;- append(sd_Gauss_test[1:5], sd_A_test)\ncat('Gauss (M = 3) SD =', sd_Gauss_test[2] |&gt; round(2), 'cm')\ncat('Model A SD =', sd_A_test |&gt; round(2), 'cm')\n\n\n\nGauss (M = 2) SD = 6.36 cm\n\n\nModel A SD = 5.42 cm\n\n\nM = 2を用いたため．\nグラフ描画 ———\n\n# Python\nM = range(6)\nlabel = [\"M=2\", \"M=3\", \"M=4\", \"M=5\", \"M=6\", \"Model A\"]\nplt.figure(figsize=(5, 3))\nplt.bar(\n    M, SDs,facecolor=\"cornflowerblue\", align=\"center\", \n    tick_label=label,\n)\nplt.show()\n\n\n# R\nM &lt;- 1:6\nlabel &lt;- c('M = 2', 'M = 3', 'M = 4', 'M = 5', 'M = 6', 'Model A')\ntibble(x_plt = label, y_plt = SDs) |&gt;\n  ggplot(aes(x = x_plt, y = y_plt)) +\n  geom_bar(stat = 'identity',\n           fill = 'cornflowerblue') +\n  coord_fixed(ratio = 6 / 7) +\n  labs(x = element_blank(), y = 'SD') +\n  theme_minimal()"
  },
  {
    "objectID": "chapter5.html#次元データの表示--",
    "href": "chapter5.html#次元データの表示--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 2次元データの表示 ———-",
    "text": "# 2次元データの表示 ———-"
  },
  {
    "objectID": "chapter5.html#def-show_data2dax-x0-x1-t-axは3dグラフ描画のため",
    "href": "chapter5.html#def-show_data2dax-x0-x1-t-axは3dグラフ描画のため",
    "title": "2  教師あり学習[回帰]",
    "section": "def show_data2d(ax, x0, x1, t): # axは3dグラフ描画のため",
    "text": "def show_data2d(ax, x0, x1, t): # axは3dグラフ描画のため"
  },
  {
    "objectID": "chapter5.html#for-i-in-rangelenx0",
    "href": "chapter5.html#for-i-in-rangelenx0",
    "title": "2  教師あり学習[回帰]",
    "section": "for i in range(len(x0)):",
    "text": "for i in range(len(x0)):"
  },
  {
    "objectID": "chapter5.html#ax.plot-データ点の下の直線の描画",
    "href": "chapter5.html#ax.plot-データ点の下の直線の描画",
    "title": "2  教師あり学習[回帰]",
    "section": "ax.plot( # データ点の下の直線の描画",
    "text": "ax.plot( # データ点の下の直線の描画"
  },
  {
    "objectID": "chapter5.html#x0i-x0i-直線の両端のx座標",
    "href": "chapter5.html#x0i-x0i-直線の両端のx座標",
    "title": "2  教師あり学習[回帰]",
    "section": "[x0[i], x0[i]], # 直線の両端のx座標",
    "text": "[x0[i], x0[i]], # 直線の両端のx座標"
  },
  {
    "objectID": "chapter5.html#x1i-x1i-直線の両端のy座標",
    "href": "chapter5.html#x1i-x1i-直線の両端のy座標",
    "title": "2  教師あり学習[回帰]",
    "section": "[x1[i], x1[i]], # 直線の両端のy座標",
    "text": "[x1[i], x1[i]], # 直線の両端のy座標"
  },
  {
    "objectID": "chapter5.html#ti-直線の両端のz座標",
    "href": "chapter5.html#ti-直線の両端のz座標",
    "title": "2  教師あり学習[回帰]",
    "section": "[120, t[i]], # 直線の両端のz座標",
    "text": "[120, t[i]], # 直線の両端のz座標"
  },
  {
    "objectID": "chapter5.html#colorgray",
    "href": "chapter5.html#colorgray",
    "title": "2  教師あり学習[回帰]",
    "section": "color=“gray”,",
    "text": "color=“gray”,"
  },
  {
    "objectID": "chapter5.html#section",
    "href": "chapter5.html#section",
    "title": "2  教師あり学習 : 回帰",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#ax.plot-データ点の描画",
    "href": "chapter5.html#ax.plot-データ点の描画",
    "title": "2  教師あり学習[回帰]",
    "section": "ax.plot( # データ点の描画",
    "text": "ax.plot( # データ点の描画"
  },
  {
    "objectID": "chapter5.html#x0-x座標",
    "href": "chapter5.html#x0-x座標",
    "title": "2  教師あり学習[回帰]",
    "section": "x0, # x座標",
    "text": "x0, # x座標"
  },
  {
    "objectID": "chapter5.html#x1-y座標",
    "href": "chapter5.html#x1-y座標",
    "title": "2  教師あり学習[回帰]",
    "section": "x1, # y座標",
    "text": "x1, # y座標"
  },
  {
    "objectID": "chapter5.html#t-z座標",
    "href": "chapter5.html#t-z座標",
    "title": "2  教師あり学習[回帰]",
    "section": "t, # z座標",
    "text": "t, # z座標"
  },
  {
    "objectID": "chapter5.html#cornflowerblue-色",
    "href": "chapter5.html#cornflowerblue-色",
    "title": "2  教師あり学習[回帰]",
    "section": "“cornflowerblue”, # 色",
    "text": "“cornflowerblue”, # 色"
  },
  {
    "objectID": "chapter5.html#markero-マーカーの形状",
    "href": "chapter5.html#markero-マーカーの形状",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, # マーカーの形状",
    "text": "marker=“o”, # マーカーの形状"
  },
  {
    "objectID": "chapter5.html#linestylenone-点をつなげる線は描かない",
    "href": "chapter5.html#linestylenone-点をつなげる線は描かない",
    "title": "2  教師あり学習[回帰]",
    "section": "linestyle=“None”, # 点をつなげる線は描かない",
    "text": "linestyle=“None”, # 点をつなげる線は描かない"
  },
  {
    "objectID": "chapter5.html#markeredgecolorblack-マーカーの輪郭の色",
    "href": "chapter5.html#markeredgecolorblack-マーカーの輪郭の色",
    "title": "2  教師あり学習[回帰]",
    "section": "markeredgecolor=“black”, # マーカーの輪郭の色",
    "text": "markeredgecolor=“black”, # マーカーの輪郭の色"
  },
  {
    "objectID": "chapter5.html#markersize6-マーカーのサイズ",
    "href": "chapter5.html#markersize6-マーカーのサイズ",
    "title": "2  教師あり学習[回帰]",
    "section": "markersize=6, # マーカーのサイズ",
    "text": "markersize=6, # マーカーのサイズ"
  },
  {
    "objectID": "chapter5.html#markeredgewidth0.5-マーカーの輪郭線の太さ",
    "href": "chapter5.html#markeredgewidth0.5-マーカーの輪郭線の太さ",
    "title": "2  教師あり学習[回帰]",
    "section": "markeredgewidth=0.5, # マーカーの輪郭線の太さ",
    "text": "markeredgewidth=0.5, # マーカーの輪郭線の太さ"
  },
  {
    "objectID": "chapter5.html#section-1",
    "href": "chapter5.html#section-1",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#ax.view_initelev35-azim-75-グラフの向きの指定",
    "href": "chapter5.html#ax.view_initelev35-azim-75-グラフの向きの指定",
    "title": "2  教師あり学習[回帰]",
    "section": "ax.view_init(elev=35, azim=-75) # グラフの向きの指定",
    "text": "ax.view_init(elev=35, azim=-75) # グラフの向きの指定"
  },
  {
    "objectID": "chapter5.html#メイン--",
    "href": "chapter5.html#メイン--",
    "title": "2  教師あり学習 : 回帰",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize6-5",
    "href": "chapter5.html#plt.figurefigsize6-5",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(6, 5))",
    "text": "plt.figure(figsize=(6, 5))"
  },
  {
    "objectID": "chapter5.html#ax-plt.subplotprojection3d",
    "href": "chapter5.html#ax-plt.subplotprojection3d",
    "title": "2  教師あり学習[回帰]",
    "section": "ax = plt.subplot(projection=“3d”)",
    "text": "ax = plt.subplot(projection=“3d”)"
  },
  {
    "objectID": "chapter5.html#show_data2dax-x0-x1-t",
    "href": "chapter5.html#show_data2dax-x0-x1-t",
    "title": "2  教師あり学習[回帰]",
    "section": "show_data2d(ax, X0, X1, T)",
    "text": "show_data2d(ax, X0, X1, T)"
  },
  {
    "objectID": "chapter5.html#plt.show",
    "href": "chapter5.html#plt.show",
    "title": "2  教師あり学習 : 回帰",
    "section": "plt.show()",
    "text": "plt.show()\nshow_model_A(w)"
  },
  {
    "objectID": "chapter5.html#面の表示--",
    "href": "chapter5.html#面の表示--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 面の表示 ———-",
    "text": "# 面の表示 ———-"
  },
  {
    "objectID": "chapter5.html#def-show_planeax-w",
    "href": "chapter5.html#def-show_planeax-w",
    "title": "2  教師あり学習[回帰]",
    "section": "def show_plane(ax, w):",
    "text": "def show_plane(ax, w):"
  },
  {
    "objectID": "chapter5.html#表示データの計算",
    "href": "chapter5.html#表示データの計算",
    "title": "2  教師あり学習[回帰]",
    "section": "# 表示データの計算",
    "text": "# 表示データの計算"
  },
  {
    "objectID": "chapter5.html#x0_n-x1_n-5-5",
    "href": "chapter5.html#x0_n-x1_n-5-5",
    "title": "2  教師あり学習[回帰]",
    "section": "x0_n, x1_n = 5, 5",
    "text": "x0_n, x1_n = 5, 5"
  },
  {
    "objectID": "chapter5.html#x0-np.linspacex0_min-x0_max-x0_n",
    "href": "chapter5.html#x0-np.linspacex0_min-x0_max-x0_n",
    "title": "2  教師あり学習[回帰]",
    "section": "x0 = np.linspace(X0_min, X0_max, x0_n)",
    "text": "x0 = np.linspace(X0_min, X0_max, x0_n)"
  },
  {
    "objectID": "chapter5.html#x1-np.linspacex1_min-x1_max-x1_n",
    "href": "chapter5.html#x1-np.linspacex1_min-x1_max-x1_n",
    "title": "2  教師あり学習[回帰]",
    "section": "x1 = np.linspace(X1_min, X1_max, x1_n)",
    "text": "x1 = np.linspace(X1_min, X1_max, x1_n)"
  },
  {
    "objectID": "chapter5.html#xx0-xx1-np.meshgridx0-x1-グリッド座標の作成",
    "href": "chapter5.html#xx0-xx1-np.meshgridx0-x1-グリッド座標の作成",
    "title": "2  教師あり学習[回帰]",
    "section": "xx0, xx1 = np.meshgrid(x0, x1) # グリッド座標の作成",
    "text": "xx0, xx1 = np.meshgrid(x0, x1) # グリッド座標の作成"
  },
  {
    "objectID": "chapter5.html#y-w0-xx0-w1-xx1-w2-a-式5-28",
    "href": "chapter5.html#y-w0-xx0-w1-xx1-w2-a-式5-28",
    "title": "2  教師あり学習[回帰]",
    "section": "y = w[0] * xx0 + w[1] * xx1 + w[2] # (A) 式5-28",
    "text": "y = w[0] * xx0 + w[1] * xx1 + w[2] # (A) 式5-28"
  },
  {
    "objectID": "chapter5.html#サーフェス表示",
    "href": "chapter5.html#サーフェス表示",
    "title": "2  教師あり学習[回帰]",
    "section": "# サーフェス表示",
    "text": "# サーフェス表示"
  },
  {
    "objectID": "chapter5.html#ax.plot_surface",
    "href": "chapter5.html#ax.plot_surface",
    "title": "2  教師あり学習[回帰]",
    "section": "ax.plot_surface(",
    "text": "ax.plot_surface("
  },
  {
    "objectID": "chapter5.html#xx0-xx1-y",
    "href": "chapter5.html#xx0-xx1-y",
    "title": "2  教師あり学習[回帰]",
    "section": "xx0, xx1, y,",
    "text": "xx0, xx1, y,"
  },
  {
    "objectID": "chapter5.html#rstride1-cstride1-alpha0.3-colorblue-edgecolorblack",
    "href": "chapter5.html#rstride1-cstride1-alpha0.3-colorblue-edgecolorblack",
    "title": "2  教師あり学習[回帰]",
    "section": "rstride=1, cstride=1, alpha=0.3, color=“blue”, edgecolor=“black”,",
    "text": "rstride=1, cstride=1, alpha=0.3, color=“blue”, edgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#section-2",
    "href": "chapter5.html#section-2",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#面の平均二乗誤差mse関数--",
    "href": "chapter5.html#面の平均二乗誤差mse関数--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 面の平均二乗誤差(MSE)関数 ———-",
    "text": "# 面の平均二乗誤差(MSE)関数 ———-"
  },
  {
    "objectID": "chapter5.html#def-mse_planex0-x1-t-w",
    "href": "chapter5.html#def-mse_planex0-x1-t-w",
    "title": "2  教師あり学習[回帰]",
    "section": "def mse_plane(x0, x1, t, w):",
    "text": "def mse_plane(x0, x1, t, w):"
  },
  {
    "objectID": "chapter5.html#y-w0-x0-w1-x1-w2-a-式5-28",
    "href": "chapter5.html#y-w0-x0-w1-x1-w2-a-式5-28",
    "title": "2  教師あり学習[回帰]",
    "section": "y = w[0] * x0 + w[1] * x1 + w[2] # (A) 式5-28",
    "text": "y = w[0] * x0 + w[1] * x1 + w[2] # (A) 式5-28"
  },
  {
    "objectID": "chapter5.html#mse-np.meany---t-2",
    "href": "chapter5.html#mse-np.meany---t-2",
    "title": "2  教師あり学習[回帰]",
    "section": "mse = np.mean((y - t) ** 2)",
    "text": "mse = np.mean((y - t) ** 2)"
  },
  {
    "objectID": "chapter5.html#return-mse",
    "href": "chapter5.html#return-mse",
    "title": "2  教師あり学習[回帰]",
    "section": "return mse",
    "text": "return mse\nmse_model_A &lt;- function(w, x, t) { y &lt;- model_A(x, w) mse &lt;- mean((y - t) ^ 2) return(mse) }\n\n仮\nmse_model_A_for_optim &lt;- function(x, t) { return( function(par) { y &lt;- model_A(x, par) mse &lt;- mean((y - t) ^ 2) return(mse) } ) }"
  },
  {
    "objectID": "chapter5.html#メイン---1",
    "href": "chapter5.html#メイン---1",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#w-np.array1.5-1-90",
    "href": "chapter5.html#w-np.array1.5-1-90",
    "title": "2  教師あり学習[回帰]",
    "section": "w = np.array([1.5, 1, 90])",
    "text": "w = np.array([1.5, 1, 90])\nw &lt;- array(c(1.5, 1, 90), dim = c(1, 3)) ## mse = mse_plane(X0, X1, T, w) # MSEを計算 mse &lt;- mse_plane(X0, X1, t, w) ## # 結果表示 ## print(f”SD = {np.sqrt(mse):.2f} cm”) cat(‘SD =’, sqrt(mse) |&gt; round(2), ‘cm’)"
  },
  {
    "objectID": "chapter5.html#グラフ描画--",
    "href": "chapter5.html#グラフ描画--",
    "title": "2  教師あり学習 : 回帰",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize6-5-1",
    "href": "chapter5.html#plt.figurefigsize6-5-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(6, 5))",
    "text": "plt.figure(figsize=(6, 5))"
  },
  {
    "objectID": "chapter5.html#ax-plt.subplotprojection3d-1",
    "href": "chapter5.html#ax-plt.subplotprojection3d-1",
    "title": "2  教師あり学習[回帰]",
    "section": "ax = plt.subplot(projection=“3d”)",
    "text": "ax = plt.subplot(projection=“3d”)"
  },
  {
    "objectID": "chapter5.html#show_planeax-w",
    "href": "chapter5.html#show_planeax-w",
    "title": "2  教師あり学習[回帰]",
    "section": "show_plane(ax, w)",
    "text": "show_plane(ax, w)"
  },
  {
    "objectID": "chapter5.html#show_data2dax-x0-x1-t-1",
    "href": "chapter5.html#show_data2dax-x0-x1-t-1",
    "title": "2  教師あり学習[回帰]",
    "section": "show_data2d(ax, X0, X1, T)",
    "text": "show_data2d(ax, X0, X1, T)"
  },
  {
    "objectID": "chapter5.html#plt.show-1",
    "href": "chapter5.html#plt.show-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\ntibble(x_plt = c(M, M), y_plt = c(sd_Gauss_test, sd_Gauss_train), col = rep(c(‘test’, ‘train’), each = length(M))) |&gt; ggplot() + geom_line(aes(x = x_plt, y = y_plt, color = col)) + geom_point(aes(x = x_plt, y = y_plt, fill = col), color = ‘black’, shape = 21) + xlim(2, 7) + ylim(3, 9) + coord_fixed(ratio = 5 / 6) + labs(x = element_blank(), y = element_blank()) + scale_color_discrete(name = element_blank(), label = c(‘test’, ‘training’)) + scale_fill_discrete(name = element_blank(), label = c(‘test’, ‘training’))"
  },
  {
    "objectID": "chapter5.html#解析解--",
    "href": "chapter5.html#解析解--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 解析解 ———-",
    "text": "# 解析解 ———-"
  },
  {
    "objectID": "chapter5.html#def-fit_planex0-x1-t",
    "href": "chapter5.html#def-fit_planex0-x1-t",
    "title": "2  教師あり学習[回帰]",
    "section": "def fit_plane(x0, x1, t):",
    "text": "def fit_plane(x0, x1, t):"
  },
  {
    "objectID": "chapter5.html#c_tx0-np.meant-x0---np.meant-np.meanx0-covt-x0",
    "href": "chapter5.html#c_tx0-np.meant-x0---np.meant-np.meanx0-covt-x0",
    "title": "2  教師あり学習[回帰]",
    "section": "c_tx0 = np.mean(t * x0) - np.mean(t) * np.mean(x0) # cov(t, x0)",
    "text": "c_tx0 = np.mean(t * x0) - np.mean(t) * np.mean(x0) # cov(t, x0)"
  },
  {
    "objectID": "chapter5.html#c_tx1-np.meant-x1---np.meant-np.meanx1-covt-x1",
    "href": "chapter5.html#c_tx1-np.meant-x1---np.meant-np.meanx1-covt-x1",
    "title": "2  教師あり学習[回帰]",
    "section": "c_tx1 = np.mean(t * x1) - np.mean(t) * np.mean(x1) # cov(t, x1)",
    "text": "c_tx1 = np.mean(t * x1) - np.mean(t) * np.mean(x1) # cov(t, x1)"
  },
  {
    "objectID": "chapter5.html#c_x0x1-np.meanx0-x1---np.meanx0-np.meanx1-covx0-x1",
    "href": "chapter5.html#c_x0x1-np.meanx0-x1---np.meanx0-np.meanx1-covx0-x1",
    "title": "2  教師あり学習[回帰]",
    "section": "c_x0x1 = np.mean(x0 * x1) - np.mean(x0) * np.mean(x1) # cov(x0, x1)",
    "text": "c_x0x1 = np.mean(x0 * x1) - np.mean(x0) * np.mean(x1) # cov(x0, x1)"
  },
  {
    "objectID": "chapter5.html#v_x0-np.varx0-varx0",
    "href": "chapter5.html#v_x0-np.varx0-varx0",
    "title": "2  教師あり学習[回帰]",
    "section": "v_x0 = np.var(x0) # var(x0)",
    "text": "v_x0 = np.var(x0) # var(x0)"
  },
  {
    "objectID": "chapter5.html#v_x1-np.varx1-varx1",
    "href": "chapter5.html#v_x1-np.varx1-varx1",
    "title": "2  教師あり学習[回帰]",
    "section": "v_x1 = np.var(x1) # var(x1)",
    "text": "v_x1 = np.var(x1) # var(x1)"
  },
  {
    "objectID": "chapter5.html#式5-34",
    "href": "chapter5.html#式5-34",
    "title": "2  教師あり学習[回帰]",
    "section": "# 式5-34",
    "text": "# 式5-34"
  },
  {
    "objectID": "chapter5.html#w0-c_tx1-c_x0x1---v_x1-c_tx0-c_x0x1-2---v_x0-v_x1",
    "href": "chapter5.html#w0-c_tx1-c_x0x1---v_x1-c_tx0-c_x0x1-2---v_x0-v_x1",
    "title": "2  教師あり学習[回帰]",
    "section": "w0 = (c_tx1 * c_x0x1 - v_x1 * c_tx0) / (c_x0x1 ** 2 - v_x0 * v_x1)",
    "text": "w0 = (c_tx1 * c_x0x1 - v_x1 * c_tx0) / (c_x0x1 ** 2 - v_x0 * v_x1)"
  },
  {
    "objectID": "chapter5.html#式5-35",
    "href": "chapter5.html#式5-35",
    "title": "2  教師あり学習[回帰]",
    "section": "# 式5-35",
    "text": "# 式5-35"
  },
  {
    "objectID": "chapter5.html#w1-c_tx0-c_x0x1---v_x0-c_tx1-c_x0x1-2---v_x0-v_x1",
    "href": "chapter5.html#w1-c_tx0-c_x0x1---v_x0-c_tx1-c_x0x1-2---v_x0-v_x1",
    "title": "2  教師あり学習[回帰]",
    "section": "w1 = (c_tx0 * c_x0x1 - v_x0 * c_tx1) / (c_x0x1 ** 2 - v_x0 * v_x1)",
    "text": "w1 = (c_tx0 * c_x0x1 - v_x0 * c_tx1) / (c_x0x1 ** 2 - v_x0 * v_x1)"
  },
  {
    "objectID": "chapter5.html#式5-36",
    "href": "chapter5.html#式5-36",
    "title": "2  教師あり学習[回帰]",
    "section": "# 式5-36",
    "text": "# 式5-36"
  },
  {
    "objectID": "chapter5.html#w2--w0-np.meanx0---w1-np.meanx1-np.meant",
    "href": "chapter5.html#w2--w0-np.meanx0---w1-np.meanx1-np.meant",
    "title": "2  教師あり学習[回帰]",
    "section": "w2 = -w0 * np.mean(x0) - w1 * np.mean(x1) + np.mean(t)",
    "text": "w2 = -w0 * np.mean(x0) - w1 * np.mean(x1) + np.mean(t)"
  },
  {
    "objectID": "chapter5.html#w-np.arrayw0-w1-w2",
    "href": "chapter5.html#w-np.arrayw0-w1-w2",
    "title": "2  教師あり学習[回帰]",
    "section": "w = np.array([w0, w1, w2])",
    "text": "w = np.array([w0, w1, w2])"
  },
  {
    "objectID": "chapter5.html#return-w",
    "href": "chapter5.html#return-w",
    "title": "2  教師あり学習[回帰]",
    "section": "return w",
    "text": "return w\nfit_plane &lt;- function(x0, x1, t) { c_tx0 &lt;- mean(t * x0) - mean(t) * mean(x0) c_tx1 &lt;- mean(t * x1) - mean(t) * mean(x1) c_x0x1 &lt;- mean(x0 * x1) - mean(x0) * mean(x1) v_x0 &lt;- var(x0) v_x1 &lt;- var(x1) w0 &lt;- (c_tx1 * c_x0x1 - v_x1 * c_tx0) / (c_x0x1 ^ 2 - v_x0 * v_x1) w1 &lt;- (c_tx0 * c_x0x1 - v_x0 * c_tx1) / (c_x0x1 ^ 2 - v_x0 * v_x1) w2 &lt;- -w0 * mean(x0) - w1 * mean(x1) + mean(t) w &lt;- array(c(w0, w1, w2), dim = c(1, 3)) return(w) }"
  },
  {
    "objectID": "chapter5.html#メイン---2",
    "href": "chapter5.html#メイン---2",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#w-fit_planex0-x1-t-wを計算",
    "href": "chapter5.html#w-fit_planex0-x1-t-wを計算",
    "title": "2  教師あり学習[回帰]",
    "section": "w = fit_plane(X0, X1, T) # wを計算",
    "text": "w = fit_plane(X0, X1, T) # wを計算\nw &lt;- fit_plane(X0, X1, t) ## mse = mse_plane(X0, X1, T, w) # MSEを計算 mse &lt;- mse_plane(X0, X1, t, w) ## # 結果表示 ## print(f”w0 = {w[0]:.2f}, w1 = {w[1]:.2f}, w2 = {w[2]:.2f}“) cat(‘w0 =’, round(w[1], 2), ‘w1 =’, round(w[2], 2), ‘w2 =’, round(w[3], 2)) ## print(f”SD = {np.sqrt(mse):.2f} cm”) cat(‘SD =’, sqrt(mse) |&gt; round(2), ‘cm’)"
  },
  {
    "objectID": "chapter5.html#グラフ描画---1",
    "href": "chapter5.html#グラフ描画---1",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize6-5-2",
    "href": "chapter5.html#plt.figurefigsize6-5-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(6, 5))",
    "text": "plt.figure(figsize=(6, 5))"
  },
  {
    "objectID": "chapter5.html#ax-plt.subplotprojection3d-2",
    "href": "chapter5.html#ax-plt.subplotprojection3d-2",
    "title": "2  教師あり学習[回帰]",
    "section": "ax = plt.subplot(projection=“3d”)",
    "text": "ax = plt.subplot(projection=“3d”)"
  },
  {
    "objectID": "chapter5.html#show_planeax-w-1",
    "href": "chapter5.html#show_planeax-w-1",
    "title": "2  教師あり学習[回帰]",
    "section": "show_plane(ax, w)",
    "text": "show_plane(ax, w)"
  },
  {
    "objectID": "chapter5.html#show_data2dax-x0-x1-t-2",
    "href": "chapter5.html#show_data2dax-x0-x1-t-2",
    "title": "2  教師あり学習[回帰]",
    "section": "show_data2d(ax, X0, X1, T)",
    "text": "show_data2d(ax, X0, X1, T)"
  },
  {
    "objectID": "chapter5.html#plt.show-2",
    "href": "chapter5.html#plt.show-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\nshow_gauss_func(w) + geom_point(data = tibble(x_plt = X, y_plt = t), mapping = aes(x = x_plt, y = y_plt), color = ‘cornflowerblue’) + xlim(0, 30) + ylim(130, 180) + coord_fixed(ratio = 30 / 50) + labs(x = element_blank(), y = element_blank())"
  },
  {
    "objectID": "chapter5.html#reset",
    "href": "chapter5.html#reset",
    "title": "2  教師あり学習[回帰]",
    "section": "%reset",
    "text": "%reset\nrm(list = ls(all.names = TRUE))"
  },
  {
    "objectID": "chapter5.html#matplotlib-inline",
    "href": "chapter5.html#matplotlib-inline",
    "title": "2  教師あり学習[回帰]",
    "section": "%matplotlib inline",
    "text": "%matplotlib inline"
  },
  {
    "objectID": "chapter5.html#import-numpy-as-np",
    "href": "chapter5.html#import-numpy-as-np",
    "title": "2  教師あり学習[回帰]",
    "section": "import numpy as np",
    "text": "import numpy as np"
  },
  {
    "objectID": "chapter5.html#import-matplotlib.pyplot-as-plt",
    "href": "chapter5.html#import-matplotlib.pyplot-as-plt",
    "title": "2  教師あり学習[回帰]",
    "section": "import matplotlib.pyplot as plt",
    "text": "import matplotlib.pyplot as plt\nNULL"
  },
  {
    "objectID": "chapter5.html#データのロード--",
    "href": "chapter5.html#データのロード--",
    "title": "2  教師あり学習[回帰]",
    "section": "# データのロード ———-",
    "text": "# データのロード ———-"
  },
  {
    "objectID": "chapter5.html#data-np.loadch5_data.npz",
    "href": "chapter5.html#data-np.loadch5_data.npz",
    "title": "2  教師あり学習[回帰]",
    "section": "data = np.load(“ch5_data.npz”)",
    "text": "data = np.load(“ch5_data.npz”)\nset.seed(1) X_min &lt;- 4; X_max &lt;- 30; N &lt;- 16; prm &lt;- c(170, 108, 0.2) X &lt;- 5 + 25 * runif(N) t &lt;- prm[1] - prm[2] * exp(-prm[3] * X) + 4 * rnorm(N) ## X = data[“X”] NULL ## X_min = 0 X_min &lt;- 0 ## X_max = data[“X_max”] NULL ## N = data[“N”] NULL ## T = data[“T”] NULL"
  },
  {
    "objectID": "chapter5.html#ガウス関数--",
    "href": "chapter5.html#ガウス関数--",
    "title": "2  教師あり学習[回帰]",
    "section": "# ガウス関数 ———-",
    "text": "# ガウス関数 ———-"
  },
  {
    "objectID": "chapter5.html#def-gaussx-mu-s",
    "href": "chapter5.html#def-gaussx-mu-s",
    "title": "2  教師あり学習[回帰]",
    "section": "def gauss(x, mu, s):",
    "text": "def gauss(x, mu, s):"
  },
  {
    "objectID": "chapter5.html#y-np.exp-x---mu-2-2-s-2-式5-64",
    "href": "chapter5.html#y-np.exp-x---mu-2-2-s-2-式5-64",
    "title": "2  教師あり学習[回帰]",
    "section": "y = np.exp(-((x - mu) ** 2) / (2 * s ** 2)) # 式5-64",
    "text": "y = np.exp(-((x - mu) ** 2) / (2 * s ** 2)) # 式5-64"
  },
  {
    "objectID": "chapter5.html#return-y",
    "href": "chapter5.html#return-y",
    "title": "2  教師あり学習[回帰]",
    "section": "return y",
    "text": "return y\nmodel_A &lt;- function(x, w) { y &lt;- w[1] - w[2] * exp(-w[3] * x) return(y) }"
  },
  {
    "objectID": "chapter5.html#メイン---3",
    "href": "chapter5.html#メイン---3",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-4-ガウス関数の数",
    "href": "chapter5.html#m-4-ガウス関数の数",
    "title": "2  教師あり学習[回帰]",
    "section": "M = 4 # ガウス関数の数",
    "text": "M = 4 # ガウス関数の数\nM &lt;- 4 ## mu = np.linspace(5, 30, M) # 平均パラメータ mu &lt;- seq(5, 30, length.out = M) ## s = mu[1] - mu[0] # (A) 標準偏差パラメータ s &lt;- mu[2] - mu[1] ## xb = np.linspace(X_min, X_max, 100) xb &lt;- seq(X_min, X_max, length.out = 100) ## y = np.zeros((M, 100)) # M個のガウス関数の値を入れるyを準備 y &lt;- array(0, dim = c(100, M)) |&gt; # 便宜上行と列を入れ替える． data.frame() |&gt; rename(mu1 = ‘X1’, mu2 = ‘X2’, mu3 = ‘X3’, mu4 = ‘X4’) ## for j in range(M): ## y[j, :] = gauss(xb, mu[j], s) # ガウス関数 for (j in 1:M) { y[, j] &lt;- gauss(xb, mu[j], s) }"
  },
  {
    "objectID": "chapter5.html#グラフ描画---2",
    "href": "chapter5.html#グラフ描画---2",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize4-4",
    "href": "chapter5.html#plt.figurefigsize4-4",
    "title": "2  教師あり学習 : 回帰",
    "section": "plt.figure(figsize=(4, 4))",
    "text": "plt.figure(figsize=(4, 4))"
  },
  {
    "objectID": "chapter5.html#for-j-in-rangem",
    "href": "chapter5.html#for-j-in-rangem",
    "title": "2  教師あり学習[回帰]",
    "section": "for j in range(M):",
    "text": "for j in range(M):"
  },
  {
    "objectID": "chapter5.html#plt.plotxb-yj-gray-linewidth3",
    "href": "chapter5.html#plt.plotxb-yj-gray-linewidth3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(xb, y[j, :], “gray”, linewidth=3)",
    "text": "plt.plot(xb, y[j, :], “gray”, linewidth=3)"
  },
  {
    "objectID": "chapter5.html#plt.xlimx_min-x_max",
    "href": "chapter5.html#plt.xlimx_min-x_max",
    "title": "2  教師あり学習 : 回帰",
    "section": "plt.xlim(X_min, X_max)",
    "text": "plt.xlim(X_min, X_max)"
  },
  {
    "objectID": "chapter5.html#plt.ylim0-1.2",
    "href": "chapter5.html#plt.ylim0-1.2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.ylim(0, 1.2)",
    "text": "plt.ylim(0, 1.2)"
  },
  {
    "objectID": "chapter5.html#plt.grid",
    "href": "chapter5.html#plt.grid",
    "title": "2  教師あり学習 : 回帰",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-3",
    "href": "chapter5.html#plt.show-3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\nshow_model_A(w)"
  },
  {
    "objectID": "chapter5.html#線形基底関数モデル--",
    "href": "chapter5.html#線形基底関数モデル--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 線形基底関数モデル ———-",
    "text": "# 線形基底関数モデル ———-"
  },
  {
    "objectID": "chapter5.html#def-gauss_funcw-x",
    "href": "chapter5.html#def-gauss_funcw-x",
    "title": "2  教師あり学習[回帰]",
    "section": "def gauss_func(w, x):",
    "text": "def gauss_func(w, x):"
  },
  {
    "objectID": "chapter5.html#m-lenw---1-ガウス関数の数",
    "href": "chapter5.html#m-lenw---1-ガウス関数の数",
    "title": "2  教師あり学習[回帰]",
    "section": "m = len(w) - 1 # ガウス関数の数",
    "text": "m = len(w) - 1 # ガウス関数の数"
  },
  {
    "objectID": "chapter5.html#mu-np.linspace5-30-m",
    "href": "chapter5.html#mu-np.linspace5-30-m",
    "title": "2  教師あり学習[回帰]",
    "section": "mu = np.linspace(5, 30, m)",
    "text": "mu = np.linspace(5, 30, m)"
  },
  {
    "objectID": "chapter5.html#s-mu1---mu0",
    "href": "chapter5.html#s-mu1---mu0",
    "title": "2  教師あり学習[回帰]",
    "section": "s = mu[1] - mu[0]",
    "text": "s = mu[1] - mu[0]"
  },
  {
    "objectID": "chapter5.html#xと同じサイズで要素が0のndarray型を作成",
    "href": "chapter5.html#xと同じサイズで要素が0のndarray型を作成",
    "title": "2  教師あり学習[回帰]",
    "section": "# xと同じサイズで要素が0のndarray型を作成",
    "text": "# xと同じサイズで要素が0のndarray型を作成"
  },
  {
    "objectID": "chapter5.html#y-np.zeros_likex",
    "href": "chapter5.html#y-np.zeros_likex",
    "title": "2  教師あり学習[回帰]",
    "section": "y = np.zeros_like(x)",
    "text": "y = np.zeros_like(x)"
  },
  {
    "objectID": "chapter5.html#ここでは式5-66ではなく式5-65で実装",
    "href": "chapter5.html#ここでは式5-66ではなく式5-65で実装",
    "title": "2  教師あり学習[回帰]",
    "section": "# ここでは式5-66ではなく式5-65で実装",
    "text": "# ここでは式5-66ではなく式5-65で実装"
  },
  {
    "objectID": "chapter5.html#for-j-in-rangem-1",
    "href": "chapter5.html#for-j-in-rangem-1",
    "title": "2  教師あり学習[回帰]",
    "section": "for j in range(m):",
    "text": "for j in range(m):"
  },
  {
    "objectID": "chapter5.html#y-y-wj-gaussx-muj-s",
    "href": "chapter5.html#y-y-wj-gaussx-muj-s",
    "title": "2  教師あり学習[回帰]",
    "section": "y = y + w[j] * gauss(x, mu[j], s)",
    "text": "y = y + w[j] * gauss(x, mu[j], s)"
  },
  {
    "objectID": "chapter5.html#y-y-wm-phiを掛けないパラメータを最後に加える",
    "href": "chapter5.html#y-y-wm-phiを掛けないパラメータを最後に加える",
    "title": "2  教師あり学習[回帰]",
    "section": "y = y + w[m] # phiを掛けないパラメータを最後に加える",
    "text": "y = y + w[m] # phiを掛けないパラメータを最後に加える"
  },
  {
    "objectID": "chapter5.html#return-y-1",
    "href": "chapter5.html#return-y-1",
    "title": "2  教師あり学習[回帰]",
    "section": "return y",
    "text": "return y\ngauss_func &lt;- function(w, x) { m &lt;- length(w) - 1 mu &lt;- seq(5, 30, length.out = m) s = mu[2] - mu[1] y &lt;- array(0, dim = c(1, length(x))) for (j in 1:m) { y &lt;- y + w[j] * gauss(x, mu[j], s) } y &lt;- y + w[m + 1] return(y) }"
  },
  {
    "objectID": "chapter5.html#線形基底関数モデルの平均二乗誤差mse--",
    "href": "chapter5.html#線形基底関数モデルの平均二乗誤差mse--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 線形基底関数モデルの平均二乗誤差(MSE) ———-",
    "text": "# 線形基底関数モデルの平均二乗誤差(MSE) ———-"
  },
  {
    "objectID": "chapter5.html#def-mse_gauss_funcx-t-w",
    "href": "chapter5.html#def-mse_gauss_funcx-t-w",
    "title": "2  教師あり学習[回帰]",
    "section": "def mse_gauss_func(x, t, w):",
    "text": "def mse_gauss_func(x, t, w):"
  },
  {
    "objectID": "chapter5.html#y-gauss_funcw-x",
    "href": "chapter5.html#y-gauss_funcw-x",
    "title": "2  教師あり学習[回帰]",
    "section": "y = gauss_func(w, x)",
    "text": "y = gauss_func(w, x)"
  },
  {
    "objectID": "chapter5.html#mse-np.meany---t-2-1",
    "href": "chapter5.html#mse-np.meany---t-2-1",
    "title": "2  教師あり学習[回帰]",
    "section": "mse = np.mean((y - t) ** 2)",
    "text": "mse = np.mean((y - t) ** 2)"
  },
  {
    "objectID": "chapter5.html#return-mse-1",
    "href": "chapter5.html#return-mse-1",
    "title": "2  教師あり学習[回帰]",
    "section": "return mse",
    "text": "return mse\nmse_gauss_func &lt;- function(x, t, w) { y &lt;- gauss_func(w, x) mse &lt;- mean((y - t) ^ 2) return(mse) }"
  },
  {
    "objectID": "chapter5.html#線形基底関数モデルの厳密解--",
    "href": "chapter5.html#線形基底関数モデルの厳密解--",
    "title": "2  教師あり学習[回帰]",
    "section": "# 線形基底関数モデルの厳密解 ———-",
    "text": "# 線形基底関数モデルの厳密解 ———-"
  },
  {
    "objectID": "chapter5.html#def-fit_gauss_funcx-t-m",
    "href": "chapter5.html#def-fit_gauss_funcx-t-m",
    "title": "2  教師あり学習[回帰]",
    "section": "def fit_gauss_func(x, t, m):",
    "text": "def fit_gauss_func(x, t, m):"
  },
  {
    "objectID": "chapter5.html#mu-np.linspace5-30-m-1",
    "href": "chapter5.html#mu-np.linspace5-30-m-1",
    "title": "2  教師あり学習[回帰]",
    "section": "mu = np.linspace(5, 30, m)",
    "text": "mu = np.linspace(5, 30, m)"
  },
  {
    "objectID": "chapter5.html#s-mu1---mu0-1",
    "href": "chapter5.html#s-mu1---mu0-1",
    "title": "2  教師あり学習[回帰]",
    "section": "s = mu[1] - mu[0]",
    "text": "s = mu[1] - mu[0]"
  },
  {
    "objectID": "chapter5.html#n-x.shape0",
    "href": "chapter5.html#n-x.shape0",
    "title": "2  教師あり学習[回帰]",
    "section": "n = x.shape[0]",
    "text": "n = x.shape[0]"
  },
  {
    "objectID": "chapter5.html#式5-69-の計画行列phiを作成",
    "href": "chapter5.html#式5-69-の計画行列phiを作成",
    "title": "2  教師あり学習[回帰]",
    "section": "# 式5-69 の計画行列phiを作成",
    "text": "# 式5-69 の計画行列phiを作成"
  },
  {
    "objectID": "chapter5.html#phi-np.onesn-m-1-a-要素が1のn-x-m1行列",
    "href": "chapter5.html#phi-np.onesn-m-1-a-要素が1のn-x-m1行列",
    "title": "2  教師あり学習[回帰]",
    "section": "phi = np.ones((n, m + 1)) # (A) 要素が1のn x (m+1)行列",
    "text": "phi = np.ones((n, m + 1)) # (A) 要素が1のn x (m+1)行列"
  },
  {
    "objectID": "chapter5.html#for-j-in-rangem-b-0m-1列に値を割り振る",
    "href": "chapter5.html#for-j-in-rangem-b-0m-1列に値を割り振る",
    "title": "2  教師あり学習[回帰]",
    "section": "for j in range(m): # (B) 0～m-1列に値を割り振る",
    "text": "for j in range(m): # (B) 0～m-1列に値を割り振る"
  },
  {
    "objectID": "chapter5.html#phi-j-gaussx-muj-s",
    "href": "chapter5.html#phi-j-gaussx-muj-s",
    "title": "2  教師あり学習[回帰]",
    "section": "phi[:, j] = gauss(x, mu[j], s)",
    "text": "phi[:, j] = gauss(x, mu[j], s)"
  },
  {
    "objectID": "chapter5.html#式5-68-で厳密解のwを計算",
    "href": "chapter5.html#式5-68-で厳密解のwを計算",
    "title": "2  教師あり学習[回帰]",
    "section": "# 式5-68 で厳密解のwを計算",
    "text": "# 式5-68 で厳密解のwを計算"
  },
  {
    "objectID": "chapter5.html#w-np.linalg.invphi.t-phi-phi.t-t",
    "href": "chapter5.html#w-np.linalg.invphi.t-phi-phi.t-t",
    "title": "2  教師あり学習[回帰]",
    "section": "w = np.linalg.inv(phi.T @ phi) @ phi.T @ t",
    "text": "w = np.linalg.inv(phi.T @ phi) @ phi.T @ t"
  },
  {
    "objectID": "chapter5.html#return-w-1",
    "href": "chapter5.html#return-w-1",
    "title": "2  教師あり学習[回帰]",
    "section": "return w",
    "text": "return w\nfit_gauss_func &lt;- function(x, t, m) { mu &lt;- seq(5, 30, length.out = m) s &lt;- mu[2] - mu[1] n &lt;- length(x) phi &lt;- array(1, dim = c(n, m + 1)) for (j in 1:m) { phi[, j] &lt;- gauss(x, mu[j], s) } w &lt;- solve(t(phi) %% phi) %% t(phi) %*% t return(w) }"
  },
  {
    "objectID": "chapter5.html#ガウス基底関数表示--",
    "href": "chapter5.html#ガウス基底関数表示--",
    "title": "2  教師あり学習[回帰]",
    "section": "# ガウス基底関数表示 ———-",
    "text": "# ガウス基底関数表示 ———-"
  },
  {
    "objectID": "chapter5.html#def-show_gauss_funcw",
    "href": "chapter5.html#def-show_gauss_funcw",
    "title": "2  教師あり学習[回帰]",
    "section": "def show_gauss_func(w):",
    "text": "def show_gauss_func(w):"
  },
  {
    "objectID": "chapter5.html#x-np.linspacex_min-x_max-100",
    "href": "chapter5.html#x-np.linspacex_min-x_max-100",
    "title": "2  教師あり学習[回帰]",
    "section": "x = np.linspace(X_min, X_max, 100)",
    "text": "x = np.linspace(X_min, X_max, 100)"
  },
  {
    "objectID": "chapter5.html#y-gauss_funcw-x-1",
    "href": "chapter5.html#y-gauss_funcw-x-1",
    "title": "2  教師あり学習[回帰]",
    "section": "y = gauss_func(w, x)",
    "text": "y = gauss_func(w, x)"
  },
  {
    "objectID": "chapter5.html#plt.plotx-y-gray-linewidth4",
    "href": "chapter5.html#plt.plotx-y-gray-linewidth4",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(x, y, “gray”, linewidth=4)",
    "text": "plt.plot(x, y, “gray”, linewidth=4)\nshow_model_A &lt;- function(w) { x &lt;- seq(X_min, X_max, length.out = 100) y &lt;- model_A(x, w) p &lt;- tibble(x_plt = x, y_plt = y) |&gt; ggplot() + geom_line(aes(x = x_plt, y = y_plt)) return(p) }"
  },
  {
    "objectID": "chapter5.html#メイン---4",
    "href": "chapter5.html#メイン---4",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-4-ガウス関数の数-1",
    "href": "chapter5.html#m-4-ガウス関数の数-1",
    "title": "2  教師あり学習[回帰]",
    "section": "M = 4 # ガウス関数の数",
    "text": "M = 4 # ガウス関数の数\nM &lt;- 4 ## w = fit_gauss_func(X, T, M) # wを計算 w &lt;- fit_gauss_func(X, t, M) ## mse = mse_gauss_func(X, T, w) # MSEを計算 mse &lt;- mse_gauss_func(X, t, w) ## # 結果表示 ## print(“w =”, np.round(w, 2)) cat(‘w =’, round(w, 2)) ## print(f”SD = {np.sqrt(mse):.2f} cm”) cat(‘SD =’, sqrt(mse) |&gt; round(2), ‘cm’)"
  },
  {
    "objectID": "chapter5.html#グラフ描画---3",
    "href": "chapter5.html#グラフ描画---3",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize4-4-1",
    "href": "chapter5.html#plt.figurefigsize4-4-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(4, 4))",
    "text": "plt.figure(figsize=(4, 4))"
  },
  {
    "objectID": "chapter5.html#show_gauss_funcw",
    "href": "chapter5.html#show_gauss_funcw",
    "title": "2  教師あり学習[回帰]",
    "section": "show_gauss_func(w)",
    "text": "show_gauss_func(w)"
  },
  {
    "objectID": "chapter5.html#plt.plot",
    "href": "chapter5.html#plt.plot",
    "title": "2  教師あり学習 : 回帰",
    "section": "plt.plot(",
    "text": "plt.plot("
  },
  {
    "objectID": "chapter5.html#x-t-cornflowerblue",
    "href": "chapter5.html#x-t-cornflowerblue",
    "title": "2  教師あり学習 : 回帰",
    "section": "X, T, “cornflowerblue”,",
    "text": "X, T, “cornflowerblue”,"
  },
  {
    "objectID": "chapter5.html#markero-linestylenone-markeredgecolorblack",
    "href": "chapter5.html#markero-linestylenone-markeredgecolorblack",
    "title": "2  教師あり学習 : 回帰",
    "section": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,",
    "text": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#section-3",
    "href": "chapter5.html#section-3",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.xlimx_min-x_max-1",
    "href": "chapter5.html#plt.xlimx_min-x_max-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.xlim(X_min, X_max)",
    "text": "plt.xlim(X_min, X_max)"
  },
  {
    "objectID": "chapter5.html#plt.grid-1",
    "href": "chapter5.html#plt.grid-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-4",
    "href": "chapter5.html#plt.show-4",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\nshow_model_A(w)"
  },
  {
    "objectID": "chapter5.html#m-2-4-7-9-調べるmの値",
    "href": "chapter5.html#m-2-4-7-9-調べるmの値",
    "title": "2  教師あり学習[回帰]",
    "section": "M = [2, 4, 7, 9] # 調べるMの値",
    "text": "M = [2, 4, 7, 9] # 調べるMの値\nM &lt;- c(2, 4, 7, 9) ## plt.figure(figsize=(10, 2.5)) ## plt.subplots_adjust(wspace=0.3) ## for i in range(len(M)): ## w = fit_gauss_func(X_train, T_train, M[i]) # wを計算 ## sd = np.sqrt(mse_gauss_func(X_test, T_test, w)) # SDを計算 ## # グラフ描画 ## plt.subplot(1, len(M), i + 1) ## show_gauss_func(w) # 線形基底関数 ## plt.plot( # 訓練データ ## X_train, T_train, “white”, ## marker=“o”, linestyle=“None”, markeredgecolor=“black”, ## label=“training”, ## ) ## plt.plot( # テストデータ ## X_test, T_test, “cornflowerblue”, ## marker=“o”, linestyle=“None”, markeredgecolor=“black”, ## label=“test”, ## ) ## plt.title(f”M={M[i]:d}, SD={sd:.2f}“) ## plt.legend(loc=”lower right”, fontsize=10, numpoints=1) ## plt.xlim(X_min, X_max) ## plt.ylim(120, 180) ## plt.grid() ## plt.show() for (i in 1:length(M)) { w &lt;- fit_gauss_func(X_train, T_train, M[i]) sd &lt;- sqrt(mse_gauss_func(X_test, T_test, w)) p &lt;- show_gauss_func(w) + geom_point(data = tibble(x_plt = X_train, y_plt = T_train), mapping = aes(x = x_plt, y = y_plt), fill = ‘white’, color = ‘black’, shape = 21) + geom_point(data = tibble(x_plt = X_test, y_plt = T_test), mapping = aes(x = x_plt, y = y_plt), fill = ‘cornflowerblue’, color = ‘black’, shape = 21) + xlim(0, 30) + ylim(120, 180) + coord_fixed(ratio = 30 / 60) + labs(x = element_blank(), y = element_blank()) plot(p) }"
  },
  {
    "objectID": "chapter5.html#リスト-5-3-9",
    "href": "chapter5.html#リスト-5-3-9",
    "title": "2  教師あり学習[回帰]",
    "section": "# リスト 5-3-(9)",
    "text": "# リスト 5-3-(9)"
  },
  {
    "objectID": "chapter5.html#メイン---5",
    "href": "chapter5.html#メイン---5",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-range2-10",
    "href": "chapter5.html#m-range2-10",
    "title": "2  教師あり学習[回帰]",
    "section": "M = range(2, 10)",
    "text": "M = range(2, 10)\nM &lt;- 2:9 ## sd = np.zeros(len(M)) sd &lt;- rep(0, length(M)) ## for i in range(len(M)): ## w = fit_gauss_func(X, T, M[i]) # wを計算 ## sd[i] = np.sqrt(mse_gauss_func(X, T, w)) # SDを計算 for (i in 1:length(M)) { w &lt;- fit_gauss_func(X, t, M[i]) sd[i] &lt;- sqrt(mse_gauss_func(X, t, w)) }"
  },
  {
    "objectID": "chapter5.html#グラフ描画---4",
    "href": "chapter5.html#グラフ描画---4",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize5-4",
    "href": "chapter5.html#plt.figurefigsize5-4",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(5, 4))",
    "text": "plt.figure(figsize=(5, 4))"
  },
  {
    "objectID": "chapter5.html#plt.plotm-sd-cornflowerblue-markero-markeredgecolorblack",
    "href": "chapter5.html#plt.plotm-sd-cornflowerblue-markero-markeredgecolorblack",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(M, sd, “cornflowerblue”, marker=“o”, markeredgecolor=“black”)",
    "text": "plt.plot(M, sd, “cornflowerblue”, marker=“o”, markeredgecolor=“black”)"
  },
  {
    "objectID": "chapter5.html#plt.grid-2",
    "href": "chapter5.html#plt.grid-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-5",
    "href": "chapter5.html#plt.show-5",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\ntibble(x_plt = M, y_plt = sd) |&gt; ggplot() + geom_line(aes(x = x_plt, y = y_plt), color = ‘cornflowerblue’) + geom_point(aes(x = x_plt, y = y_plt), fill = ‘cornflowerblue’, color = ‘black’, shape = 21) + xlim(2, 9) + ylim(3.00, 4.5) + coord_fixed(ratio = 7 / (4.5 - 3.00)) + scale_x_continuous(breaks = c(2:9), labels = c(2:9)) + labs(x = element_blank(), y = element_blank())"
  },
  {
    "objectID": "chapter5.html#訓練データとテストデータに分割-",
    "href": "chapter5.html#訓練データとテストデータに分割-",
    "title": "2  教師あり学習[回帰]",
    "section": "# 訓練データとテストデータに分割———-",
    "text": "# 訓練データとテストデータに分割———-"
  },
  {
    "objectID": "chapter5.html#split-intn-4-分割するインデックス",
    "href": "chapter5.html#split-intn-4-分割するインデックス",
    "title": "2  教師あり学習[回帰]",
    "section": "split = int(N / 4) # 分割するインデックス",
    "text": "split = int(N / 4) # 分割するインデックス\nsplit &lt;- N / 4 ## X_test = X[:split] X_test &lt;- X[1:split] ## T_test = T[:split] T_test &lt;- t[1:split] ## X_train = X[split:] X_train &lt;- X[(split+1):length(X)] ## T_train = T[split:] T_train &lt;- t[(split+1):length(t)]"
  },
  {
    "objectID": "chapter5.html#メイン---6",
    "href": "chapter5.html#メイン---6",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-2-4-7-9-調べるmの値-1",
    "href": "chapter5.html#m-2-4-7-9-調べるmの値-1",
    "title": "2  教師あり学習[回帰]",
    "section": "M = [2, 4, 7, 9] # 調べるMの値",
    "text": "M = [2, 4, 7, 9] # 調べるMの値\nM &lt;- c(2, 4, 7, 9) ## plt.figure(figsize=(10, 2.5)) ## plt.subplots_adjust(wspace=0.3) ## for i in range(len(M)): ## w = fit_gauss_func(X_train, T_train, M[i]) # wを計算 ## sd = np.sqrt(mse_gauss_func(X_test, T_test, w)) # SDを計算 ## # グラフ描画 ## plt.subplot(1, len(M), i + 1) ## show_gauss_func(w) # 線形基底関数 ## plt.plot( # 訓練データ ## X_train, T_train, “white”, ## marker=“o”, linestyle=“None”, markeredgecolor=“black”, ## label=“training”, ## ) ## plt.plot( # テストデータ ## X_test, T_test, “cornflowerblue”, ## marker=“o”, linestyle=“None”, markeredgecolor=“black”, ## label=“test”, ## ) ## plt.title(f”M={M[i]:d}, SD={sd:.2f}“) ## plt.legend(loc=”lower right”, fontsize=10, numpoints=1) ## plt.xlim(X_min, X_max) ## plt.ylim(120, 180) ## plt.grid() ## plt.show() for (i in 1:length(M)) { w &lt;- fit_gauss_func(X_train, T_train, M[i]) sd &lt;- sqrt(mse_gauss_func(X_test, T_test, w)) p &lt;- show_gauss_func(w) + geom_point(data = tibble(x_plt = X_train, y_plt = T_train), mapping = aes(x = x_plt, y = y_plt), fill = ‘white’, color = ‘black’, shape = 21) + geom_point(data = tibble(x_plt = X_test, y_plt = T_test), mapping = aes(x = x_plt, y = y_plt), fill = ‘cornflowerblue’, color = ‘black’, shape = 21) + xlim(0, 30) + ylim(120, 180) + coord_fixed(ratio = 30 / 60) + labs(x = element_blank(), y = element_blank()) plot(p) }"
  },
  {
    "objectID": "chapter5.html#メイン---7",
    "href": "chapter5.html#メイン---7",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-range2-10-調べるmの値2から9",
    "href": "chapter5.html#m-range2-10-調べるmの値2から9",
    "title": "2  教師あり学習[回帰]",
    "section": "M = range(2, 10) # 調べるMの値、2から9",
    "text": "M = range(2, 10) # 調べるMの値、2から9\nM &lt;- 2:9 ## sd_train = np.zeros(len(M)) sd_train &lt;- rep(0, length(M)) ## sd_test = np.zeros(len(M)) sd_test &lt;- rep(0, length(M)) ## for i in range(len(M)): ## # wを計算 ## w = fit_gauss_func(X_train, T_train, M[i]) ## # 訓練データのSDを計算 ## sd_train[i] = np.sqrt(mse_gauss_func(X_train, T_train, w)) ## # テストデータのSDを計算 ## sd_test[i] = np.sqrt(mse_gauss_func(X_test, T_test, w)) for (i in 1:length(M)) { w &lt;- fit_gauss_func(X_train, T_train, M[i]) sd_train[i] &lt;- sqrt(mse_gauss_func(X_train, T_train, w)) sd_test[i] &lt;- sqrt(mse_gauss_func(X_test, T_test, w)) }"
  },
  {
    "objectID": "chapter5.html#グラフ描画---5",
    "href": "chapter5.html#グラフ描画---5",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize5-4-1",
    "href": "chapter5.html#plt.figurefigsize5-4-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(5, 4))",
    "text": "plt.figure(figsize=(5, 4))"
  },
  {
    "objectID": "chapter5.html#plt.plot-訓練データのsd",
    "href": "chapter5.html#plt.plot-訓練データのsd",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot( # 訓練データのSD",
    "text": "plt.plot( # 訓練データのSD"
  },
  {
    "objectID": "chapter5.html#m-sd_train-black",
    "href": "chapter5.html#m-sd_train-black",
    "title": "2  教師あり学習[回帰]",
    "section": "M, sd_train, “black”,",
    "text": "M, sd_train, “black”,"
  },
  {
    "objectID": "chapter5.html#markero-linestyle-",
    "href": "chapter5.html#markero-linestyle-",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“-”,",
    "text": "marker=“o”, linestyle=“-”,"
  },
  {
    "objectID": "chapter5.html#markerfacecolorwhite-markeredgecolorblack",
    "href": "chapter5.html#markerfacecolorwhite-markeredgecolorblack",
    "title": "2  教師あり学習[回帰]",
    "section": "markerfacecolor=“white”, markeredgecolor=“black”,",
    "text": "markerfacecolor=“white”, markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#labeltraining",
    "href": "chapter5.html#labeltraining",
    "title": "2  教師あり学習[回帰]",
    "section": "label=“training”,",
    "text": "label=“training”,"
  },
  {
    "objectID": "chapter5.html#section-4",
    "href": "chapter5.html#section-4",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.plot-テストデータのsd",
    "href": "chapter5.html#plt.plot-テストデータのsd",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot( # テストデータのSD",
    "text": "plt.plot( # テストデータのSD"
  },
  {
    "objectID": "chapter5.html#m-sd_test-cornflowerblue",
    "href": "chapter5.html#m-sd_test-cornflowerblue",
    "title": "2  教師あり学習[回帰]",
    "section": "M, sd_test, “cornflowerblue”,",
    "text": "M, sd_test, “cornflowerblue”,"
  },
  {
    "objectID": "chapter5.html#markero-linestyle--1",
    "href": "chapter5.html#markero-linestyle--1",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“-”,",
    "text": "marker=“o”, linestyle=“-”,"
  },
  {
    "objectID": "chapter5.html#markeredgecolorblack",
    "href": "chapter5.html#markeredgecolorblack",
    "title": "2  教師あり学習[回帰]",
    "section": "markeredgecolor=“black”,",
    "text": "markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#labeltest",
    "href": "chapter5.html#labeltest",
    "title": "2  教師あり学習[回帰]",
    "section": "label=“test”,",
    "text": "label=“test”,"
  },
  {
    "objectID": "chapter5.html#section-5",
    "href": "chapter5.html#section-5",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.legendlocupper-left-fontsize10",
    "href": "chapter5.html#plt.legendlocupper-left-fontsize10",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.legend(loc=“upper left”, fontsize=10)",
    "text": "plt.legend(loc=“upper left”, fontsize=10)"
  },
  {
    "objectID": "chapter5.html#plt.ylim0-12",
    "href": "chapter5.html#plt.ylim0-12",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.ylim(0, 12)",
    "text": "plt.ylim(0, 12)"
  },
  {
    "objectID": "chapter5.html#plt.grid-3",
    "href": "chapter5.html#plt.grid-3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-6",
    "href": "chapter5.html#plt.show-6",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\ntibble(x_plt = c(M, M), y_plt = c(sd_train, sd_test), train_test = rep(c(‘training’, ‘test’), each = length(M))) |&gt; ggplot(aes(x = x_plt, y = y_plt)) + geom_line(aes(color = train_test)) + geom_point(aes(fill = train_test), color = ‘black’, shape = 21) + xlim(2, 9) + ylim(1, 10) + coord_fixed(ratio = 7 / 9) + scale_color_discrete(name = element_blank()) + scale_fill_discrete(name = element_blank()) + labs(x = element_blank(), y = element_blank())"
  },
  {
    "objectID": "chapter5.html#k-分割交差検証--",
    "href": "chapter5.html#k-分割交差検証--",
    "title": "2  教師あり学習[回帰]",
    "section": "# K 分割交差検証 ———-",
    "text": "# K 分割交差検証 ———-"
  },
  {
    "objectID": "chapter5.html#def-kfold_gauss_funcx-t-m-k",
    "href": "chapter5.html#def-kfold_gauss_funcx-t-m-k",
    "title": "2  教師あり学習[回帰]",
    "section": "def kfold_gauss_func(x, t, m, k):",
    "text": "def kfold_gauss_func(x, t, m, k):"
  },
  {
    "objectID": "chapter5.html#n-x.shape0-1",
    "href": "chapter5.html#n-x.shape0-1",
    "title": "2  教師あり学習[回帰]",
    "section": "n = x.shape[0]",
    "text": "n = x.shape[0]"
  },
  {
    "objectID": "chapter5.html#mse_train-np.zerosk",
    "href": "chapter5.html#mse_train-np.zerosk",
    "title": "2  教師あり学習[回帰]",
    "section": "mse_train = np.zeros(k)",
    "text": "mse_train = np.zeros(k)"
  },
  {
    "objectID": "chapter5.html#mse_test-np.zerosk",
    "href": "chapter5.html#mse_test-np.zerosk",
    "title": "2  教師あり学習[回帰]",
    "section": "mse_test = np.zeros(k)",
    "text": "mse_test = np.zeros(k)"
  },
  {
    "objectID": "chapter5.html#for-i-in-range0-k",
    "href": "chapter5.html#for-i-in-range0-k",
    "title": "2  教師あり学習[回帰]",
    "section": "for i in range(0, k):",
    "text": "for i in range(0, k):"
  },
  {
    "objectID": "chapter5.html#訓練データとテストデータに分割",
    "href": "chapter5.html#訓練データとテストデータに分割",
    "title": "2  教師あり学習[回帰]",
    "section": "# 訓練データとテストデータに分割",
    "text": "# 訓練データとテストデータに分割"
  },
  {
    "objectID": "chapter5.html#a-テストデータのインデックス",
    "href": "chapter5.html#a-テストデータのインデックス",
    "title": "2  教師あり学習[回帰]",
    "section": "# (A) テストデータのインデックス",
    "text": "# (A) テストデータのインデックス"
  },
  {
    "objectID": "chapter5.html#i_test-np.fmodrangen-k",
    "href": "chapter5.html#i_test-np.fmodrangen-k",
    "title": "2  教師あり学習[回帰]",
    "section": "i_test = np.fmod(range(n), k)",
    "text": "i_test = np.fmod(range(n), k)"
  },
  {
    "objectID": "chapter5.html#x_test-xi_test-i-テストデータ-x",
    "href": "chapter5.html#x_test-xi_test-i-テストデータ-x",
    "title": "2  教師あり学習[回帰]",
    "section": "x_test = x[i_test == i] # テストデータ x",
    "text": "x_test = x[i_test == i] # テストデータ x"
  },
  {
    "objectID": "chapter5.html#t_test-ti_test-i-テストデータ-t",
    "href": "chapter5.html#t_test-ti_test-i-テストデータ-t",
    "title": "2  教師あり学習[回帰]",
    "section": "t_test = t[i_test == i] # テストデータ t",
    "text": "t_test = t[i_test == i] # テストデータ t"
  },
  {
    "objectID": "chapter5.html#x_train-xi_test-i-訓練データ-x",
    "href": "chapter5.html#x_train-xi_test-i-訓練データ-x",
    "title": "2  教師あり学習[回帰]",
    "section": "x_train = x[i_test != i] # 訓練データ x",
    "text": "x_train = x[i_test != i] # 訓練データ x"
  },
  {
    "objectID": "chapter5.html#t_train-ti_test-i-訓練データ-t",
    "href": "chapter5.html#t_train-ti_test-i-訓練データ-t",
    "title": "2  教師あり学習[回帰]",
    "section": "t_train = t[i_test != i] # 訓練データ t",
    "text": "t_train = t[i_test != i] # 訓練データ t"
  },
  {
    "objectID": "chapter5.html#wを訓練データで決める",
    "href": "chapter5.html#wを訓練データで決める",
    "title": "2  教師あり学習[回帰]",
    "section": "# wを訓練データで決める",
    "text": "# wを訓練データで決める"
  },
  {
    "objectID": "chapter5.html#w-fit_gauss_funcx_train-t_train-m",
    "href": "chapter5.html#w-fit_gauss_funcx_train-t_train-m",
    "title": "2  教師あり学習[回帰]",
    "section": "w = fit_gauss_func(x_train, t_train, m)",
    "text": "w = fit_gauss_func(x_train, t_train, m)"
  },
  {
    "objectID": "chapter5.html#訓練データのmseを計算",
    "href": "chapter5.html#訓練データのmseを計算",
    "title": "2  教師あり学習[回帰]",
    "section": "# 訓練データのMSEを計算",
    "text": "# 訓練データのMSEを計算"
  },
  {
    "objectID": "chapter5.html#mse_traini-mse_gauss_funcx_train-t_train-w",
    "href": "chapter5.html#mse_traini-mse_gauss_funcx_train-t_train-w",
    "title": "2  教師あり学習[回帰]",
    "section": "mse_train[i] = mse_gauss_func(x_train, t_train, w)",
    "text": "mse_train[i] = mse_gauss_func(x_train, t_train, w)"
  },
  {
    "objectID": "chapter5.html#テストデータのmseを計算",
    "href": "chapter5.html#テストデータのmseを計算",
    "title": "2  教師あり学習[回帰]",
    "section": "# テストデータのMSEを計算",
    "text": "# テストデータのMSEを計算"
  },
  {
    "objectID": "chapter5.html#mse_testi-mse_gauss_funcx_test-t_test-w",
    "href": "chapter5.html#mse_testi-mse_gauss_funcx_test-t_test-w",
    "title": "2  教師あり学習[回帰]",
    "section": "mse_test[i] = mse_gauss_func(x_test, t_test, w)",
    "text": "mse_test[i] = mse_gauss_func(x_test, t_test, w)"
  },
  {
    "objectID": "chapter5.html#return-mse_train-mse_test",
    "href": "chapter5.html#return-mse_train-mse_test",
    "title": "2  教師あり学習[回帰]",
    "section": "return mse_train, mse_test",
    "text": "return mse_train, mse_test\nkfold_gauss_func &lt;- function(x, t, m, k) { n &lt;- length(x) mse_train &lt;- rep(0, times = k) mse_test &lt;- rep(0, times = k) for (i in 1:k) { i_test &lt;- 1:n %% k x_test &lt;- x[i_test == (i - 1)] # Rのインデックスの都合上(i - 1) t_test &lt;- t[i_test == (i - 1)] x_train &lt;- x[i_test != (i - 1)] t_train &lt;- t[i_test != (i - 1)] w &lt;- fit_gauss_func(x_train, t_train, m) mse_train[i] &lt;- mse_gauss_func(x_train, t_train, w) mse_test[i] &lt;- mse_gauss_func(x_test, t_test, w) } res &lt;- list(mse_train = mse_train, mse_test = mse_test) return(res) }"
  },
  {
    "objectID": "chapter5.html#np.fmodrange10-5",
    "href": "chapter5.html#np.fmodrange10-5",
    "title": "2  教師あり学習[回帰]",
    "section": "np.fmod(range(10), 5)",
    "text": "np.fmod(range(10), 5)\n(0:9 %% 5)"
  },
  {
    "objectID": "chapter5.html#m-4",
    "href": "chapter5.html#m-4",
    "title": "2  教師あり学習[回帰]",
    "section": "M = 4",
    "text": "M = 4\nM &lt;- 4 ## K = 4 K &lt;- 4 ## kfold_gauss_func(X, T, M, K) kfold_gauss_func(X, t, M, K)"
  },
  {
    "objectID": "chapter5.html#メイン---8",
    "href": "chapter5.html#メイン---8",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-range2-8",
    "href": "chapter5.html#m-range2-8",
    "title": "2  教師あり学習[回帰]",
    "section": "M = range(2, 8)",
    "text": "M = range(2, 8)\nM &lt;- 2:7 ## K = 16 K &lt;- 16 ## Cv_Gauss_train = np.zeros((K, len(M))) Cv_Gauss_train &lt;- array(0, dim = c(K, length(M))) ## Cv_Gauss_test = np.zeros((K, len(M))) Cv_Gauss_test &lt;- array(0, dim = c(K, length(M))) ## for i in range(0, len(M)): ## Cv_Gauss_train[:, i], Cv_Gauss_test[:, i]\n## = kfold_gauss_func(X, T, M[i], K) # k分割交差検定 for (i in 1:length(M)) { res &lt;- kfold_gauss_func(X, t, M[i], K) Cv_Gauss_train[, i] &lt;- res\\(mse_train  Cv_Gauss_test[, i] &lt;- res\\)mse_test } ## # 訓練データの各分割におけるMSEの平均、の平方根 ## sd_Gauss_train = np.sqrt(np.mean(Cv_Gauss_train, axis=0)) sd_Gauss_train &lt;- apply(Cv_Gauss_train, 2, mean) |&gt; sqrt() ## # テストデータの各分割におけるMSEの平均、の平方根 ## sd_Gauss_test = np.sqrt(np.mean(Cv_Gauss_test, axis=0)) sd_Gauss_test &lt;- apply(Cv_Gauss_test, 2, mean) |&gt; sqrt() ## np.save(“ch5_Gauss_test.npy”, sd_Gauss_test) # 結果の保存 NULL"
  },
  {
    "objectID": "chapter5.html#グラフ描画---6",
    "href": "chapter5.html#グラフ描画---6",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize5-4-2",
    "href": "chapter5.html#plt.figurefigsize5-4-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(5, 4))",
    "text": "plt.figure(figsize=(5, 4))"
  },
  {
    "objectID": "chapter5.html#訓練データに対するmseのグラフ",
    "href": "chapter5.html#訓練データに対するmseのグラフ",
    "title": "2  教師あり学習[回帰]",
    "section": "# 訓練データに対するMSEのグラフ",
    "text": "# 訓練データに対するMSEのグラフ"
  },
  {
    "objectID": "chapter5.html#plt.plot-1",
    "href": "chapter5.html#plt.plot-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(",
    "text": "plt.plot("
  },
  {
    "objectID": "chapter5.html#m-sd_gauss_train-black",
    "href": "chapter5.html#m-sd_gauss_train-black",
    "title": "2  教師あり学習[回帰]",
    "section": "M, sd_Gauss_train, “black”,",
    "text": "M, sd_Gauss_train, “black”,"
  },
  {
    "objectID": "chapter5.html#markero-linestyle--2",
    "href": "chapter5.html#markero-linestyle--2",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“-”,",
    "text": "marker=“o”, linestyle=“-”,"
  },
  {
    "objectID": "chapter5.html#markerfacecolorwhite-markeredgecolorblack-1",
    "href": "chapter5.html#markerfacecolorwhite-markeredgecolorblack-1",
    "title": "2  教師あり学習[回帰]",
    "section": "markerfacecolor=“white”, markeredgecolor=“black”,",
    "text": "markerfacecolor=“white”, markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#labeltraining-1",
    "href": "chapter5.html#labeltraining-1",
    "title": "2  教師あり学習[回帰]",
    "section": "label=“training”,",
    "text": "label=“training”,"
  },
  {
    "objectID": "chapter5.html#section-6",
    "href": "chapter5.html#section-6",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#テストデータに対するmseのグラフ",
    "href": "chapter5.html#テストデータに対するmseのグラフ",
    "title": "2  教師あり学習[回帰]",
    "section": "# テストデータに対するMSEのグラフ",
    "text": "# テストデータに対するMSEのグラフ"
  },
  {
    "objectID": "chapter5.html#plt.plot-2",
    "href": "chapter5.html#plt.plot-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(",
    "text": "plt.plot("
  },
  {
    "objectID": "chapter5.html#m-sd_gauss_test-cornflowerblue",
    "href": "chapter5.html#m-sd_gauss_test-cornflowerblue",
    "title": "2  教師あり学習[回帰]",
    "section": "M, sd_Gauss_test, “cornflowerblue”,",
    "text": "M, sd_Gauss_test, “cornflowerblue”,"
  },
  {
    "objectID": "chapter5.html#markero-linestyle--3",
    "href": "chapter5.html#markero-linestyle--3",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“-”,",
    "text": "marker=“o”, linestyle=“-”,"
  },
  {
    "objectID": "chapter5.html#markeredgecolorblack-1",
    "href": "chapter5.html#markeredgecolorblack-1",
    "title": "2  教師あり学習[回帰]",
    "section": "markeredgecolor=“black”,",
    "text": "markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#labeltest-1",
    "href": "chapter5.html#labeltest-1",
    "title": "2  教師あり学習[回帰]",
    "section": "label=“test”,",
    "text": "label=“test”,"
  },
  {
    "objectID": "chapter5.html#section-7",
    "href": "chapter5.html#section-7",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.legendlocupper-left-fontsize10-1",
    "href": "chapter5.html#plt.legendlocupper-left-fontsize10-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.legend(loc=“upper left”, fontsize=10)",
    "text": "plt.legend(loc=“upper left”, fontsize=10)"
  },
  {
    "objectID": "chapter5.html#plt.ylim0-20",
    "href": "chapter5.html#plt.ylim0-20",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.ylim(0, 20)",
    "text": "plt.ylim(0, 20)"
  },
  {
    "objectID": "chapter5.html#plt.grid-4",
    "href": "chapter5.html#plt.grid-4",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-7",
    "href": "chapter5.html#plt.show-7",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\ntibble(x_plt = c(M, M), y_plt = c(sd_Gauss_test, sd_Gauss_train), col = rep(c(‘test’, ‘train’), each = length(M))) |&gt; ggplot() + geom_line(aes(x = x_plt, y = y_plt, color = col)) + geom_point(aes(x = x_plt, y = y_plt, fill = col), color = ‘black’, shape = 21) + xlim(2, 7) + ylim(3, 9) + coord_fixed(ratio = 5 / 6) + labs(x = element_blank(), y = element_blank()) + scale_color_discrete(name = element_blank(), label = c(‘test’, ‘training’)) + scale_fill_discrete(name = element_blank(), label = c(‘test’, ‘training’))"
  },
  {
    "objectID": "chapter5.html#メイン---9",
    "href": "chapter5.html#メイン---9",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#m-3-最適なm3に設定",
    "href": "chapter5.html#m-3-最適なm3に設定",
    "title": "2  教師あり学習[回帰]",
    "section": "M = 3 # 最適なM=3に設定",
    "text": "M = 3 # 最適なM=3に設定\nM &lt;- 2 # 最適なM=2に設定 ## w = fit_gauss_func(X, T, M) # 全データでwを計算 w &lt;- fit_gauss_func(X, t, M) ## sd = np.sqrt(mse_gauss_func(X, T, w)) # SDを計算 sd &lt;- sqrt(mse_gauss_func(X, t, w)) ## # 結果表示 ## print(f”SD = {sd:.2f} cm”) cat(‘SD =’, round(sd, 2))"
  },
  {
    "objectID": "chapter5.html#グラフ描画---7",
    "href": "chapter5.html#グラフ描画---7",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize4-4-2",
    "href": "chapter5.html#plt.figurefigsize4-4-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(4, 4))",
    "text": "plt.figure(figsize=(4, 4))"
  },
  {
    "objectID": "chapter5.html#show_gauss_funcw-1",
    "href": "chapter5.html#show_gauss_funcw-1",
    "title": "2  教師あり学習[回帰]",
    "section": "show_gauss_func(w)",
    "text": "show_gauss_func(w)"
  },
  {
    "objectID": "chapter5.html#plt.plot-3",
    "href": "chapter5.html#plt.plot-3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(",
    "text": "plt.plot("
  },
  {
    "objectID": "chapter5.html#x-t-cornflowerblue-1",
    "href": "chapter5.html#x-t-cornflowerblue-1",
    "title": "2  教師あり学習[回帰]",
    "section": "X, T, “cornflowerblue”,",
    "text": "X, T, “cornflowerblue”,"
  },
  {
    "objectID": "chapter5.html#markero-linestylenone-markeredgecolorblack-1",
    "href": "chapter5.html#markero-linestylenone-markeredgecolorblack-1",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,",
    "text": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#section-8",
    "href": "chapter5.html#section-8",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.xlimx_min-x_max-2",
    "href": "chapter5.html#plt.xlimx_min-x_max-2",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.xlim(X_min, X_max)",
    "text": "plt.xlim(X_min, X_max)"
  },
  {
    "objectID": "chapter5.html#plt.grid-5",
    "href": "chapter5.html#plt.grid-5",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-8",
    "href": "chapter5.html#plt.show-8",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\nshow_gauss_func(w) + geom_point(data = tibble(x_plt = X, y_plt = t), mapping = aes(x = x_plt, y = y_plt), color = ‘cornflowerblue’) + xlim(0, 30) + ylim(130, 180) + coord_fixed(ratio = 30 / 50) + labs(x = element_blank(), y = element_blank())"
  },
  {
    "objectID": "chapter5.html#reset-1",
    "href": "chapter5.html#reset-1",
    "title": "2  教師あり学習[回帰]",
    "section": "%reset",
    "text": "%reset\nrm(list = ls(all.names = TRUE))"
  },
  {
    "objectID": "chapter5.html#import-numpy-as-np-1",
    "href": "chapter5.html#import-numpy-as-np-1",
    "title": "2  教師あり学習[回帰]",
    "section": "import numpy as np",
    "text": "import numpy as np"
  },
  {
    "objectID": "chapter5.html#import-matplotlib.pyplot-as-plt-1",
    "href": "chapter5.html#import-matplotlib.pyplot-as-plt-1",
    "title": "2  教師あり学習[回帰]",
    "section": "import matplotlib.pyplot as plt",
    "text": "import matplotlib.pyplot as plt\nNULL"
  },
  {
    "objectID": "chapter5.html#データのロード---1",
    "href": "chapter5.html#データのロード---1",
    "title": "2  教師あり学習[回帰]",
    "section": "# データのロード ———-",
    "text": "# データのロード ———-"
  },
  {
    "objectID": "chapter5.html#data-np.loadch5_data.npz-1",
    "href": "chapter5.html#data-np.loadch5_data.npz-1",
    "title": "2  教師あり学習[回帰]",
    "section": "data = np.load(“ch5_data.npz”)",
    "text": "data = np.load(“ch5_data.npz”)\nset.seed(1) X_min &lt;- 4; X_max &lt;- 30; N &lt;- 16; prm &lt;- c(170, 108, 0.2) X &lt;- 5 + 25 * runif(N) t &lt;- prm[1] - prm[2] * exp(-prm[3] * X) + 4 * rnorm(N) ## X = data[“X”] NULL ## X_min = 0 X_min &lt;- 0 ## X_max = data[“X_max”] NULL ## N = data[“N”] NULL ## T = data[“T”] NULL"
  },
  {
    "objectID": "chapter5.html#モデル-a--",
    "href": "chapter5.html#モデル-a--",
    "title": "2  教師あり学習[回帰]",
    "section": "# モデル A ———-",
    "text": "# モデル A ———-"
  },
  {
    "objectID": "chapter5.html#def-model_ax-w",
    "href": "chapter5.html#def-model_ax-w",
    "title": "2  教師あり学習[回帰]",
    "section": "def model_A(x, w):",
    "text": "def model_A(x, w):"
  },
  {
    "objectID": "chapter5.html#y-w0---w1-np.exp-w2-x-式5-71",
    "href": "chapter5.html#y-w0---w1-np.exp-w2-x-式5-71",
    "title": "2  教師あり学習[回帰]",
    "section": "y = w[0] - w[1] * np.exp(-w[2] * x) # 式5-71",
    "text": "y = w[0] - w[1] * np.exp(-w[2] * x) # 式5-71"
  },
  {
    "objectID": "chapter5.html#return-y-2",
    "href": "chapter5.html#return-y-2",
    "title": "2  教師あり学習[回帰]",
    "section": "return y",
    "text": "return y\nmodel_A &lt;- function(x, w) { y &lt;- w[1] - w[2] * exp(-w[3] * x) return(y) }"
  },
  {
    "objectID": "chapter5.html#モデル-a-表示--",
    "href": "chapter5.html#モデル-a-表示--",
    "title": "2  教師あり学習[回帰]",
    "section": "# モデル A 表示 ———-",
    "text": "# モデル A 表示 ———-"
  },
  {
    "objectID": "chapter5.html#def-show_model_aw",
    "href": "chapter5.html#def-show_model_aw",
    "title": "2  教師あり学習[回帰]",
    "section": "def show_model_A(w):",
    "text": "def show_model_A(w):"
  },
  {
    "objectID": "chapter5.html#x-np.linspacex_min-x_max-100-1",
    "href": "chapter5.html#x-np.linspacex_min-x_max-100-1",
    "title": "2  教師あり学習[回帰]",
    "section": "x = np.linspace(X_min, X_max, 100)",
    "text": "x = np.linspace(X_min, X_max, 100)"
  },
  {
    "objectID": "chapter5.html#y-model_ax-w",
    "href": "chapter5.html#y-model_ax-w",
    "title": "2  教師あり学習[回帰]",
    "section": "y = model_A(x, w)",
    "text": "y = model_A(x, w)"
  },
  {
    "objectID": "chapter5.html#plt.plotx-y-gray-linewidth4-1",
    "href": "chapter5.html#plt.plotx-y-gray-linewidth4-1",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(x, y, “gray”, linewidth=4)",
    "text": "plt.plot(x, y, “gray”, linewidth=4)\nshow_model_A &lt;- function(w) { x &lt;- seq(X_min, X_max, length.out = 100) y &lt;- model_A(x, w) p &lt;- tibble(x_plt = x, y_plt = y) |&gt; ggplot() + geom_line(aes(x = x_plt, y = y_plt)) return(p) }"
  },
  {
    "objectID": "chapter5.html#モデル-a-の平均二乗誤差mse--",
    "href": "chapter5.html#モデル-a-の平均二乗誤差mse--",
    "title": "2  教師あり学習[回帰]",
    "section": "# モデル A の平均二乗誤差(MSE) ———-",
    "text": "# モデル A の平均二乗誤差(MSE) ———-"
  },
  {
    "objectID": "chapter5.html#def-mse_model_aw-x-t",
    "href": "chapter5.html#def-mse_model_aw-x-t",
    "title": "2  教師あり学習[回帰]",
    "section": "def mse_model_A(w, x, t):",
    "text": "def mse_model_A(w, x, t):"
  },
  {
    "objectID": "chapter5.html#y-model_ax-w-1",
    "href": "chapter5.html#y-model_ax-w-1",
    "title": "2  教師あり学習[回帰]",
    "section": "y = model_A(x, w)",
    "text": "y = model_A(x, w)"
  },
  {
    "objectID": "chapter5.html#mse-np.meany---t-2-式5-72",
    "href": "chapter5.html#mse-np.meany---t-2-式5-72",
    "title": "2  教師あり学習[回帰]",
    "section": "mse = np.mean((y - t) ** 2) # 式5-72",
    "text": "mse = np.mean((y - t) ** 2) # 式5-72"
  },
  {
    "objectID": "chapter5.html#return-mse-2",
    "href": "chapter5.html#return-mse-2",
    "title": "2  教師あり学習[回帰]",
    "section": "return mse",
    "text": "return mse\nmse_model_A &lt;- function(w, x, t) { y &lt;- model_A(x, w) mse &lt;- mean((y - t) ^ 2) return(mse) }\n\n仮\nmse_model_A_for_optim &lt;- function(x, t) { return( function(par) { y &lt;- model_A(x, par) mse &lt;- mean((y - t) ^ 2) return(mse) } ) }"
  },
  {
    "objectID": "chapter5.html#from-scipy.optimize-import-minimize",
    "href": "chapter5.html#from-scipy.optimize-import-minimize",
    "title": "2  教師あり学習 : 回帰",
    "section": "from scipy.optimize import minimize",
    "text": "from scipy.optimize import minimize\nNULL"
  },
  {
    "objectID": "chapter5.html#モデル-a-のパラメータ最適化",
    "href": "chapter5.html#モデル-a-のパラメータ最適化",
    "title": "2  教師あり学習 : 回帰",
    "section": "# モデル A のパラメータ最適化",
    "text": "# モデル A のパラメータ最適化"
  },
  {
    "objectID": "chapter5.html#def-fit_model_aw_init-x-t",
    "href": "chapter5.html#def-fit_model_aw_init-x-t",
    "title": "2  教師あり学習 : 回帰",
    "section": "def fit_model_A(w_init, x, t):",
    "text": "def fit_model_A(w_init, x, t):"
  },
  {
    "objectID": "chapter5.html#res-minimizemse_model_a-w_init-argsx-t-methodpowell",
    "href": "chapter5.html#res-minimizemse_model_a-w_init-argsx-t-methodpowell",
    "title": "2  教師あり学習 : 回帰",
    "section": "res = minimize(mse_model_A, w_init, args=(x, t), method=“powell”)",
    "text": "res = minimize(mse_model_A, w_init, args=(x, t), method=“powell”)"
  },
  {
    "objectID": "chapter5.html#return-res.x",
    "href": "chapter5.html#return-res.x",
    "title": "2  教師あり学習 : 回帰",
    "section": "return res.x",
    "text": "return res.x\nfit_model_A &lt;- function(w_init, x, t) { res &lt;- optim(w_init, mse_model_A_for_optim(X, t)) return(res$par) }"
  },
  {
    "objectID": "chapter5.html#メイン---10",
    "href": "chapter5.html#メイン---10",
    "title": "2  教師あり学習[回帰]",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter5.html#w_init-np.array100.0-0.0-0.0-wの初期値",
    "href": "chapter5.html#w_init-np.array100.0-0.0-0.0-wの初期値",
    "title": "2  教師あり学習 : 回帰",
    "section": "w_init = np.array([100.0, 0.0, 0.0]) # wの初期値",
    "text": "w_init = np.array([100.0, 0.0, 0.0]) # wの初期値\nw_init &lt;- array(c(100, 0, 0), dim = c(1, 3)) ## w = fit_model_A(w_init, X, T) # wを計算 w &lt;- fit_model_A(w_init, X, t) ## sd = np.sqrt(mse_model_A(w, X, T)) # SDを計算 sd &lt;- sqrt(mse_model_A(w, X, t)) # 結果表示 ## print(f”w0 = {w[0]:.2f}, w1 = {w[1]:.2f}, w2 = {w[2]:.2f}“) cat(‘w0 =’, round(w[1], 2), ‘w1 =’, round(w[2], 2), ‘w2 =’, round(w[3], 2)) ## print(f”SD = {sd:.2f} cm”) cat(‘SD =’, round(sd, 2), ‘cm’)"
  },
  {
    "objectID": "chapter5.html#グラフ描画---8",
    "href": "chapter5.html#グラフ描画---8",
    "title": "2  教師あり学習[回帰]",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter5.html#plt.figurefigsize4-4-3",
    "href": "chapter5.html#plt.figurefigsize4-4-3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.figure(figsize=(4, 4))",
    "text": "plt.figure(figsize=(4, 4))"
  },
  {
    "objectID": "chapter5.html#show_model_aw",
    "href": "chapter5.html#show_model_aw",
    "title": "2  教師あり学習 : 回帰",
    "section": "show_model_A(w)",
    "text": "show_model_A(w)"
  },
  {
    "objectID": "chapter5.html#plt.plot-4",
    "href": "chapter5.html#plt.plot-4",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.plot(",
    "text": "plt.plot("
  },
  {
    "objectID": "chapter5.html#x-t-cornflowerblue-2",
    "href": "chapter5.html#x-t-cornflowerblue-2",
    "title": "2  教師あり学習[回帰]",
    "section": "X, T, “cornflowerblue”,",
    "text": "X, T, “cornflowerblue”,"
  },
  {
    "objectID": "chapter5.html#markero-linestylenone-markeredgecolorblack-2",
    "href": "chapter5.html#markero-linestylenone-markeredgecolorblack-2",
    "title": "2  教師あり学習[回帰]",
    "section": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,",
    "text": "marker=“o”, linestyle=“None”, markeredgecolor=“black”,"
  },
  {
    "objectID": "chapter5.html#section-9",
    "href": "chapter5.html#section-9",
    "title": "2  教師あり学習[回帰]",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter5.html#plt.xlimx_min-x_max-3",
    "href": "chapter5.html#plt.xlimx_min-x_max-3",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.xlim(X_min, X_max)",
    "text": "plt.xlim(X_min, X_max)"
  },
  {
    "objectID": "chapter5.html#plt.grid-6",
    "href": "chapter5.html#plt.grid-6",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter5.html#plt.show-9",
    "href": "chapter5.html#plt.show-9",
    "title": "2  教師あり学習[回帰]",
    "section": "plt.show()",
    "text": "plt.show()\nshow_model_A(w)"
  },
  {
    "objectID": "chapter6.html#machine-learning-with-rchapter6.r",
    "href": "chapter6.html#machine-learning-with-rchapter6.r",
    "title": "3  教師あり学習 : 分類",
    "section": "Machine-Learning-with-R/chapter6.R",
    "text": "Machine-Learning-with-R/chapter6.R"
  },
  {
    "objectID": "chapter6.html#section",
    "href": "chapter6.html#section",
    "title": "3  教師あり学習 : 分類",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter6.html#nakano-keisuke",
    "href": "chapter6.html#nakano-keisuke",
    "title": "3  教師あり学習 : 分類",
    "section": "Nakano Keisuke",
    "text": "Nakano Keisuke"
  },
  {
    "objectID": "chapter6.html#matplotlib-inline",
    "href": "chapter6.html#matplotlib-inline",
    "title": "3  教師あり学習 : 分類",
    "section": "%matplotlib inline",
    "text": "%matplotlib inline"
  },
  {
    "objectID": "chapter6.html#import-numpy-as-np",
    "href": "chapter6.html#import-numpy-as-np",
    "title": "3  教師あり学習 : 分類",
    "section": "import numpy as np",
    "text": "import numpy as np"
  },
  {
    "objectID": "chapter6.html#import-matplotlib.pyplot-as-plt",
    "href": "chapter6.html#import-matplotlib.pyplot-as-plt",
    "title": "3  教師あり学習 : 分類",
    "section": "import matplotlib.pyplot as plt",
    "text": "import matplotlib.pyplot as plt\nNULL"
  },
  {
    "objectID": "chapter6.html#データ生成--",
    "href": "chapter6.html#データ生成--",
    "title": "3  教師あり学習 : 分類",
    "section": "# データ生成 ———-",
    "text": "# データ生成 ———-"
  },
  {
    "objectID": "chapter6.html#np.random.seedseed0-乱数を固定",
    "href": "chapter6.html#np.random.seedseed0-乱数を固定",
    "title": "3  教師あり学習 : 分類",
    "section": "np.random.seed(seed=0) # 乱数を固定",
    "text": "np.random.seed(seed=0) # 乱数を固定\nset.seed(0) ## X_min, X_max = 0, 2.5 # x の上限と下限（表示用） X_min &lt;- 0; X_max &lt;- 2.5 ## N = 30 # データ数 N &lt;- 30 ## col = [“cornflowerblue”, “gray”] # クラス0と1の表示色 col &lt;- c(‘cornflowerblue’, ‘gray’) ## X = np.zeros(N) # 空のXを準備 X &lt;- rep(NA, times = N) ## T = np.zeros(N, dtype=np.uint8) # 空のTを準備 t &lt;- rep(NA, times = N) ## prm_s = [0.4, 0.8] # クラス0と1の分布の開始地点 prm_s &lt;- c(0.4, 0.8) ## prm_w = [0.8, 1.6] # クラス0と1の分布の幅 prm_w = c(0.8, 1.6) ## prm_pi = 0.5 # クラス0の全体に対する比率 prm_pi &lt;- 0.5 ## for n in range(N): ## r = np.random.rand() ## T[n] = 0 * (r &lt; prm_pi) + 1 * (r &gt;= prm_pi) # (A) ## X[n] = prm_s[T[n]] + np.random.rand() * prm_w[T[n]] # (B) for (n in 1:N) { r &lt;- runif(1) t[n] &lt;- 0 * (r &lt; prm_pi) + 1 * (r &gt;= prm_pi) X[n] &lt;- prm_s[t[n] + 1] + runif(1) * prm_w[t[n] + 1] } # データ表示 ## print(“X =”, np.round(X, 2)) cat(‘X =’, round(X, 2)) ## print(“T =”, T) cat(‘T =’, t)"
  },
  {
    "objectID": "chapter6.html#データ分布表示--",
    "href": "chapter6.html#データ分布表示--",
    "title": "3  教師あり学習 : 分類",
    "section": "# データ分布表示 ———-",
    "text": "# データ分布表示 ———-"
  },
  {
    "objectID": "chapter6.html#def-show_data1dx-t",
    "href": "chapter6.html#def-show_data1dx-t",
    "title": "3  教師あり学習 : 分類",
    "section": "def show_data1d(x, t):",
    "text": "def show_data1d(x, t):"
  },
  {
    "objectID": "chapter6.html#for-k-in-range2-a-k01-のループ",
    "href": "chapter6.html#for-k-in-range2-a-k01-のループ",
    "title": "3  教師あり学習 : 分類",
    "section": "for k in range(2): # (A) k=0、1 のループ",
    "text": "for k in range(2): # (A) k=0、1 のループ"
  },
  {
    "objectID": "chapter6.html#plt.plot-b-分布を表示",
    "href": "chapter6.html#plt.plot-b-分布を表示",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.plot( # (B) 分布を表示",
    "text": "plt.plot( # (B) 分布を表示"
  },
  {
    "objectID": "chapter6.html#xt-k-tt-k-colk",
    "href": "chapter6.html#xt-k-tt-k-colk",
    "title": "3  教師あり学習 : 分類",
    "section": "x[t == k], t[t == k], col[k],",
    "text": "x[t == k], t[t == k], col[k],"
  },
  {
    "objectID": "chapter6.html#alpha0.5-linestylenone-markero",
    "href": "chapter6.html#alpha0.5-linestylenone-markero",
    "title": "3  教師あり学習 : 分類",
    "section": "alpha=0.5, linestyle=“none”, marker=“o”,",
    "text": "alpha=0.5, linestyle=“none”, marker=“o”,"
  },
  {
    "objectID": "chapter6.html#section-1",
    "href": "chapter6.html#section-1",
    "title": "3  教師あり学習 : 分類",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter6.html#plt.xticksnp.arange0-3-0.5",
    "href": "chapter6.html#plt.xticksnp.arange0-3-0.5",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.xticks(np.arange(0, 3, 0.5))",
    "text": "plt.xticks(np.arange(0, 3, 0.5))"
  },
  {
    "objectID": "chapter6.html#plt.yticks0-1",
    "href": "chapter6.html#plt.yticks0-1",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.yticks([0, 1])",
    "text": "plt.yticks([0, 1])"
  },
  {
    "objectID": "chapter6.html#plt.xlimx_min-x_max",
    "href": "chapter6.html#plt.xlimx_min-x_max",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.xlim(X_min, X_max)",
    "text": "plt.xlim(X_min, X_max)"
  },
  {
    "objectID": "chapter6.html#plt.ylim-0.5-1.5",
    "href": "chapter6.html#plt.ylim-0.5-1.5",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.ylim(-0.5, 1.5)",
    "text": "plt.ylim(-0.5, 1.5)\nshow_data1d &lt;- function(x, t) { df &lt;- tibble(x = x, t = t) p &lt;- df |&gt; ggplot() + geom_point(aes(x = x, y = t, color = as.factor(t))) return(p) }"
  },
  {
    "objectID": "chapter6.html#メイン--",
    "href": "chapter6.html#メイン--",
    "title": "3  教師あり学習 : 分類",
    "section": "# メイン ———-",
    "text": "# メイン ———-"
  },
  {
    "objectID": "chapter6.html#fig-plt.figureﬁgsize3-3",
    "href": "chapter6.html#fig-plt.figureﬁgsize3-3",
    "title": "3  教師あり学習 : 分類",
    "section": "fig = plt.figure(ﬁgsize=(3, 3))",
    "text": "fig = plt.figure(ﬁgsize=(3, 3))"
  },
  {
    "objectID": "chapter6.html#show_data1dx-t",
    "href": "chapter6.html#show_data1dx-t",
    "title": "3  教師あり学習 : 分類",
    "section": "show_data1d(X, T)",
    "text": "show_data1d(X, T)"
  },
  {
    "objectID": "chapter6.html#plt.grid",
    "href": "chapter6.html#plt.grid",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter6.html#plt.show",
    "href": "chapter6.html#plt.show",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.show()",
    "text": "plt.show()"
  },
  {
    "objectID": "chapter6.html#ロジスティック回帰モデル--",
    "href": "chapter6.html#ロジスティック回帰モデル--",
    "title": "3  教師あり学習 : 分類",
    "section": "# ロジスティック回帰モデル ———-",
    "text": "# ロジスティック回帰モデル ———-"
  },
  {
    "objectID": "chapter6.html#def-logisticx-w",
    "href": "chapter6.html#def-logisticx-w",
    "title": "3  教師あり学習 : 分類",
    "section": "def logistic(x, w):",
    "text": "def logistic(x, w):"
  },
  {
    "objectID": "chapter6.html#y-1-1-np.exp-w0-x-w1-式6-10",
    "href": "chapter6.html#y-1-1-np.exp-w0-x-w1-式6-10",
    "title": "3  教師あり学習 : 分類",
    "section": "y = 1 / (1 + np.exp(-(w[0] * x + w[1]))) # 式6-10",
    "text": "y = 1 / (1 + np.exp(-(w[0] * x + w[1]))) # 式6-10"
  },
  {
    "objectID": "chapter6.html#return-y",
    "href": "chapter6.html#return-y",
    "title": "3  教師あり学習 : 分類",
    "section": "return y",
    "text": "return y\nlogistic &lt;- function(x, w) { y &lt;- 1 / (1 + exp(-(w[1] * x + w[2]))) return(y) }"
  },
  {
    "objectID": "chapter6.html#ロジスティック回帰モデルの表示--",
    "href": "chapter6.html#ロジスティック回帰モデルの表示--",
    "title": "3  教師あり学習 : 分類",
    "section": "# ロジスティック回帰モデルの表示 ———-",
    "text": "# ロジスティック回帰モデルの表示 ———-"
  },
  {
    "objectID": "chapter6.html#def-show_logisticw",
    "href": "chapter6.html#def-show_logisticw",
    "title": "3  教師あり学習 : 分類",
    "section": "def show_logistic(w):",
    "text": "def show_logistic(w):"
  },
  {
    "objectID": "chapter6.html#x-np.linspacex_min-x_max-100",
    "href": "chapter6.html#x-np.linspacex_min-x_max-100",
    "title": "3  教師あり学習 : 分類",
    "section": "x = np.linspace(X_min, X_max, 100)",
    "text": "x = np.linspace(X_min, X_max, 100)"
  },
  {
    "objectID": "chapter6.html#y-logisticx-w",
    "href": "chapter6.html#y-logisticx-w",
    "title": "3  教師あり学習 : 分類",
    "section": "y = logistic(x, w)",
    "text": "y = logistic(x, w)"
  },
  {
    "objectID": "chapter6.html#plt.plotx-y-gray-linewidth4",
    "href": "chapter6.html#plt.plotx-y-gray-linewidth4",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.plot(x, y, “gray”, linewidth=4)",
    "text": "plt.plot(x, y, “gray”, linewidth=4)"
  },
  {
    "objectID": "chapter6.html#決定境界",
    "href": "chapter6.html#決定境界",
    "title": "3  教師あり学習 : 分類",
    "section": "# 決定境界",
    "text": "# 決定境界"
  },
  {
    "objectID": "chapter6.html#i-np.minnp.wherey-0.5-a",
    "href": "chapter6.html#i-np.minnp.wherey-0.5-a",
    "title": "3  教師あり学習 : 分類",
    "section": "i = np.min(np.where(y > 0.5)) # (A)",
    "text": "i = np.min(np.where(y &gt; 0.5)) # (A)"
  },
  {
    "objectID": "chapter6.html#boundary-xi---1-xi-2-b",
    "href": "chapter6.html#boundary-xi---1-xi-2-b",
    "title": "3  教師あり学習 : 分類",
    "section": "boundary = (x[i - 1] + x[i]) / 2 # (B)",
    "text": "boundary = (x[i - 1] + x[i]) / 2 # (B)"
  },
  {
    "objectID": "chapter6.html#plt.plotboundary-boundary--0.5-1.5-black-linestyle",
    "href": "chapter6.html#plt.plotboundary-boundary--0.5-1.5-black-linestyle",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.plot([boundary, boundary], [-0.5, 1.5], “black”, linestyle=“–”)",
    "text": "plt.plot([boundary, boundary], [-0.5, 1.5], “black”, linestyle=“–”)"
  },
  {
    "objectID": "chapter6.html#return-boundary",
    "href": "chapter6.html#return-boundary",
    "title": "3  教師あり学習 : 分類",
    "section": "return boundary",
    "text": "return boundary\nshow_logistic &lt;- function(w) { x &lt;- seq(X_min, X_max, length.out = 100) y &lt;- logistic(x, w) df &lt;- tibble(x = x, y = y) |&gt; mutate(id = 1:n()) p &lt;- df |&gt; ggplot() + geom_line(aes(x = x, y = y), color = ‘gray’) i &lt;- df |&gt; filter(y &gt; 0.5) |&gt; filter(y == min(y)) boundary &lt;- (x[i\\(id - 1] + x[i\\)id]) / 2 p &lt;- p + geom_vline(xintercept = boundary, linetype = ‘dashed’) return(list(p = p, boundry = boundary)) }"
  },
  {
    "objectID": "chapter6.html#テスト--",
    "href": "chapter6.html#テスト--",
    "title": "3  教師あり学習 : 分類",
    "section": "# テスト ———-",
    "text": "# テスト ———-"
  },
  {
    "objectID": "chapter6.html#w-np.array8--10",
    "href": "chapter6.html#w-np.array8--10",
    "title": "3  教師あり学習 : 分類",
    "section": "w = np.array([8, -10])",
    "text": "w = np.array([8, -10])\nw &lt;- c(8, -10) ## b = show_logistic(w) b &lt;- show_logistic(w) ## ## print(f’decision boundary = {b}‘) cat(’dicision boundary =’, b\\(boundry) ## ## plt.grid() ## ## plt.show() plot(b\\)p)"
  },
  {
    "objectID": "chapter6.html#平均交差エントロピー誤差--",
    "href": "chapter6.html#平均交差エントロピー誤差--",
    "title": "3  教師あり学習 : 分類",
    "section": "# 平均交差エントロピー誤差 ———-",
    "text": "# 平均交差エントロピー誤差 ———-"
  },
  {
    "objectID": "chapter6.html#def-cee_logisticw-x-t",
    "href": "chapter6.html#def-cee_logisticw-x-t",
    "title": "3  教師あり学習 : 分類",
    "section": "def cee_logistic(w, x, t):",
    "text": "def cee_logistic(w, x, t):"
  },
  {
    "objectID": "chapter6.html#y-logisticx-w-1",
    "href": "chapter6.html#y-logisticx-w-1",
    "title": "3  教師あり学習 : 分類",
    "section": "y = logistic(x, w)",
    "text": "y = logistic(x, w)"
  },
  {
    "objectID": "chapter6.html#式6-16の計算",
    "href": "chapter6.html#式6-16の計算",
    "title": "3  教師あり学習 : 分類",
    "section": "# 式6-16の計算",
    "text": "# 式6-16の計算"
  },
  {
    "objectID": "chapter6.html#cee-0",
    "href": "chapter6.html#cee-0",
    "title": "3  教師あり学習 : 分類",
    "section": "cee = 0",
    "text": "cee = 0"
  },
  {
    "objectID": "chapter6.html#for-n-in-rangeleny",
    "href": "chapter6.html#for-n-in-rangeleny",
    "title": "3  教師あり学習 : 分類",
    "section": "for n in range(len(y)):",
    "text": "for n in range(len(y)):"
  },
  {
    "objectID": "chapter6.html#cee-cee---tn-np.logyn-1---tn-np.log1---yn",
    "href": "chapter6.html#cee-cee---tn-np.logyn-1---tn-np.log1---yn",
    "title": "3  教師あり学習 : 分類",
    "section": "cee = cee - (t[n] * np.log(y[n]) + (1 - t[n]) * np.log(1 - y[n]))",
    "text": "cee = cee - (t[n] * np.log(y[n]) + (1 - t[n]) * np.log(1 - y[n]))"
  },
  {
    "objectID": "chapter6.html#cee-cee-n",
    "href": "chapter6.html#cee-cee-n",
    "title": "3  教師あり学習 : 分類",
    "section": "cee = cee / N",
    "text": "cee = cee / N"
  },
  {
    "objectID": "chapter6.html#return-cee",
    "href": "chapter6.html#return-cee",
    "title": "3  教師あり学習 : 分類",
    "section": "return cee",
    "text": "return cee\ncee_logistic &lt;- function(w, x, t) { y &lt;- logistic(x, w) cee &lt;- 0 for (n in 1:length(y)) { cee &lt;- cee - (t[n] * log(y[n]) + (1 - t[n]) * log(1 - y[n])) } cee &lt;- cee / N return(cee) }"
  },
  {
    "objectID": "chapter6.html#テスト---1",
    "href": "chapter6.html#テスト---1",
    "title": "3  教師あり学習 : 分類",
    "section": "# テスト ———-",
    "text": "# テスト ———-"
  },
  {
    "objectID": "chapter6.html#w-np.array1-1",
    "href": "chapter6.html#w-np.array1-1",
    "title": "3  教師あり学習 : 分類",
    "section": "w = np.array([1, 1])",
    "text": "w = np.array([1, 1])\nw &lt;- c(1, 1) ## dcee = dcee_logistic(w, X, T) dcee &lt;- dcee_logistic(w, X, t) ## print(“dCEE =”, np.round(dcee, 6)) cat(‘dCEE =’, round(dcee, 6))"
  },
  {
    "objectID": "chapter6.html#平均交差エントロピー誤差の計算--",
    "href": "chapter6.html#平均交差エントロピー誤差の計算--",
    "title": "3  教師あり学習 : 分類",
    "section": "# 平均交差エントロピー誤差の計算 ———-",
    "text": "# 平均交差エントロピー誤差の計算 ———-"
  },
  {
    "objectID": "chapter6.html#w0_n-w1_n-80-80-等高線表示の解像度",
    "href": "chapter6.html#w0_n-w1_n-80-80-等高線表示の解像度",
    "title": "3  教師あり学習 : 分類",
    "section": "w0_n, w1_n = 80, 80 # 等高線表示の解像度",
    "text": "w0_n, w1_n = 80, 80 # 等高線表示の解像度\nw0_n &lt;- 80; w1_n &lt;- 80 ## w0_min, w0_max = 0, 15 w0_min &lt;- 0; w0_max &lt;- 15 ## w1_min, w1_max = -15, 0 w1_min &lt;- -15; w1_max &lt;- 0 ## w0 = np.linspace(w0_min, w0_max, w0_n) w0 &lt;- seq(w0_min, w0_max, length.out = w0_n) ## w1 = np.linspace(w1_min, w1_max, w1_n) w1 &lt;- seq(w1_min, w1_max, length.out = w1_n) ## C = np.zeros((w1_n, w0_n)) C &lt;- array(0, dim = c(w1_n, w0_n)) ## for i0 in range(w0_n): ## for i1 in range(w1_n): ## w = np.array([w0[i0], w1[i1]]) ## C[i1, i0] = cee_logistic(w, X, T) # CEEを計算 for (i0 in 1:w0_n) { for (i1 in 1:w1_n) { w &lt;- c(w0[i0], w1[i1]) C[i1, i0] &lt;- cee_logistic(w, X, t) } } ## ww0, ww1 = np.meshgrid(w0, w1) # 描画用座標の作成 NULL"
  },
  {
    "objectID": "chapter6.html#グラフ描画--",
    "href": "chapter6.html#グラフ描画--",
    "title": "3  教師あり学習 : 分類",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter6.html#plt.ﬁgureﬁgsize12-5",
    "href": "chapter6.html#plt.ﬁgureﬁgsize12-5",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.ﬁgure(ﬁgsize=(12, 5))",
    "text": "plt.ﬁgure(ﬁgsize=(12, 5))"
  },
  {
    "objectID": "chapter6.html#plt.subplots_adjustwspace0.5",
    "href": "chapter6.html#plt.subplots_adjustwspace0.5",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.subplots_adjust(wspace=0.5)",
    "text": "plt.subplots_adjust(wspace=0.5)"
  },
  {
    "objectID": "chapter6.html#サーフェス表示",
    "href": "chapter6.html#サーフェス表示",
    "title": "3  教師あり学習 : 分類",
    "section": "# サーフェス表示",
    "text": "# サーフェス表示"
  },
  {
    "objectID": "chapter6.html#ax-plt.subplot1-2-1-projection3d",
    "href": "chapter6.html#ax-plt.subplot1-2-1-projection3d",
    "title": "3  教師あり学習 : 分類",
    "section": "ax = plt.subplot(1, 2, 1, projection=“3d”)",
    "text": "ax = plt.subplot(1, 2, 1, projection=“3d”)"
  },
  {
    "objectID": "chapter6.html#ax.plot_surface",
    "href": "chapter6.html#ax.plot_surface",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.plot_surface(",
    "text": "ax.plot_surface("
  },
  {
    "objectID": "chapter6.html#ww0-ww1-c",
    "href": "chapter6.html#ww0-ww1-c",
    "title": "3  教師あり学習 : 分類",
    "section": "ww0, ww1, C,",
    "text": "ww0, ww1, C,"
  },
  {
    "objectID": "chapter6.html#colorblue-edgecolorblack-rstride10-cstride10-alpha0.3",
    "href": "chapter6.html#colorblue-edgecolorblack-rstride10-cstride10-alpha0.3",
    "title": "3  教師あり学習 : 分類",
    "section": "color=“blue”, edgecolor=“black”, rstride=10, cstride=10, alpha=0.3,",
    "text": "color=“blue”, edgecolor=“black”, rstride=10, cstride=10, alpha=0.3,"
  },
  {
    "objectID": "chapter6.html#section-2",
    "href": "chapter6.html#section-2",
    "title": "3  教師あり学習 : 分類",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter6.html#ax.set_xlabelw_0-fontsize14",
    "href": "chapter6.html#ax.set_xlabelw_0-fontsize14",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.set_xlabel(“\\(w_0\\)”, fontsize=14)",
    "text": "ax.set_xlabel(“\\(w_0\\)”, fontsize=14)"
  },
  {
    "objectID": "chapter6.html#ax.set_ylabelw_1-fontsize14",
    "href": "chapter6.html#ax.set_ylabelw_1-fontsize14",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.set_ylabel(“\\(w_1\\)”, fontsize=14)",
    "text": "ax.set_ylabel(“\\(w_1\\)”, fontsize=14)"
  },
  {
    "objectID": "chapter6.html#ax.set_xlim0-15",
    "href": "chapter6.html#ax.set_xlim0-15",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.set_xlim(0, 15)",
    "text": "ax.set_xlim(0, 15)"
  },
  {
    "objectID": "chapter6.html#ax.set_ylim-15-0",
    "href": "chapter6.html#ax.set_ylim-15-0",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.set_ylim(-15, 0)",
    "text": "ax.set_ylim(-15, 0)"
  },
  {
    "objectID": "chapter6.html#ax.set_zlim0-8",
    "href": "chapter6.html#ax.set_zlim0-8",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.set_zlim(0, 8)",
    "text": "ax.set_zlim(0, 8)"
  },
  {
    "objectID": "chapter6.html#ax.view_init30--95",
    "href": "chapter6.html#ax.view_init30--95",
    "title": "3  教師あり学習 : 分類",
    "section": "ax.view_init(30, -95)",
    "text": "ax.view_init(30, -95)\npersp(w0, w1, C, theta = -195, phi = 30, lwd = 0.3) ## # 等高線表示 ## plt.subplot(1, 2, 2) ## cont = plt.contour( ## ww0, ww1, C, ## colors=“black”, levels=[0.26, 0.4, 0.8, 1.6, 3.2, 6.4], ## ) ## cont.clabel(fmt=“%.2f”, fontsize=8) ## plt.xlabel(“\\(w_0\\)”, fontsize=14) ## plt.ylabel(“\\(w_1\\)”, fontsize=14) ## plt.grid() ## plt.show() df &lt;- data.frame(array(NA, dim = c(w0_n, w1_n))) n &lt;- 1 for (i in 1:w0_n) { for (j in 1:w1_n) { df[n, 1] &lt;- w0[i] df[n, 2] &lt;- w1[j] df[n, 3] &lt;- C[i, j] n &lt;- n + 1 } } df |&gt; ggplot() + geom_contour(aes(X1, X2, z = X3)) + labs(x = element_blank(), y = element_blank()) + xlim(w0_min, w0_max) + ylim(w1_min, w1_max) + coord_fixed(ratio = (w0_max - w0_min) / (w1_max - w1_min))"
  },
  {
    "objectID": "chapter6.html#平均交差エントロピー誤差の微分--",
    "href": "chapter6.html#平均交差エントロピー誤差の微分--",
    "title": "3  教師あり学習 : 分類",
    "section": "# 平均交差エントロピー誤差の微分 ———-",
    "text": "# 平均交差エントロピー誤差の微分 ———-"
  },
  {
    "objectID": "chapter6.html#def-dcee_logisticw-x-t",
    "href": "chapter6.html#def-dcee_logisticw-x-t",
    "title": "3  教師あり学習 : 分類",
    "section": "def dcee_logistic(w, x, t):",
    "text": "def dcee_logistic(w, x, t):"
  },
  {
    "objectID": "chapter6.html#y-logisticx-w-2",
    "href": "chapter6.html#y-logisticx-w-2",
    "title": "3  教師あり学習 : 分類",
    "section": "y = logistic(x, w)",
    "text": "y = logistic(x, w)"
  },
  {
    "objectID": "chapter6.html#式6-32式6-33の計算",
    "href": "chapter6.html#式6-32式6-33の計算",
    "title": "3  教師あり学習 : 分類",
    "section": "# 式6-32、式6-33の計算",
    "text": "# 式6-32、式6-33の計算"
  },
  {
    "objectID": "chapter6.html#dcee-np.zeros2",
    "href": "chapter6.html#dcee-np.zeros2",
    "title": "3  教師あり学習 : 分類",
    "section": "dcee = np.zeros(2)",
    "text": "dcee = np.zeros(2)"
  },
  {
    "objectID": "chapter6.html#for-n-in-rangeleny-1",
    "href": "chapter6.html#for-n-in-rangeleny-1",
    "title": "3  教師あり学習 : 分類",
    "section": "for n in range(len(y)):",
    "text": "for n in range(len(y)):"
  },
  {
    "objectID": "chapter6.html#dcee0-dcee0-yn---tn-xn",
    "href": "chapter6.html#dcee0-dcee0-yn---tn-xn",
    "title": "3  教師あり学習 : 分類",
    "section": "dcee[0] = dcee[0] + (y[n] - t[n]) * x[n]",
    "text": "dcee[0] = dcee[0] + (y[n] - t[n]) * x[n]"
  },
  {
    "objectID": "chapter6.html#dcee1-dcee1-yn---tn",
    "href": "chapter6.html#dcee1-dcee1-yn---tn",
    "title": "3  教師あり学習 : 分類",
    "section": "dcee[1] = dcee[1] + (y[n] - t[n])",
    "text": "dcee[1] = dcee[1] + (y[n] - t[n])"
  },
  {
    "objectID": "chapter6.html#dcee-dcee-n",
    "href": "chapter6.html#dcee-dcee-n",
    "title": "3  教師あり学習 : 分類",
    "section": "dcee = dcee / N",
    "text": "dcee = dcee / N"
  },
  {
    "objectID": "chapter6.html#return-dcee",
    "href": "chapter6.html#return-dcee",
    "title": "3  教師あり学習 : 分類",
    "section": "return dcee",
    "text": "return dcee\ndcee_logistic &lt;- function(w, x, t) { y &lt;- logistic(x, w) dcee &lt;- rep(0, times = 2) for (n in 1:length(y)) { dcee[1] &lt;- dcee[1] + (y[n] - t[n]) * x[n] dcee[2] &lt;- dcee[2] + (y[n] - t[n]) } dcee &lt;- dcee / N return(dcee) }"
  },
  {
    "objectID": "chapter6.html#テスト---2",
    "href": "chapter6.html#テスト---2",
    "title": "3  教師あり学習 : 分類",
    "section": "# テスト ———-",
    "text": "# テスト ———-"
  },
  {
    "objectID": "chapter6.html#w-np.array1-1-1",
    "href": "chapter6.html#w-np.array1-1-1",
    "title": "3  教師あり学習 : 分類",
    "section": "w = np.array([1, 1])",
    "text": "w = np.array([1, 1])\nw &lt;- c(1, 1) ## dcee = dcee_logistic(w, X, T) dcee &lt;- dcee_logistic(w, X, t) ## print(“dCEE =”, np.round(dcee, 6)) cat(‘dCEE =’, round(dcee, 6))"
  },
  {
    "objectID": "chapter6.html#from-scipy.optimize-import-minimize",
    "href": "chapter6.html#from-scipy.optimize-import-minimize",
    "title": "3  教師あり学習 : 分類",
    "section": "from scipy.optimize import minimize",
    "text": "from scipy.optimize import minimize\nNULL"
  },
  {
    "objectID": "chapter6.html#ロジスティック回帰モデルのパラメータ最適化",
    "href": "chapter6.html#ロジスティック回帰モデルのパラメータ最適化",
    "title": "3  教師あり学習 : 分類",
    "section": "# ロジスティック回帰モデルのパラメータ最適化",
    "text": "# ロジスティック回帰モデルのパラメータ最適化"
  },
  {
    "objectID": "chapter6.html#def-fit_logisticw_init-x-t",
    "href": "chapter6.html#def-fit_logisticw_init-x-t",
    "title": "3  教師あり学習 : 分類",
    "section": "def fit_logistic(w_init, x, t):",
    "text": "def fit_logistic(w_init, x, t):"
  },
  {
    "objectID": "chapter6.html#res-minimize-a",
    "href": "chapter6.html#res-minimize-a",
    "title": "3  教師あり学習 : 分類",
    "section": "res = minimize( # (A)",
    "text": "res = minimize( # (A)"
  },
  {
    "objectID": "chapter6.html#cee_logistic-w_init-argsx-t",
    "href": "chapter6.html#cee_logistic-w_init-argsx-t",
    "title": "3  教師あり学習 : 分類",
    "section": "cee_logistic, w_init, args=(x, t),",
    "text": "cee_logistic, w_init, args=(x, t),"
  },
  {
    "objectID": "chapter6.html#jacdcee_logistic-methodcg",
    "href": "chapter6.html#jacdcee_logistic-methodcg",
    "title": "3  教師あり学習 : 分類",
    "section": "jac=dcee_logistic, method=“CG”,",
    "text": "jac=dcee_logistic, method=“CG”,"
  },
  {
    "objectID": "chapter6.html#section-3",
    "href": "chapter6.html#section-3",
    "title": "3  教師あり学習 : 分類",
    "section": ")",
    "text": ")"
  },
  {
    "objectID": "chapter6.html#return-res.x",
    "href": "chapter6.html#return-res.x",
    "title": "3  教師あり学習 : 分類",
    "section": "return res.x",
    "text": "return res.x\n\n共役勾配法の実装に苦戦中"
  },
  {
    "objectID": "chapter6.html#w_init-np.array1.0--1.0-wの初期値",
    "href": "chapter6.html#w_init-np.array1.0--1.0-wの初期値",
    "title": "3  教師あり学習 : 分類",
    "section": "w_init = np.array([1.0, -1.0]) # wの初期値",
    "text": "w_init = np.array([1.0, -1.0]) # wの初期値\nw_init &lt;- c(1, -1) ## w = fit_logistic(w_init, X, T) # wを計算 res &lt;- minimize(w_init, X, t) ## cee = cee_logistic(w, X, T) # CEEを計算 cee &lt;- res$cee"
  },
  {
    "objectID": "chapter6.html#グラフ描画---1",
    "href": "chapter6.html#グラフ描画---1",
    "title": "3  教師あり学習 : 分類",
    "section": "# グラフ描画 ———-",
    "text": "# グラフ描画 ———-"
  },
  {
    "objectID": "chapter6.html#plt.figurefigsize3-3",
    "href": "chapter6.html#plt.figurefigsize3-3",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.figure(figsize=(3, 3))",
    "text": "plt.figure(figsize=(3, 3))"
  },
  {
    "objectID": "chapter6.html#boundary-show_logisticw",
    "href": "chapter6.html#boundary-show_logisticw",
    "title": "3  教師あり学習 : 分類",
    "section": "boundary = show_logistic(w)",
    "text": "boundary = show_logistic(w)"
  },
  {
    "objectID": "chapter6.html#show_data1dx-t-1",
    "href": "chapter6.html#show_data1dx-t-1",
    "title": "3  教師あり学習 : 分類",
    "section": "show_data1d(X, T)",
    "text": "show_data1d(X, T)"
  },
  {
    "objectID": "chapter6.html#plt.grid-1",
    "href": "chapter6.html#plt.grid-1",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.grid()",
    "text": "plt.grid()"
  },
  {
    "objectID": "chapter6.html#plt.show-1",
    "href": "chapter6.html#plt.show-1",
    "title": "3  教師あり学習 : 分類",
    "section": "plt.show()",
    "text": "plt.show()"
  },
  {
    "objectID": "chapter6.html#結果表示--",
    "href": "chapter6.html#結果表示--",
    "title": "3  教師あり学習 : 分類",
    "section": "# 結果表示 ———-",
    "text": "# 結果表示 ———-"
  },
  {
    "objectID": "chapter6.html#printfw0-w0.2f-w1-w1.2f",
    "href": "chapter6.html#printfw0-w0.2f-w1-w1.2f",
    "title": "3  教師あり学習 : 分類",
    "section": "print(f”w0 = {w[0]:.2f}, w1 = {w[1]:.2f}“)",
    "text": "print(f”w0 = {w[0]:.2f}, w1 = {w[1]:.2f}“)"
  },
  {
    "objectID": "chapter6.html#printfcee-cee.2f",
    "href": "chapter6.html#printfcee-cee.2f",
    "title": "3  教師あり学習 : 分類",
    "section": "print(f”CEE = {cee:.2f}“)",
    "text": "print(f”CEE = {cee:.2f}“)"
  },
  {
    "objectID": "chapter6.html#printfboundary-boundary.2f-g",
    "href": "chapter6.html#printfboundary-boundary.2f-g",
    "title": "3  教師あり学習 : 分類",
    "section": "print(f”Boundary = {boundary:.2f} g”)",
    "text": "print(f”Boundary = {boundary:.2f} g”)\n\n\n\n\n\n\nまだ\n\n\n\n\n共役勾配法の実装に苦戦中\n\n\n\n\n\nw_for_calc &lt;- w_init\n\n\nw_hist &lt;- array(NA, dim = c(tau, 2))\n\n\nw_hist[1,] &lt;- w_init\n\n\nn &lt;- 1\n\n\nfor (i in 1:tau) {\n\n\ndcee &lt;- dcee_logistic(w_for_calc, x, t)\n\n\nw_for_calc &lt;- w_for_calc - alpha * dcee\n\n\nw_hist[i+1,] &lt;- w_for_calc\n\n\nif (max(abs(dcee)) &lt; eps) break\n\n\nn &lt;- n + 1\n\n\n}\n\n\ncee &lt;- cee_logistic(w_for_calc, x, t)\n\n\nreturn(list(w = w_for_calc, w_history = w_hist[1:n,], cee = cee, dcee = dcee))\n\n\n}\n\n\nfit_logistic &lt;- function(w_init, x, t) {\n\n\nres &lt;- minimize(w_init, x, t)\n\n\n}"
  }
]